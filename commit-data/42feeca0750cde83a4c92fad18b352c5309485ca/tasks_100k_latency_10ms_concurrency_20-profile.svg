<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (391 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.26%)</title><rect x="10.0" y="1139.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.26%)</title><rect x="10.0" y="1123.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 6.91%)</title><rect x="13.0" y="1139.0" width="81.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (27 samples, 6.91%)</title><rect x="13.0" y="1123.0" width="81.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="1134.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.26%)</title><rect x="13.0" y="1107.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.26%)</title><rect x="13.0" y="1091.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.26%)</title><rect x="13.0" y="1075.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.26%)</title><rect x="13.0" y="1059.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="13.0" y="1043.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="13.0" y="1027.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.26%)</title><rect x="13.0" y="1011.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.26%)</title><rect x="13.0" y="995.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="13.0" y="979.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="13.0" y="963.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.26%)</title><rect x="13.0" y="947.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.26%)</title><rect x="13.0" y="931.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.26%)</title><rect x="13.0" y="915.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.26%)</title><rect x="13.0" y="899.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.26%)</title><rect x="13.0" y="883.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="894.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.26%)</title><rect x="13.0" y="867.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="16.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 6.39%)</title><rect x="16.0" y="1107.0" width="75.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.0" y="1118.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.26%)</title><rect x="16.0" y="1091.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.26%)</title><rect x="16.0" y="1075.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="16.0" y="1059.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/353143925.accept (1 samples, 0.26%)</title><rect x="16.0" y="1043.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.26%)</title><rect x="16.0" y="1027.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.26%)</title><rect x="16.0" y="1011.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 1.79%)</title><rect x="19.1" y="1091.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="1102.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/261844746.accept (6 samples, 1.53%)</title><rect x="19.1" y="1075.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.53%)</title><rect x="19.1" y="1059.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.02%)</title><rect x="19.1" y="1043.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.02%)</title><rect x="19.1" y="1027.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.02%)</title><rect x="19.1" y="1011.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.02%)</title><rect x="19.1" y="995.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.02%)</title><rect x="19.1" y="979.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.26%)</title><rect x="28.1" y="963.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.26%)</title><rect x="28.1" y="947.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.26%)</title><rect x="31.1" y="1043.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.26%)</title><rect x="31.1" y="1027.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.26%)</title><rect x="34.1" y="1043.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="34.1" y="1027.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="34.1" y="1011.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.26%)</title><rect x="37.2" y="1075.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.26%)</title><rect x="37.2" y="1059.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="37.2" y="1043.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="37.2" y="1027.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.2" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.26%)</title><rect x="37.2" y="1011.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.35%)</title><rect x="40.2" y="1091.0" width="51.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.2" y="1102.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.35%)</title><rect x="40.2" y="1075.0" width="51.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.2" y="1086.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.30%)</title><rect x="40.2" y="1059.0" width="27.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.2" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.28%)</title><rect x="40.2" y="1043.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.28%)</title><rect x="40.2" y="1027.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.77%)</title><rect x="43.2" y="1011.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.51%)</title><rect x="43.2" y="995.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="43.2" y="979.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.26%)</title><rect x="43.2" y="963.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.26%)</title><rect x="43.2" y="947.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.26%)</title><rect x="43.2" y="931.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.2" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="43.2" y="915.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="46.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.26%)</title><rect x="46.2" y="979.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.2" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.26%)</title><rect x="46.2" y="963.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.26%)</title><rect x="46.2" y="947.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.2" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.26%)</title><rect x="46.2" y="931.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.26%)</title><rect x="46.2" y="915.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.2" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.26%)</title><rect x="46.2" y="899.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.min (1 samples, 0.26%)</title><rect x="49.2" y="995.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/570505239.shouldBlock (1 samples, 0.26%)</title><rect x="52.3" y="1011.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.26%)</title><rect x="52.3" y="995.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.26%)</title><rect x="52.3" y="979.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.26%)</title><rect x="52.3" y="963.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.26%)</title><rect x="52.3" y="947.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.26%)</title><rect x="52.3" y="931.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.characteristics (1 samples, 0.26%)</title><rect x="52.3" y="915.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.77%)</title><rect x="55.3" y="1043.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.77%)</title><rect x="55.3" y="1027.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.77%)</title><rect x="55.3" y="1011.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.77%)</title><rect x="55.3" y="995.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.51%)</title><rect x="55.3" y="979.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (2 samples, 0.51%)</title><rect x="55.3" y="963.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.26%)</title><rect x="61.3" y="979.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.26%)</title><rect x="61.3" y="963.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.26%)</title><rect x="61.3" y="947.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.3" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.26%)</title><rect x="61.3" y="931.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.26%)</title><rect x="64.3" y="1043.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.77%)</title><rect x="67.3" y="1059.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.77%)</title><rect x="67.3" y="1043.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.77%)</title><rect x="67.3" y="1027.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.26%)</title><rect x="67.3" y="1011.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/1143908672.accept (1 samples, 0.26%)</title><rect x="67.3" y="995.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.26%)</title><rect x="67.3" y="979.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.26%)</title><rect x="67.3" y="963.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="70.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.26%)</title><rect x="67.3" y="947.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="67.3" y="931.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="67.3" y="915.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.51%)</title><rect x="70.4" y="1011.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.26%)</title><rect x="73.4" y="995.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 1.28%)</title><rect x="76.4" y="1059.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.77%)</title><rect x="76.4" y="1043.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.77%)</title><rect x="76.4" y="1027.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="76.4" y="1011.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="76.4" y="995.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.26%)</title><rect x="76.4" y="979.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.51%)</title><rect x="79.4" y="1011.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.26%)</title><rect x="79.4" y="995.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.26%)</title><rect x="79.4" y="979.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.26%)</title><rect x="79.4" y="963.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.26%)</title><rect x="79.4" y="947.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.4" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.26%)</title><rect x="79.4" y="931.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.26%)</title><rect x="79.4" y="915.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.writerCleanup (1 samples, 0.26%)</title><rect x="79.4" y="899.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.26%)</title><rect x="82.4" y="995.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.26%)</title><rect x="82.4" y="979.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.26%)</title><rect x="82.4" y="963.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.26%)</title><rect x="82.4" y="947.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.26%)</title><rect x="82.4" y="931.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.26%)</title><rect x="82.4" y="915.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.26%)</title><rect x="82.4" y="899.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.26%)</title><rect x="82.4" y="883.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.26%)</title><rect x="82.4" y="867.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.26%)</title><rect x="82.4" y="851.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.4" y="862.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.26%)</title><rect x="82.4" y="835.0" width="3.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="85.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.51%)</title><rect x="85.4" y="1043.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.26%)</title><rect x="85.4" y="1027.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.26%)</title><rect x="85.4" y="1011.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.idString (1 samples, 0.26%)</title><rect x="85.4" y="995.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.4" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.26%)</title><rect x="85.4" y="979.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="88.4" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="85.4" y="963.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="88.4" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="85.4" y="947.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="88.4" y="958.0"></text>
</g>
<g>
<title>CompiledIC::is_clean() const (1 samples, 0.26%)</title><rect x="85.4" y="931.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="88.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.26%)</title><rect x="88.5" y="1027.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="88.5" y="1011.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="88.5" y="995.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.26%)</title><rect x="88.5" y="979.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.26%)</title><rect x="88.5" y="963.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.26%)</title><rect x="88.5" y="947.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.26%)</title><rect x="88.5" y="931.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.26%)</title><rect x="88.5" y="915.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.26%)</title><rect x="88.5" y="899.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.26%)</title><rect x="91.5" y="1107.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.26%)</title><rect x="91.5" y="1091.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (229 samples, 58.57%)</title><rect x="94.5" y="1139.0" width="691.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.5" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (229 samples, 58.57%)</title><rect x="94.5" y="1123.0" width="691.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.5" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (229 samples, 58.57%)</title><rect x="94.5" y="1107.0" width="691.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.5" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/217153351.run (218 samples, 55.75%)</title><rect x="94.5" y="1091.0" width="657.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.5" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/217153351.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (218 samples, 55.75%)</title><rect x="94.5" y="1075.0" width="657.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.5" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (218 samples, 55.75%)</title><rect x="94.5" y="1059.0" width="657.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.5" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (218 samples, 55.75%)</title><rect x="94.5" y="1043.0" width="657.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.5" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 1.53%)</title><rect x="112.6" y="1027.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 1.53%)</title><rect x="112.6" y="1011.0" width="18.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 1.53%)</title><rect x="112.6" y="995.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="112.6" y="979.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 1.28%)</title><rect x="115.6" y="979.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 4.09%)</title><rect x="130.7" y="1027.0" width="48.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.7" y="1038.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.30%)</title><rect x="151.8" y="1011.0" width="27.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.8" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.30%)</title><rect x="151.8" y="995.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.8" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.30%)</title><rect x="151.8" y="979.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.8" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.51%)</title><rect x="151.8" y="963.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.51%)</title><rect x="151.8" y="947.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.51%)</title><rect x="151.8" y="931.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$305/264886760.accept (2 samples, 0.51%)</title><rect x="151.8" y="915.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.79%)</title><rect x="157.9" y="963.0" width="21.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.9" y="974.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$305/264886760.accept (7 samples, 1.79%)</title><rect x="157.9" y="947.0" width="21.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.9" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (7 samples, 1.79%)</title><rect x="157.9" y="931.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.9" y="942.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 1.79%)</title><rect x="157.9" y="915.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.9" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 1.53%)</title><rect x="160.9" y="899.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/1889371209.accept (1 samples, 0.26%)</title><rect x="160.9" y="883.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.9" y="894.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.51%)</title><rect x="163.9" y="883.0" width="6.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="166.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.77%)</title><rect x="169.9" y="883.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.77%)</title><rect x="169.9" y="867.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/1889371209.accept (1 samples, 0.26%)</title><rect x="176.0" y="851.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (34 samples, 8.70%)</title><rect x="179.0" y="1027.0" width="102.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.0" y="1038.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (33 samples, 8.44%)</title><rect x="182.0" y="1011.0" width="99.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="185.0" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (33 samples, 8.44%)</title><rect x="182.0" y="995.0" width="99.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.0" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 8.44%)</title><rect x="182.0" y="979.0" width="99.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.0" y="990.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 8.44%)</title><rect x="182.0" y="963.0" width="99.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.0" y="974.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (33 samples, 8.44%)</title><rect x="182.0" y="947.0" width="99.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.0" y="958.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 3.58%)</title><rect x="182.0" y="931.0" width="42.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="185.0" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 1.53%)</title><rect x="182.0" y="915.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.53%)</title><rect x="182.0" y="899.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 1.53%)</title><rect x="182.0" y="883.0" width="18.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 1.53%)</title><rect x="182.0" y="867.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 1.53%)</title><rect x="182.0" y="851.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.05%)</title><rect x="200.1" y="915.0" width="24.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.1" y="926.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="200.1" y="899.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="203.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="200.1" y="883.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="203.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="200.1" y="867.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="203.1" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.26%)</title><rect x="200.1" y="851.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="203.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 1.79%)</title><rect x="203.1" y="899.0" width="21.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.1" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.77%)</title><rect x="203.1" y="883.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.77%)</title><rect x="203.1" y="867.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.02%)</title><rect x="212.2" y="883.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.02%)</title><rect x="212.2" y="867.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (2 samples, 0.51%)</title><rect x="212.2" y="851.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.51%)</title><rect x="218.2" y="851.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.26%)</title><rect x="221.3" y="835.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (17 samples, 4.35%)</title><rect x="224.3" y="931.0" width="51.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.3" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.51%)</title><rect x="224.3" y="915.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.51%)</title><rect x="224.3" y="899.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.26%)</title><rect x="230.3" y="915.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.26%)</title><rect x="230.3" y="899.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.26%)</title><rect x="230.3" y="883.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.26%)</title><rect x="230.3" y="867.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="230.3" y="851.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="233.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="230.3" y="835.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="233.3" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="230.3" y="819.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="233.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="230.3" y="803.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="233.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="230.3" y="787.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="233.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.26%)</title><rect x="230.3" y="771.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="233.3" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="230.3" y="755.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="233.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.51%)</title><rect x="233.3" y="915.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.51%)</title><rect x="233.3" y="899.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="236.3" y="883.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.26%)</title><rect x="236.3" y="867.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.26%)</title><rect x="236.3" y="851.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.3" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="236.3" y="835.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="239.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (12 samples, 3.07%)</title><rect x="239.4" y="915.0" width="36.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.4" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 3.07%)</title><rect x="239.4" y="899.0" width="36.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.4" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.26%)</title><rect x="239.4" y="883.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 2.81%)</title><rect x="242.4" y="883.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.4" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 2.81%)</title><rect x="242.4" y="867.0" width="33.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.4" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 2.81%)</title><rect x="242.4" y="851.0" width="33.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.4" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.77%)</title><rect x="245.4" y="835.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.26%)</title><rect x="248.4" y="819.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="251.4" y="819.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.77%)</title><rect x="254.5" y="835.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.51%)</title><rect x="257.5" y="819.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.51%)</title><rect x="257.5" y="803.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.51%)</title><rect x="257.5" y="787.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.51%)</title><rect x="257.5" y="771.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.51%)</title><rect x="263.5" y="835.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.51%)</title><rect x="263.5" y="819.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.51%)</title><rect x="263.5" y="803.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.51%)</title><rect x="263.5" y="787.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.5" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.51%)</title><rect x="263.5" y="771.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.26%)</title><rect x="269.5" y="835.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="269.5" y="819.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="269.5" y="803.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.26%)</title><rect x="272.6" y="835.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.51%)</title><rect x="275.6" y="931.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.51%)</title><rect x="275.6" y="915.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.51%)</title><rect x="275.6" y="899.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.51%)</title><rect x="275.6" y="883.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.51%)</title><rect x="275.6" y="867.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (153 samples, 39.13%)</title><rect x="281.6" y="1027.0" width="461.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.6" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (17 samples, 4.35%)</title><rect x="314.8" y="1011.0" width="51.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.8" y="1022.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 4.09%)</title><rect x="317.8" y="995.0" width="48.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.8" y="1006.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 4.09%)</title><rect x="317.8" y="979.0" width="48.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="320.8" y="990.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.26%)</title><rect x="320.8" y="963.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.26%)</title><rect x="320.8" y="947.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.26%)</title><rect x="320.8" y="931.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.26%)</title><rect x="320.8" y="915.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 3.58%)</title><rect x="323.9" y="963.0" width="42.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.9" y="974.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.02%)</title><rect x="354.0" y="947.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.26%)</title><rect x="360.1" y="931.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.1" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.26%)</title><rect x="360.1" y="915.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.26%)</title><rect x="363.1" y="931.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.51%)</title><rect x="366.1" y="1011.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.51%)</title><rect x="366.1" y="995.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (22 samples, 5.63%)</title><rect x="372.1" y="1011.0" width="66.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.1" y="1022.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (21 samples, 5.37%)</title><rect x="372.1" y="995.0" width="63.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.1" y="1006.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 1.79%)</title><rect x="372.1" y="979.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.1" y="990.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.79%)</title><rect x="372.1" y="963.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.1" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.79%)</title><rect x="372.1" y="947.0" width="21.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.1" y="958.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.51%)</title><rect x="378.2" y="931.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.2" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.51%)</title><rect x="378.2" y="915.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.2" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.51%)</title><rect x="378.2" y="899.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.51%)</title><rect x="378.2" y="883.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="381.2" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.26%)</title><rect x="381.2" y="867.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="381.2" y="851.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="384.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.26%)</title><rect x="381.2" y="835.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="384.2" y="931.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.2" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.51%)</title><rect x="387.2" y="931.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="390.2" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 3.58%)</title><rect x="393.3" y="979.0" width="42.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.3" y="990.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.07%)</title><rect x="396.3" y="963.0" width="36.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.3" y="974.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.77%)</title><rect x="399.3" y="947.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.77%)</title><rect x="399.3" y="931.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.77%)</title><rect x="399.3" y="915.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.77%)</title><rect x="399.3" y="899.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="408.4" y="947.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="408.4" y="931.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="408.4" y="915.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.26%)</title><rect x="408.4" y="899.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="408.4" y="883.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 1.79%)</title><rect x="411.4" y="947.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.4" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 1.79%)</title><rect x="411.4" y="931.0" width="21.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="414.4" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.28%)</title><rect x="417.4" y="915.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.26%)</title><rect x="417.4" y="899.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.02%)</title><rect x="420.4" y="899.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.26%)</title><rect x="432.5" y="963.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.26%)</title><rect x="435.5" y="995.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.26%)</title><rect x="435.5" y="979.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="435.5" y="963.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="435.5" y="947.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (97 samples, 24.81%)</title><rect x="438.5" y="1011.0" width="292.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.5" y="1022.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (97 samples, 24.81%)</title><rect x="438.5" y="995.0" width="292.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.5" y="1006.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="441.6" y="979.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="444.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="441.6" y="963.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="444.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="441.6" y="947.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="444.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1433986946.process (75 samples, 19.18%)</title><rect x="444.6" y="979.0" width="226.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="447.6" y="990.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (75 samples, 19.18%)</title><rect x="444.6" y="963.0" width="226.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.6" y="974.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (75 samples, 19.18%)</title><rect x="444.6" y="947.0" width="226.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.6" y="958.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.26%)</title><rect x="453.6" y="931.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.6" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.26%)</title><rect x="453.6" y="915.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.26%)</title><rect x="453.6" y="899.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.26%)</title><rect x="453.6" y="883.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="456.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.26%)</title><rect x="453.6" y="867.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="456.6" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.26%)</title><rect x="453.6" y="851.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.6" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.26%)</title><rect x="453.6" y="835.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.6" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.26%)</title><rect x="453.6" y="819.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.26%)</title><rect x="453.6" y="803.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (1 samples, 0.26%)</title><rect x="453.6" y="787.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (1 samples, 0.26%)</title><rect x="453.6" y="771.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.26%)</title><rect x="453.6" y="755.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.26%)</title><rect x="453.6" y="739.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.77%)</title><rect x="456.6" y="931.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.6" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.77%)</title><rect x="456.6" y="915.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.77%)</title><rect x="456.6" y="899.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.77%)</title><rect x="456.6" y="883.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.51%)</title><rect x="459.7" y="867.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (68 samples, 17.39%)</title><rect x="465.7" y="931.0" width="205.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.7" y="942.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (67 samples, 17.14%)</title><rect x="468.7" y="915.0" width="202.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.7" y="926.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (59 samples, 15.09%)</title><rect x="489.8" y="899.0" width="178.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="492.8" y="910.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.28%)</title><rect x="501.9" y="883.0" width="15.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="504.9" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="517.0" y="883.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="520.0" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="520.0" y="883.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="523.0" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.51%)</title><rect x="523.0" y="883.0" width="6.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="526.0" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="529.1" y="883.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="532.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="529.1" y="867.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="532.1" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.26%)</title><rect x="532.1" y="883.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="535.1" y="894.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (44 samples, 11.25%)</title><rect x="535.1" y="883.0" width="132.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.1" y="894.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="571.3" y="867.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="574.3" y="878.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="574.3" y="867.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="577.3" y="878.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.26%)</title><rect x="577.4" y="867.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="580.4" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="577.4" y="851.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="580.4" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.26%)</title><rect x="577.4" y="835.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="580.4" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 1.79%)</title><rect x="580.4" y="867.0" width="21.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="583.4" y="878.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.07%)</title><rect x="601.5" y="867.0" width="36.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="604.5" y="878.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.77%)</title><rect x="637.7" y="867.0" width="9.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="640.7" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.51%)</title><rect x="646.8" y="867.0" width="6.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="649.8" y="878.0"></text>
</g>
<g>
<title>_init (2 samples, 0.51%)</title><rect x="652.8" y="867.0" width="6.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="655.8" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.51%)</title><rect x="658.8" y="867.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="661.8" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="664.9" y="867.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.9" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.26%)</title><rect x="667.9" y="899.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 1.28%)</title><rect x="670.9" y="979.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="673.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 1.28%)</title><rect x="670.9" y="963.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="673.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 1.28%)</title><rect x="670.9" y="947.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.26%)</title><rect x="686.0" y="979.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="689.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.51%)</title><rect x="689.0" y="979.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.51%)</title><rect x="689.0" y="963.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="692.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.77%)</title><rect x="695.1" y="979.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.1" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.26%)</title><rect x="698.1" y="963.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.1" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="698.1" y="947.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="701.1" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="698.1" y="931.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="701.1" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="698.1" y="915.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.1" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="698.1" y="899.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="701.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.26%)</title><rect x="701.1" y="963.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.77%)</title><rect x="704.1" y="979.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="707.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.53%)</title><rect x="713.2" y="979.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="716.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.53%)</title><rect x="713.2" y="963.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.53%)</title><rect x="713.2" y="947.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="716.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 1.53%)</title><rect x="713.2" y="931.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="716.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.28%)</title><rect x="713.2" y="915.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.28%)</title><rect x="713.2" y="899.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$300/528955241.accept (2 samples, 0.51%)</title><rect x="713.2" y="883.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.2" y="894.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.77%)</title><rect x="719.2" y="883.0" width="9.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="722.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.26%)</title><rect x="728.3" y="915.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.02%)</title><rect x="731.3" y="1011.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.02%)</title><rect x="731.3" y="995.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="734.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.02%)</title><rect x="731.3" y="979.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.51%)</title><rect x="731.3" y="963.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.51%)</title><rect x="731.3" y="947.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="734.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.51%)</title><rect x="731.3" y="931.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.3" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="734.3" y="915.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="737.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.51%)</title><rect x="737.3" y="963.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="740.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$303/2141767718.accept (2 samples, 0.51%)</title><rect x="737.3" y="947.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="740.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (2 samples, 0.51%)</title><rect x="737.3" y="931.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.51%)</title><rect x="737.3" y="915.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.3" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.51%)</title><rect x="737.3" y="899.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.3" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.51%)</title><rect x="737.3" y="883.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.3" y="894.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.26%)</title><rect x="740.3" y="867.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="743.3" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.77%)</title><rect x="743.4" y="1027.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="746.4" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.77%)</title><rect x="743.4" y="1011.0" width="9.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="746.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.26%)</title><rect x="752.4" y="1091.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="755.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="752.4" y="1075.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="752.4" y="1059.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="752.4" y="1043.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="755.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 2.56%)</title><rect x="755.4" y="1091.0" width="30.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.4" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.30%)</title><rect x="758.4" y="1075.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="761.4" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.51%)</title><rect x="776.5" y="1059.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.51%)</title><rect x="776.5" y="1043.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="782.6" y="1059.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="782.6" y="1043.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="782.6" y="1027.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="785.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="782.6" y="1011.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.51%)</title><rect x="785.6" y="1139.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.26%)</title><rect x="785.6" y="1123.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.6" y="1134.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.26%)</title><rect x="785.6" y="1107.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="788.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="788.6" y="1123.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="788.6" y="1107.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.26%)</title><rect x="788.6" y="1091.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.26%)</title><rect x="788.6" y="1075.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.26%)</title><rect x="788.6" y="1059.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.6" y="1070.0"></text>
</g>
<g>
<title>start_thread (132 samples, 33.76%)</title><rect x="791.6" y="1139.0" width="398.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="794.6" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (132 samples, 33.76%)</title><rect x="791.6" y="1123.0" width="398.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="794.6" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.32%)</title><rect x="791.6" y="1107.0" width="39.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.6" y="1118.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 3.32%)</title><rect x="791.6" y="1091.0" width="39.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.6" y="1102.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 3.32%)</title><rect x="791.6" y="1075.0" width="39.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="794.6" y="1086.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 2.81%)</title><rect x="794.7" y="1059.0" width="33.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="797.7" y="1070.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.77%)</title><rect x="818.8" y="1043.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="821.8" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.26%)</title><rect x="824.8" y="1027.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.8" y="1038.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="824.8" y="1011.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.8" y="1022.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.26%)</title><rect x="827.9" y="1059.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="830.9" y="1070.0"></text>
</g>
<g>
<title>JavaThread::run() (119 samples, 30.43%)</title><rect x="830.9" y="1107.0" width="359.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="833.9" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (119 samples, 30.43%)</title><rect x="830.9" y="1091.0" width="359.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.9" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (119 samples, 30.43%)</title><rect x="830.9" y="1075.0" width="359.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.9" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (119 samples, 30.43%)</title><rect x="830.9" y="1059.0" width="359.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.9" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (116 samples, 29.67%)</title><rect x="830.9" y="1043.0" width="350.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.9" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (116 samples, 29.67%)</title><rect x="830.9" y="1027.0" width="350.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.9" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 10.23%)</title><rect x="830.9" y="1011.0" width="120.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.9" y="1022.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.77%)</title><rect x="830.9" y="995.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.9" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.77%)</title><rect x="830.9" y="979.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.9" y="990.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (2 samples, 0.51%)</title><rect x="830.9" y="963.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.9" y="974.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (2 samples, 0.51%)</title><rect x="830.9" y="947.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.9" y="958.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (2 samples, 0.51%)</title><rect x="830.9" y="931.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.9" y="942.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (2 samples, 0.51%)</title><rect x="830.9" y="915.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.9" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.26%)</title><rect x="836.9" y="963.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.9" y="974.0"></text>
</g>
<g>
<title>jmpConNode::short_branch_version(Compile*) (1 samples, 0.26%)</title><rect x="836.9" y="947.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="839.9" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.77%)</title><rect x="839.9" y="995.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.9" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.51%)</title><rect x="839.9" y="979.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.9" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.26%)</title><rect x="839.9" y="963.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="842.9" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="839.9" y="947.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="842.9" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="842.9" y="963.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.9" y="974.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.26%)</title><rect x="846.0" y="979.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.0" y="990.0"></text>
</g>
<g>
<title>Relocation::spec_simple(relocInfo::relocType) (1 samples, 0.26%)</title><rect x="846.0" y="963.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="849.0" y="974.0"></text>
</g>
<g>
<title>MachNode::is_TrapBasedCheckNode() const (1 samples, 0.26%)</title><rect x="849.0" y="995.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="852.0" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.02%)</title><rect x="852.0" y="995.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.0" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.02%)</title><rect x="852.0" y="979.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="855.0" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.51%)</title><rect x="852.0" y="963.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="855.0" y="974.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.26%)</title><rect x="858.0" y="963.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.0" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.26%)</title><rect x="861.0" y="963.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="864.0" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="861.0" y="947.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="864.0" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="861.0" y="931.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.0" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="861.0" y="915.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="864.0" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.26%)</title><rect x="861.0" y="899.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="864.0" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.26%)</title><rect x="861.0" y="883.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.0" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="861.0" y="867.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.0" y="878.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.26%)</title><rect x="861.0" y="851.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="864.0" y="862.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.26%)</title><rect x="861.0" y="835.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="864.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.51%)</title><rect x="864.1" y="995.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.51%)</title><rect x="864.1" y="979.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.51%)</title><rect x="864.1" y="963.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="867.1" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.51%)</title><rect x="864.1" y="947.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="867.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 6.91%)</title><rect x="870.1" y="995.0" width="81.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="873.1" y="1006.0">PhaseChai..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.26%)</title><rect x="870.1" y="979.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.1" y="990.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.26%)</title><rect x="873.1" y="979.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.1" y="990.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.26%)</title><rect x="876.1" y="979.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="879.1" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.26%)</title><rect x="879.2" y="979.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.77%)</title><rect x="882.2" y="979.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="885.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.51%)</title><rect x="885.2" y="963.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.51%)</title><rect x="885.2" y="947.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.77%)</title><rect x="891.2" y="979.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.2" y="990.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.26%)</title><rect x="894.2" y="963.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="897.2" y="974.0"></text>
</g>
<g>
<title>loadConLNode::rule() const (1 samples, 0.26%)</title><rect x="897.3" y="963.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.02%)</title><rect x="900.3" y="979.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="906.3" y="963.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.26%)</title><rect x="909.3" y="963.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="912.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="909.3" y="947.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="912.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.26%)</title><rect x="912.4" y="979.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.26%)</title><rect x="912.4" y="963.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.26%)</title><rect x="915.4" y="979.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.4" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="915.4" y="963.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="918.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.26%)</title><rect x="918.4" y="979.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.4" y="990.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.26%)</title><rect x="918.4" y="963.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.4" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.77%)</title><rect x="921.4" y="979.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="924.4" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.77%)</title><rect x="921.4" y="963.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="924.4" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.77%)</title><rect x="921.4" y="947.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="924.4" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.77%)</title><rect x="921.4" y="931.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.4" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.26%)</title><rect x="930.5" y="979.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="930.5" y="963.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.5" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.28%)</title><rect x="933.5" y="979.0" width="15.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="936.5" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.77%)</title><rect x="939.5" y="963.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.51%)</title><rect x="942.5" y="947.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="945.5" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="948.6" y="979.0" width="3.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="951.6" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (70 samples, 17.90%)</title><rect x="951.6" y="1011.0" width="211.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.6" y="1022.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.26%)</title><rect x="951.6" y="995.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.6" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.26%)</title><rect x="951.6" y="979.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.6" y="990.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.26%)</title><rect x="951.6" y="963.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 1.28%)</title><rect x="954.6" y="995.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 1.28%)</title><rect x="954.6" y="979.0" width="15.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="957.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 1.02%)</title><rect x="957.6" y="963.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 1.02%)</title><rect x="957.6" y="947.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="931.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="915.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="899.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="883.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="867.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="851.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="835.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="819.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="803.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="787.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="771.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="755.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="739.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="723.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="707.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="691.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="675.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="659.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="643.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="627.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="611.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="595.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="579.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="563.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="547.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="531.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="515.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="499.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="483.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="467.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="960.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="451.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="435.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="419.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="403.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="387.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="371.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="355.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="339.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="323.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="307.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="291.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="275.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="259.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="243.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="227.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="211.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="195.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="179.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="163.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="147.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="131.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="115.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.6" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="99.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="83.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="67.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="51.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.6" y="62.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.26%)</title><rect x="957.6" y="35.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.77%)</title><rect x="960.6" y="931.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="960.6" y="915.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.6" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="960.6" y="899.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.51%)</title><rect x="963.7" y="915.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="899.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="883.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="867.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="966.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="851.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="835.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="819.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="803.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="787.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="771.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="755.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="739.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="966.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="723.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="707.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="691.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="675.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="659.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="643.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="966.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="627.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="611.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="595.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="579.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="563.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="547.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="963.7" y="531.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.7" y="542.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="963.7" y="515.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="966.7" y="899.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="966.7" y="883.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.7" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="966.7" y="867.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.7" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.51%)</title><rect x="969.7" y="995.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.7" y="1006.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="972.7" y="979.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.7" y="990.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.26%)</title><rect x="972.7" y="963.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.7" y="974.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.26%)</title><rect x="972.7" y="947.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.7" y="958.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.26%)</title><rect x="972.7" y="931.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.7" y="942.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.26%)</title><rect x="972.7" y="915.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (50 samples, 12.79%)</title><rect x="975.7" y="995.0" width="150.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.7" y="1006.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="975.7" y="979.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.7" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="975.7" y="963.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.7" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="975.7" y="947.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.7" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="975.7" y="931.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="978.7" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="975.7" y="915.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.7" y="926.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.26%)</title><rect x="975.7" y="899.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="978.7" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_invariants(PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="978.7" y="979.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.7" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_add_sub(Node*, PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="978.7" y="963.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.26%)</title><rect x="981.8" y="979.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.51%)</title><rect x="984.8" y="979.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (39 samples, 9.97%)</title><rect x="990.8" y="979.0" width="117.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="993.8" y="990.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (38 samples, 9.72%)</title><rect x="993.8" y="963.0" width="114.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.8" y="974.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.77%)</title><rect x="996.9" y="947.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="999.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (34 samples, 8.70%)</title><rect x="1005.9" y="947.0" width="102.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.9" y="958.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.02%)</title><rect x="1093.4" y="931.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1105.5" y="931.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.26%)</title><rect x="1105.5" y="915.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.77%)</title><rect x="1108.5" y="979.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.26%)</title><rect x="1111.5" y="963.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.5" y="974.0"></text>
</g>
<g>
<title>RethrowNode::Opcode() const (1 samples, 0.26%)</title><rect x="1114.6" y="963.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.26%)</title><rect x="1117.6" y="979.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.26%)</title><rect x="1117.6" y="963.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.51%)</title><rect x="1120.6" y="979.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.51%)</title><rect x="1120.6" y="963.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1120.6" y="947.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.6" y="958.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.26%)</title><rect x="1120.6" y="931.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.6" y="942.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1123.6" y="947.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.26%)</title><rect x="1123.6" y="931.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="915.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="899.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="883.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="867.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="851.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="835.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="819.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="803.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.6" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="787.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.6" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="771.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.6" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="755.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.6" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="739.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="723.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="707.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.6" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="691.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.6" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="675.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.6" y="686.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1123.6" y="659.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.6" y="670.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1123.6" y="643.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.6" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.51%)</title><rect x="1126.6" y="995.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.51%)</title><rect x="1126.6" y="979.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.26%)</title><rect x="1129.6" y="963.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.05%)</title><rect x="1132.7" y="995.0" width="24.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.7" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 2.05%)</title><rect x="1132.7" y="979.0" width="24.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.7" y="990.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1132.7" y="963.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.7" y="974.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.26%)</title><rect x="1132.7" y="947.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.7" y="958.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.51%)</title><rect x="1135.7" y="963.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.7" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1135.7" y="947.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="958.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1138.7" y="947.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.7" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1138.7" y="931.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1138.7" y="915.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1141.7" y="963.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1141.7" y="947.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.7" y="958.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.26%)</title><rect x="1141.7" y="931.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.7" y="942.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.51%)</title><rect x="1144.7" y="963.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.7" y="974.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.26%)</title><rect x="1144.7" y="947.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.7" y="958.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.26%)</title><rect x="1144.7" y="931.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.7" y="942.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.26%)</title><rect x="1144.7" y="915.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.7" y="926.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.26%)</title><rect x="1147.7" y="947.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.7" y="958.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.26%)</title><rect x="1147.7" y="931.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.7" y="942.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.26%)</title><rect x="1150.8" y="963.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.8" y="974.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1153.8" y="963.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.26%)</title><rect x="1156.8" y="995.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.26%)</title><rect x="1156.8" y="979.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.26%)</title><rect x="1156.8" y="963.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1156.8" y="947.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.26%)</title><rect x="1156.8" y="931.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="942.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.26%)</title><rect x="1156.8" y="915.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.8" y="926.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="1159.8" y="995.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1162.8" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.53%)</title><rect x="1162.8" y="1011.0" width="18.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.53%)</title><rect x="1162.8" y="995.0" width="18.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.53%)</title><rect x="1162.8" y="979.0" width="18.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.53%)</title><rect x="1162.8" y="963.0" width="18.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.53%)</title><rect x="1162.8" y="947.0" width="18.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.53%)</title><rect x="1162.8" y="931.0" width="18.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.28%)</title><rect x="1162.8" y="915.0" width="15.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.28%)</title><rect x="1162.8" y="899.0" width="15.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.28%)</title><rect x="1162.8" y="883.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.28%)</title><rect x="1162.8" y="867.0" width="15.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.28%)</title><rect x="1162.8" y="851.0" width="15.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.28%)</title><rect x="1162.8" y="835.0" width="15.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1162.8" y="819.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1162.8" y="803.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1162.8" y="787.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1162.8" y="771.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1162.8" y="755.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1162.8" y="739.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1162.8" y="723.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1162.8" y="707.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1162.8" y="691.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1162.8" y="675.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1162.8" y="659.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1162.8" y="643.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.8" y="654.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1162.8" y="627.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.8" y="611.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.02%)</title><rect x="1165.9" y="819.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.26%)</title><rect x="1165.9" y="803.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.9" y="814.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.26%)</title><rect x="1165.9" y="787.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.9" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1165.9" y="771.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="782.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1165.9" y="755.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.77%)</title><rect x="1168.9" y="803.0" width="9.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.77%)</title><rect x="1168.9" y="787.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.77%)</title><rect x="1168.9" y="771.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.77%)</title><rect x="1168.9" y="755.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.77%)</title><rect x="1168.9" y="739.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.77%)</title><rect x="1168.9" y="723.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.77%)</title><rect x="1168.9" y="707.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.77%)</title><rect x="1168.9" y="691.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.77%)</title><rect x="1168.9" y="675.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.77%)</title><rect x="1168.9" y="659.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.77%)</title><rect x="1168.9" y="643.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.77%)</title><rect x="1168.9" y="627.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1168.9" y="611.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1168.9" y="595.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1168.9" y="579.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1168.9" y="563.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1168.9" y="547.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1168.9" y="531.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1168.9" y="515.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1168.9" y="499.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1168.9" y="483.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1168.9" y="467.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1168.9" y="451.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1168.9" y="435.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>ciConstantPoolCache::insert(int, void*) (1 samples, 0.26%)</title><rect x="1168.9" y="419.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1171.9" y="611.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1171.9" y="595.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1171.9" y="579.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1171.9" y="563.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1171.9" y="547.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1171.9" y="531.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1171.9" y="515.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1171.9" y="499.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1171.9" y="483.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1171.9" y="467.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1171.9" y="451.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1171.9" y="435.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1171.9" y="419.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1171.9" y="403.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1171.9" y="387.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1171.9" y="371.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1171.9" y="355.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1171.9" y="339.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1171.9" y="323.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.9" y="307.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.9" y="291.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.9" y="275.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.9" y="259.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.9" y="243.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.26%)</title><rect x="1171.9" y="227.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.26%)</title><rect x="1171.9" y="211.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.26%)</title><rect x="1171.9" y="195.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1171.9" y="179.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.26%)</title><rect x="1171.9" y="163.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="174.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.26%)</title><rect x="1171.9" y="147.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1174.9" y="307.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1174.9" y="291.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1174.9" y="275.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1174.9" y="259.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1174.9" y="243.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1174.9" y="227.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1174.9" y="211.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1174.9" y="195.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.26%)</title><rect x="1174.9" y="179.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="190.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.26%)</title><rect x="1174.9" y="163.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1177.9" y="915.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1177.9" y="899.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1177.9" y="883.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1177.9" y="867.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1177.9" y="851.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1177.9" y="835.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1177.9" y="819.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1177.9" y="803.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1177.9" y="787.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1177.9" y="771.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1177.9" y="755.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1177.9" y="739.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1177.9" y="723.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1177.9" y="707.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1177.9" y="691.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1177.9" y="675.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1177.9" y="659.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1177.9" y="643.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1177.9" y="627.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1177.9" y="611.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1177.9" y="595.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1177.9" y="579.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1177.9" y="563.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1177.9" y="547.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.26%)</title><rect x="1177.9" y="531.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.26%)</title><rect x="1177.9" y="515.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.26%)</title><rect x="1177.9" y="499.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.26%)</title><rect x="1177.9" y="483.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.26%)</title><rect x="1177.9" y="467.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.26%)</title><rect x="1177.9" y="451.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.77%)</title><rect x="1180.9" y="1043.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.77%)</title><rect x="1180.9" y="1027.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.77%)</title><rect x="1180.9" y="1011.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.51%)</title><rect x="1180.9" y="995.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.26%)</title><rect x="1180.9" y="979.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.26%)</title><rect x="1180.9" y="963.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::reg2mem(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.26%)</title><rect x="1180.9" y="947.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.26%)</title><rect x="1184.0" y="979.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="990.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.26%)</title><rect x="1184.0" y="963.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="974.0"></text>
</g>
<g>
<title>LinearScan::number_instructions() (1 samples, 0.26%)</title><rect x="1184.0" y="947.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="958.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.26%)</title><rect x="1187.0" y="995.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.0" y="1006.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.26%)</title><rect x="1187.0" y="979.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.0" y="990.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.26%)</title><rect x="1187.0" y="963.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="974.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.26%)</title><rect x="1187.0" y="947.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.26%)</title><rect x="1187.0" y="931.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="942.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.26%)</title><rect x="1187.0" y="915.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="926.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.26%)</title><rect x="1187.0" y="899.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="910.0"></text>
</g>
</g>
</svg>
