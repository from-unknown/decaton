<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (1,316 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (266 samples, 20.21%)</title><rect x="10.0" y="1315.0" width="238.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (266 samples, 20.21%)</title><rect x="10.0" y="1299.0" width="238.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (265 samples, 20.14%)</title><rect x="10.9" y="1283.0" width="237.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1294.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.15%)</title><rect x="11.8" y="1267.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.15%)</title><rect x="11.8" y="1251.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="1262.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="11.8" y="1235.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="11.8" y="1219.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="11.8" y="1203.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="12.7" y="1235.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="12.7" y="1219.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="12.7" y="1203.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="12.7" y="1187.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="12.7" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="12.7" y="1155.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="12.7" y="1139.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="12.7" y="1123.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.08%)</title><rect x="12.7" y="1107.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="13.6" y="1267.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="13.6" y="1251.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="13.6" y="1235.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="13.6" y="1219.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="13.6" y="1203.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="13.6" y="1187.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="13.6" y="1171.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="13.6" y="1155.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="13.6" y="1139.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.53%)</title><rect x="14.5" y="1267.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.53%)</title><rect x="14.5" y="1251.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.46%)</title><rect x="15.4" y="1235.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/989845867.accept (5 samples, 0.38%)</title><rect x="16.3" y="1219.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.38%)</title><rect x="16.3" y="1203.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.38%)</title><rect x="16.3" y="1187.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.38%)</title><rect x="16.3" y="1171.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (181 samples, 13.75%)</title><rect x="20.8" y="1267.0" width="162.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.8" y="1278.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1464761203.accept (168 samples, 12.77%)</title><rect x="22.6" y="1251.0" width="150.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.6" y="1262.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (168 samples, 12.77%)</title><rect x="22.6" y="1235.0" width="150.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.6" y="1246.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (150 samples, 11.40%)</title><rect x="22.6" y="1219.0" width="134.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.6" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (150 samples, 11.40%)</title><rect x="22.6" y="1203.0" width="134.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="1214.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (150 samples, 11.40%)</title><rect x="22.6" y="1187.0" width="134.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.6" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (150 samples, 11.40%)</title><rect x="22.6" y="1171.0" width="134.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.6" y="1182.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (150 samples, 11.40%)</title><rect x="22.6" y="1155.0" width="134.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.6" y="1166.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (150 samples, 11.40%)</title><rect x="22.6" y="1139.0" width="134.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.6" y="1150.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 8.81%)</title><rect x="44.1" y="1123.0" width="104.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.1" y="1134.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 1.98%)</title><rect x="44.1" y="1107.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.1" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 1.98%)</title><rect x="44.1" y="1091.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.1" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 1.98%)</title><rect x="44.1" y="1075.0" width="23.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.1" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.76%)</title><rect x="67.4" y="1107.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.76%)</title><rect x="67.4" y="1091.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (8 samples, 0.61%)</title><rect x="68.3" y="1075.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.3" y="1086.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (7 samples, 0.53%)</title><rect x="69.2" y="1059.0" width="6.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="72.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="75.5" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 6.08%)</title><rect x="76.4" y="1107.0" width="71.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.4" y="1118.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 6.08%)</title><rect x="76.4" y="1091.0" width="71.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.4" y="1102.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (77 samples, 5.85%)</title><rect x="77.2" y="1075.0" width="69.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.2" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (77 samples, 5.85%)</title><rect x="77.2" y="1059.0" width="69.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.2" y="1070.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 5.78%)</title><rect x="78.1" y="1043.0" width="68.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.1" y="1054.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="78.1" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="81.1" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 5.17%)</title><rect x="79.0" y="1027.0" width="61.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="82.0" y="1038.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.30%)</title><rect x="80.8" y="1011.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="83.8" y="1022.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="84.4" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="85.3" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="88.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 3.50%)</title><rect x="86.2" y="1011.0" width="41.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="89.2" y="1022.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.15%)</title><rect x="127.5" y="1011.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="130.5" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.91%)</title><rect x="129.3" y="1011.0" width="10.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="132.3" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.23%)</title><rect x="140.0" y="1027.0" width="2.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="143.0" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="142.7" y="1027.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="145.7" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.15%)</title><rect x="144.5" y="1027.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="147.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="146.3" y="1075.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.46%)</title><rect x="148.1" y="1123.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.46%)</title><rect x="148.1" y="1107.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.46%)</title><rect x="148.1" y="1091.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.30%)</title><rect x="153.5" y="1123.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.30%)</title><rect x="153.5" y="1107.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.30%)</title><rect x="153.5" y="1091.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.23%)</title><rect x="153.5" y="1075.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="156.2" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (13 samples, 0.99%)</title><rect x="157.1" y="1219.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 0.99%)</title><rect x="157.1" y="1203.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="160.1" y="1214.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.08%)</title><rect x="165.1" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="168.1" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="166.0" y="1187.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="169.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.15%)</title><rect x="166.9" y="1187.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.15%)</title><rect x="166.9" y="1171.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.15%)</title><rect x="166.9" y="1155.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.15%)</title><rect x="166.9" y="1139.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.15%)</title><rect x="166.9" y="1123.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.15%)</title><rect x="168.7" y="1219.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.15%)</title><rect x="168.7" y="1203.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.7" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="168.7" y="1187.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.23%)</title><rect x="170.5" y="1219.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.23%)</title><rect x="170.5" y="1203.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.23%)</title><rect x="170.5" y="1187.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.23%)</title><rect x="170.5" y="1171.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.23%)</title><rect x="170.5" y="1155.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.5" y="1166.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="173.2" y="1251.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="176.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="175.0" y="1251.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="175.0" y="1235.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="175.0" y="1219.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="175.9" y="1251.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="178.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.08%)</title><rect x="175.9" y="1235.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.53%)</title><rect x="176.8" y="1251.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.53%)</title><rect x="176.8" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.53%)</title><rect x="176.8" y="1219.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.53%)</title><rect x="176.8" y="1203.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 5.55%)</title><rect x="183.1" y="1267.0" width="65.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.1" y="1278.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 5.55%)</title><rect x="183.1" y="1251.0" width="65.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.1" y="1262.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 2.81%)</title><rect x="183.1" y="1235.0" width="33.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.1" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 2.81%)</title><rect x="183.1" y="1219.0" width="33.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.1" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 2.74%)</title><rect x="184.0" y="1203.0" width="32.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.0" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 2.58%)</title><rect x="184.0" y="1187.0" width="30.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.0" y="1198.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 2.58%)</title><rect x="184.0" y="1171.0" width="30.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.0" y="1182.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.14%)</title><rect x="185.7" y="1155.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (6 samples, 0.46%)</title><rect x="185.7" y="1139.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.68%)</title><rect x="191.1" y="1139.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.68%)</title><rect x="191.1" y="1123.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.68%)</title><rect x="191.1" y="1107.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.68%)</title><rect x="191.1" y="1091.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.68%)</title><rect x="191.1" y="1075.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.68%)</title><rect x="191.1" y="1059.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.68%)</title><rect x="191.1" y="1043.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.29%)</title><rect x="199.2" y="1155.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="199.2" y="1139.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (16 samples, 1.22%)</title><rect x="200.1" y="1139.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.61%)</title><rect x="200.1" y="1123.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.61%)</title><rect x="200.1" y="1107.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="206.4" y="1091.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="209.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.61%)</title><rect x="207.3" y="1123.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.3" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.61%)</title><rect x="207.3" y="1107.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.3" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="213.5" y="1091.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="216.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="214.4" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="214.4" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="214.4" y="1155.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="214.4" y="1139.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="215.3" y="1187.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (19 samples, 1.44%)</title><rect x="216.2" y="1235.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (16 samples, 1.22%)</title><rect x="216.2" y="1219.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (14 samples, 1.06%)</title><rect x="216.2" y="1203.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.23%)</title><rect x="218.9" y="1187.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/129780753.accept (3 samples, 0.23%)</title><rect x="218.9" y="1171.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.23%)</title><rect x="218.9" y="1155.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="218.9" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="218.9" y="1123.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="218.9" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="218.9" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="218.9" y="1075.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.15%)</title><rect x="219.8" y="1139.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="220.7" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="220.7" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.08%)</title><rect x="220.7" y="1091.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.15%)</title><rect x="221.6" y="1187.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.15%)</title><rect x="221.6" y="1171.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="222.5" y="1155.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="222.5" y="1139.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="222.5" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="223.4" y="1187.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="223.4" y="1171.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="223.4" y="1155.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="223.4" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="223.4" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.38%)</title><rect x="224.3" y="1187.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.38%)</title><rect x="224.3" y="1171.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.30%)</title><rect x="225.2" y="1155.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.30%)</title><rect x="225.2" y="1139.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.30%)</title><rect x="225.2" y="1123.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.23%)</title><rect x="226.1" y="1107.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="226.1" y="1091.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="226.1" y="1075.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.1" y="1086.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="226.1" y="1059.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="226.1" y="1043.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="226.1" y="1027.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="226.1" y="1011.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/661197790.test (1 samples, 0.08%)</title><rect x="226.1" y="995.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="227.0" y="1075.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.0" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="227.0" y="1059.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="230.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="227.9" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="227.9" y="1075.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="227.9" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="227.9" y="1043.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.15%)</title><rect x="228.8" y="1203.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.15%)</title><rect x="228.8" y="1187.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="228.8" y="1171.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="229.7" y="1155.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="229.7" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="229.7" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="229.7" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="229.7" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="229.7" y="1075.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="229.7" y="1059.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="229.7" y="1043.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$241/819796203.apply (1 samples, 0.08%)</title><rect x="229.7" y="1027.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 0.23%)</title><rect x="230.6" y="1219.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="230.6" y="1203.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="230.6" y="1187.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="230.6" y="1171.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="230.6" y="1155.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="230.6" y="1139.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="230.6" y="1123.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="230.6" y="1107.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.08%)</title><rect x="231.5" y="1203.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.08%)</title><rect x="231.5" y="1187.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="232.4" y="1203.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.08%)</title><rect x="232.4" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.4" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.08%)</title><rect x="232.4" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="235.4" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="232.4" y="1155.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="235.4" y="1166.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.08%)</title><rect x="232.4" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="235.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (3 samples, 0.23%)</title><rect x="233.3" y="1235.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.23%)</title><rect x="233.3" y="1219.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.23%)</title><rect x="233.3" y="1203.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.23%)</title><rect x="233.3" y="1187.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.23%)</title><rect x="233.3" y="1171.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (2 samples, 0.15%)</title><rect x="234.2" y="1155.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.08%)</title><rect x="236.0" y="1235.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.46%)</title><rect x="236.9" y="1235.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.30%)</title><rect x="236.9" y="1219.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.30%)</title><rect x="236.9" y="1203.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.23%)</title><rect x="236.9" y="1187.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="236.9" y="1171.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="236.9" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="236.9" y="1139.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="236.9" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="236.9" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.9" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="236.9" y="1091.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="236.9" y="1075.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="236.9" y="1059.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="236.9" y="1043.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.08%)</title><rect x="236.9" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.9" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.08%)</title><rect x="236.9" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.9" y="1022.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory2 (1 samples, 0.08%)</title><rect x="236.9" y="995.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="239.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.15%)</title><rect x="237.8" y="1171.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.15%)</title><rect x="237.8" y="1155.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.8" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="237.8" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="240.8" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="237.8" y="1123.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="240.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="238.6" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="238.6" y="1123.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="238.6" y="1107.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="238.6" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.6" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="238.6" y="1075.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="241.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="239.5" y="1187.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.15%)</title><rect x="240.4" y="1219.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.15%)</title><rect x="240.4" y="1203.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.15%)</title><rect x="240.4" y="1187.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="241.3" y="1171.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="241.3" y="1155.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="241.3" y="1139.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="241.3" y="1123.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.08%)</title><rect x="241.3" y="1107.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.08%)</title><rect x="241.3" y="1091.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.08%)</title><rect x="241.3" y="1075.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.46%)</title><rect x="242.2" y="1235.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.46%)</title><rect x="242.2" y="1219.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="242.2" y="1203.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/157073659.accept (2 samples, 0.15%)</title><rect x="242.2" y="1187.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.15%)</title><rect x="242.2" y="1171.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.15%)</title><rect x="242.2" y="1155.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.15%)</title><rect x="242.2" y="1139.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.15%)</title><rect x="242.2" y="1123.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="242.2" y="1107.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="242.2" y="1091.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.08%)</title><rect x="243.1" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.08%)</title><rect x="243.1" y="1091.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.15%)</title><rect x="244.0" y="1203.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.15%)</title><rect x="244.0" y="1187.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="244.0" y="1171.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="244.0" y="1155.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="244.0" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="244.0" y="1123.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="244.0" y="1107.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="244.0" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="244.0" y="1075.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="244.0" y="1059.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="244.0" y="1043.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$185/1465733289.get (1 samples, 0.08%)</title><rect x="244.0" y="1027.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="244.9" y="1171.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.9" y="1182.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="244.9" y="1155.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="244.9" y="1139.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="244.9" y="1123.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="245.8" y="1203.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="245.8" y="1187.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="245.8" y="1171.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="245.8" y="1155.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="245.8" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="245.8" y="1123.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="245.8" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="246.7" y="1171.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="247.6" y="1235.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.6" y="1219.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.6" y="1203.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.6" y="1187.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.run (807 samples, 61.32%)</title><rect x="248.5" y="1315.0" width="723.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.5" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (807 samples, 61.32%)</title><rect x="248.5" y="1299.0" width="723.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.5" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="248.5" y="1283.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (806 samples, 61.25%)</title><rect x="249.4" y="1283.0" width="722.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.4" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="249.4" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="252.4" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="249.4" y="1251.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="252.4" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="249.4" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="252.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/399290885.run (564 samples, 42.86%)</title><rect x="250.3" y="1267.0" width="505.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.3" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (564 samples, 42.86%)</title><rect x="250.3" y="1251.0" width="505.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.3" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (564 samples, 42.86%)</title><rect x="250.3" y="1235.0" width="505.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.3" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processT..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="252.1" y="1219.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="255.1" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.84%)</title><rect x="253.9" y="1219.0" width="9.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="256.9" y="1230.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.53%)</title><rect x="257.5" y="1203.0" width="6.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="260.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (548 samples, 41.64%)</title><rect x="263.8" y="1219.0" width="491.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.8" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sche..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="272.7" y="1203.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="275.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (2 samples, 0.15%)</title><rect x="273.6" y="1203.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.08%)</title><rect x="275.4" y="1203.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.08%)</title><rect x="275.4" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="275.4" y="1171.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="275.4" y="1155.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (45 samples, 3.42%)</title><rect x="276.3" y="1203.0" width="40.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.3" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="287.1" y="1187.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.43%)</title><rect x="288.0" y="1187.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.0" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.43%)</title><rect x="288.0" y="1171.0" width="28.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.0" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 2.43%)</title><rect x="288.0" y="1155.0" width="28.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.0" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.15%)</title><rect x="288.0" y="1139.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.15%)</title><rect x="288.0" y="1123.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.15%)</title><rect x="288.0" y="1107.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.0" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="288.9" y="1091.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="291.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 2.28%)</title><rect x="289.8" y="1139.0" width="26.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.8" y="1150.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$305/1499518543.accept (30 samples, 2.28%)</title><rect x="289.8" y="1123.0" width="26.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.8" y="1134.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (30 samples, 2.28%)</title><rect x="289.8" y="1107.0" width="26.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.8" y="1118.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (30 samples, 2.28%)</title><rect x="289.8" y="1091.0" width="26.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.8" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (30 samples, 2.28%)</title><rect x="289.8" y="1075.0" width="26.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.8" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (29 samples, 2.20%)</title><rect x="290.7" y="1059.0" width="26.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.7" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.30%)</title><rect x="290.7" y="1043.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.30%)</title><rect x="290.7" y="1027.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/171813384.accept (1 samples, 0.08%)</title><rect x="291.6" y="1011.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/677905273.accept (1 samples, 0.08%)</title><rect x="292.4" y="1011.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.4" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="293.3" y="1011.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="296.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (25 samples, 1.90%)</title><rect x="294.2" y="1043.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.2" y="1054.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/171813384.accept (1 samples, 0.08%)</title><rect x="315.8" y="1027.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.08%)</title><rect x="315.8" y="1011.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="318.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (167 samples, 12.69%)</title><rect x="316.7" y="1203.0" width="149.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.7" y="1214.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (167 samples, 12.69%)</title><rect x="316.7" y="1187.0" width="149.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.7" y="1198.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (167 samples, 12.69%)</title><rect x="316.7" y="1171.0" width="149.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.7" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="316.7" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="319.7" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="316.7" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="316.7" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="319.7" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="316.7" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="319.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (166 samples, 12.61%)</title><rect x="317.6" y="1155.0" width="148.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.6" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (166 samples, 12.61%)</title><rect x="317.6" y="1139.0" width="148.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.6" y="1150.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (166 samples, 12.61%)</title><rect x="317.6" y="1123.0" width="148.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.6" y="1134.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 3.42%)</title><rect x="317.6" y="1107.0" width="40.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.6" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 0.99%)</title><rect x="317.6" y="1091.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 0.99%)</title><rect x="317.6" y="1075.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (8 samples, 0.61%)</title><rect x="317.6" y="1059.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.38%)</title><rect x="324.7" y="1059.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="324.7" y="1043.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.30%)</title><rect x="325.6" y="1043.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="328.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (32 samples, 2.43%)</title><rect x="329.2" y="1091.0" width="28.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.2" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (32 samples, 2.43%)</title><rect x="329.2" y="1075.0" width="28.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.2" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.15%)</title><rect x="329.2" y="1059.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="329.2" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="330.1" y="1043.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (12 samples, 0.91%)</title><rect x="331.0" y="1059.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.15%)</title><rect x="333.7" y="1043.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.7" y="1054.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.15%)</title><rect x="333.7" y="1027.0" width="1.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="336.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.15%)</title><rect x="335.5" y="1043.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (4 samples, 0.30%)</title><rect x="337.3" y="1043.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="340.9" y="1043.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.53%)</title><rect x="341.8" y="1059.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="344.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.46%)</title><rect x="342.7" y="1043.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="342.7" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.7" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="342.7" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="345.7" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="342.7" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="345.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="342.7" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="345.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.30%)</title><rect x="343.6" y="1027.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="347.1" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="347.1" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="347.1" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="350.1" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="347.1" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="350.1" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="347.1" y="963.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="350.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (11 samples, 0.84%)</title><rect x="348.0" y="1059.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.23%)</title><rect x="354.3" y="1043.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="357.0" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="360.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (111 samples, 8.43%)</title><rect x="357.9" y="1107.0" width="99.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.9" y="1118.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (9 samples, 0.68%)</title><rect x="357.9" y="1091.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (9 samples, 0.68%)</title><rect x="357.9" y="1075.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (9 samples, 0.68%)</title><rect x="357.9" y="1059.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (7 samples, 0.53%)</title><rect x="359.7" y="1043.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="362.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.68%)</title><rect x="366.0" y="1091.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.68%)</title><rect x="366.0" y="1075.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="369.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="373.1" y="1059.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.91%)</title><rect x="374.0" y="1091.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.76%)</title><rect x="374.0" y="1075.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="374.0" y="1059.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.38%)</title><rect x="374.9" y="1059.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.23%)</title><rect x="376.7" y="1043.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.15%)</title><rect x="379.4" y="1059.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.15%)</title><rect x="379.4" y="1043.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.15%)</title><rect x="379.4" y="1027.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.15%)</title><rect x="379.4" y="1011.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.15%)</title><rect x="381.2" y="1059.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.15%)</title><rect x="381.2" y="1043.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.15%)</title><rect x="381.2" y="1027.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.15%)</title><rect x="383.0" y="1075.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.76%)</title><rect x="384.8" y="1091.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.38%)</title><rect x="387.5" y="1075.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="390.2" y="1059.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.15%)</title><rect x="390.2" y="1043.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.15%)</title><rect x="390.2" y="1027.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="390.2" y="1011.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="393.2" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="390.2" y="995.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="393.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="390.2" y="979.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="393.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="390.2" y="963.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="393.2" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="391.1" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="394.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.15%)</title><rect x="392.0" y="1075.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (71 samples, 5.40%)</title><rect x="393.8" y="1091.0" width="63.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.8" y="1102.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (71 samples, 5.40%)</title><rect x="393.8" y="1075.0" width="63.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.8" y="1086.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.52%)</title><rect x="395.6" y="1059.0" width="17.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.30%)</title><rect x="396.5" y="1043.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.30%)</title><rect x="396.5" y="1027.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.30%)</title><rect x="396.5" y="1011.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 0.99%)</title><rect x="400.0" y="1043.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.38%)</title><rect x="400.0" y="1027.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (8 samples, 0.61%)</title><rect x="404.5" y="1027.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (8 samples, 0.61%)</title><rect x="404.5" y="1011.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.30%)</title><rect x="408.1" y="995.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.30%)</title><rect x="408.1" y="979.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="411.7" y="1043.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="411.7" y="1027.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="412.6" y="1043.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 3.72%)</title><rect x="413.5" y="1059.0" width="43.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.5" y="1070.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 3.65%)</title><rect x="414.4" y="1043.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.4" y="1054.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (47 samples, 3.57%)</title><rect x="415.3" y="1027.0" width="42.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.3" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.44%)</title><rect x="415.3" y="1011.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.30%)</title><rect x="417.1" y="995.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.53%)</title><rect x="420.7" y="995.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.53%)</title><rect x="420.7" y="979.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="423.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.53%)</title><rect x="420.7" y="963.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.30%)</title><rect x="423.4" y="947.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="426.9" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="426.9" y="979.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.30%)</title><rect x="427.8" y="995.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.30%)</title><rect x="427.8" y="979.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="429.6" y="963.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="431.4" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="434.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.91%)</title><rect x="432.3" y="1011.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.53%)</title><rect x="436.8" y="995.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.53%)</title><rect x="436.8" y="979.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.53%)</title><rect x="436.8" y="963.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.53%)</title><rect x="436.8" y="947.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="443.1" y="1011.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.53%)</title><rect x="444.0" y="1011.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.53%)</title><rect x="444.0" y="995.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.53%)</title><rect x="444.0" y="979.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.53%)</title><rect x="444.0" y="963.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="447.0" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.53%)</title><rect x="444.0" y="947.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="447.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.23%)</title><rect x="450.3" y="1011.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.23%)</title><rect x="450.3" y="995.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.23%)</title><rect x="450.3" y="979.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.38%)</title><rect x="452.9" y="1011.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="455.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="456.5" y="995.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="459.5" y="1006.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="456.5" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="459.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.76%)</title><rect x="457.4" y="1107.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.76%)</title><rect x="457.4" y="1091.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.76%)</title><rect x="457.4" y="1075.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.76%)</title><rect x="457.4" y="1059.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="460.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.30%)</title><rect x="461.9" y="1043.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="465.5" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="468.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (320 samples, 24.32%)</title><rect x="466.4" y="1203.0" width="286.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.4" y="1214.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.30%)</title><rect x="472.7" y="1187.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="475.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="473.6" y="1171.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="476.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (57 samples, 4.33%)</title><rect x="476.3" y="1187.0" width="51.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.3" y="1198.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="476.3" y="1171.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="479.3" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.26%)</title><rect x="477.2" y="1171.0" width="50.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.2" y="1182.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (53 samples, 4.03%)</title><rect x="479.8" y="1155.0" width="47.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.8" y="1166.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.53%)</title><rect x="480.7" y="1139.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.53%)</title><rect x="480.7" y="1123.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.53%)</title><rect x="480.7" y="1107.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.53%)</title><rect x="480.7" y="1091.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="487.0" y="1139.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="487.0" y="1123.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="490.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="487.0" y="1107.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="487.0" y="1091.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="487.0" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (44 samples, 3.34%)</title><rect x="487.9" y="1139.0" width="39.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.9" y="1150.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="511.2" y="1123.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="514.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (17 samples, 1.29%)</title><rect x="512.1" y="1123.0" width="15.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="515.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.38%)</title><rect x="513.0" y="1107.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="516.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.38%)</title><rect x="517.5" y="1107.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.30%)</title><rect x="518.4" y="1091.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.38%)</title><rect x="522.0" y="1107.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.0" y="1118.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="526.5" y="1107.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="529.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.46%)</title><rect x="527.4" y="1187.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="530.4" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.46%)</title><rect x="527.4" y="1171.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (169 samples, 12.84%)</title><rect x="532.8" y="1187.0" width="151.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.8" y="1198.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (156 samples, 11.85%)</title><rect x="532.8" y="1171.0" width="139.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.8" y="1182.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 4.26%)</title><rect x="541.7" y="1155.0" width="50.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.7" y="1166.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.28%)</title><rect x="553.4" y="1139.0" width="26.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="556.4" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.20%)</title><rect x="554.3" y="1123.0" width="26.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.3" y="1134.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 0.91%)</title><rect x="562.3" y="1107.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (12 samples, 0.91%)</title><rect x="562.3" y="1091.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="565.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 0.91%)</title><rect x="562.3" y="1075.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="562.3" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="565.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.84%)</title><rect x="563.2" y="1059.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="566.2" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.30%)</title><rect x="563.2" y="1043.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="566.2" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="563.2" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="566.2" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.23%)</title><rect x="564.1" y="1027.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="567.1" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.15%)</title><rect x="565.0" y="1011.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="568.0" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="565.0" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="568.0" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="565.0" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="568.0" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="565.9" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="568.9" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.38%)</title><rect x="566.8" y="1043.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="569.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="567.7" y="1027.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="570.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.15%)</title><rect x="567.7" y="1011.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="570.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.15%)</title><rect x="567.7" y="995.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="570.7" y="1006.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="568.6" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="571.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="568.6" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.6" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="568.6" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.6" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="569.5" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="572.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="570.4" y="1027.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="573.4" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="571.3" y="1043.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="574.3" y="1054.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="572.2" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="575.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.46%)</title><rect x="573.1" y="1107.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="576.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="578.5" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="581.5" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="579.4" y="1107.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="582.4" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (13 samples, 0.99%)</title><rect x="580.3" y="1139.0" width="11.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="583.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.84%)</title><rect x="591.9" y="1155.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.15%)</title><rect x="591.9" y="1139.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="591.9" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="594.9" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="591.9" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="594.9" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="591.9" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.9" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="591.9" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="594.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="592.8" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.68%)</title><rect x="593.7" y="1139.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.7" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="593.7" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="596.7" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="593.7" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="596.7" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="593.7" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="596.7" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="593.7" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="596.7" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="593.7" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.7" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="593.7" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="593.7" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="593.7" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="596.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.61%)</title><rect x="594.6" y="1123.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="597.6" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 6.00%)</title><rect x="601.8" y="1155.0" width="70.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.8" y="1166.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 5.70%)</title><rect x="605.4" y="1139.0" width="67.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.4" y="1150.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.38%)</title><rect x="605.4" y="1123.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="608.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.38%)</title><rect x="605.4" y="1107.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.38%)</title><rect x="605.4" y="1091.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.38%)</title><rect x="605.4" y="1075.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="609.9" y="1123.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="612.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="609.9" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="612.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="609.9" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="612.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="609.9" y="1075.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="612.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="609.9" y="1059.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="612.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (69 samples, 5.24%)</title><rect x="610.8" y="1123.0" width="61.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="613.8" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (62 samples, 4.71%)</title><rect x="617.0" y="1107.0" width="55.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.0" y="1118.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 2.43%)</title><rect x="643.9" y="1091.0" width="28.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.9" y="1102.0">ja..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="657.4" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="660.4" y="1086.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.08%)</title><rect x="657.4" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="660.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.23%)</title><rect x="658.3" y="1075.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 0.99%)</title><rect x="661.0" y="1075.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.23%)</title><rect x="669.9" y="1059.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="672.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.23%)</title><rect x="669.9" y="1043.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.23%)</title><rect x="669.9" y="1027.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="669.9" y="1011.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="672.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.15%)</title><rect x="670.8" y="995.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="673.8" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.15%)</title><rect x="670.8" y="979.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="673.8" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="670.8" y="963.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="673.8" y="974.0"></text>
</g>
<g>
<title>G1CollectorPolicy::is_young_list_full() (1 samples, 0.08%)</title><rect x="670.8" y="947.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="673.8" y="958.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="671.7" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (13 samples, 0.99%)</title><rect x="672.6" y="1171.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (13 samples, 0.99%)</title><rect x="672.6" y="1155.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.91%)</title><rect x="672.6" y="1139.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 0.91%)</title><rect x="672.6" y="1123.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.6" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.46%)</title><rect x="677.1" y="1107.0" width="5.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="680.1" y="1118.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="678.0" y="1091.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="681.0" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="682.5" y="1107.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="685.5" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="683.4" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="683.4" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="686.4" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="683.4" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="686.4" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="683.4" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.4" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="683.4" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="686.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="683.4" y="1059.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="686.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="683.4" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="686.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="683.4" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="686.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (66 samples, 5.02%)</title><rect x="684.3" y="1187.0" width="59.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.3" y="1198.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (65 samples, 4.94%)</title><rect x="685.2" y="1171.0" width="58.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="688.2" y="1182.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="688.8" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="691.8" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="688.8" y="1139.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="691.8" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="688.8" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="691.8" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="688.8" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="691.8" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="688.8" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="691.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (29 samples, 2.20%)</title><rect x="689.7" y="1155.0" width="26.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="692.7" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (29 samples, 2.20%)</title><rect x="689.7" y="1139.0" width="26.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.7" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 2.13%)</title><rect x="689.7" y="1123.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.7" y="1134.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.46%)</title><rect x="698.6" y="1107.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.6" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.46%)</title><rect x="698.6" y="1091.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="701.6" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.46%)</title><rect x="698.6" y="1075.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="701.6" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.46%)</title><rect x="698.6" y="1059.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (6 samples, 0.46%)</title><rect x="698.6" y="1043.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.46%)</title><rect x="704.0" y="1107.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="707.0" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.38%)</title><rect x="704.9" y="1091.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="705.8" y="1075.0" width="3.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="708.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.23%)</title><rect x="709.4" y="1107.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.23%)</title><rect x="712.1" y="1107.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.23%)</title><rect x="712.1" y="1091.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.23%)</title><rect x="712.1" y="1075.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="715.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="714.8" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="714.8" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="717.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="714.8" y="1091.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="714.8" y="1075.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="714.8" y="1059.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.08%)</title><rect x="715.7" y="1155.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.08%)</title><rect x="715.7" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="718.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.38%)</title><rect x="716.6" y="1155.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.6" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="716.6" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="719.6" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="716.6" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="719.6" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="716.6" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="716.6" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.6" y="1102.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="716.6" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (4 samples, 0.30%)</title><rect x="717.5" y="1139.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="720.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.30%)</title><rect x="717.5" y="1123.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (4 samples, 0.30%)</title><rect x="717.5" y="1107.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="720.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.30%)</title><rect x="721.0" y="1155.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="724.0" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="721.0" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="724.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="721.9" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="724.9" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="721.9" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="724.9" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="721.9" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="724.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="722.8" y="1139.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="724.6" y="1155.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="727.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="724.6" y="1139.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="727.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.53%)</title><rect x="726.4" y="1155.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.46%)</title><rect x="727.3" y="1139.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="730.3" y="1150.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.30%)</title><rect x="727.3" y="1123.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="730.3" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.15%)</title><rect x="730.9" y="1123.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="733.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.38%)</title><rect x="732.7" y="1155.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="735.7" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="734.5" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.5" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="734.5" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.5" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="734.5" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="737.5" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="734.5" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="737.5" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="734.5" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.5" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="734.5" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.5" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="734.5" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="737.5" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="734.5" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.5" y="1038.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="734.5" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="737.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="734.5" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="737.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.15%)</title><rect x="735.4" y="1139.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.53%)</title><rect x="737.2" y="1155.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.53%)</title><rect x="737.2" y="1139.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.53%)</title><rect x="737.2" y="1123.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.38%)</title><rect x="737.2" y="1107.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.38%)</title><rect x="737.2" y="1091.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.38%)</title><rect x="737.2" y="1075.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="740.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/1213608107.accept (1 samples, 0.08%)</title><rect x="739.9" y="1059.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="742.9" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="740.8" y="1059.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="743.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.15%)</title><rect x="741.7" y="1107.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.84%)</title><rect x="743.5" y="1187.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.84%)</title><rect x="743.5" y="1171.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.84%)</title><rect x="743.5" y="1155.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.38%)</title><rect x="743.5" y="1139.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.38%)</title><rect x="743.5" y="1123.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.38%)</title><rect x="743.5" y="1107.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/2114348764.accept (4 samples, 0.30%)</title><rect x="744.4" y="1091.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.46%)</title><rect x="747.9" y="1139.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/2114348764.accept (6 samples, 0.46%)</title><rect x="747.9" y="1123.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (6 samples, 0.46%)</title><rect x="747.9" y="1107.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.46%)</title><rect x="747.9" y="1091.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.9" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.46%)</title><rect x="747.9" y="1075.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.9" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.46%)</title><rect x="747.9" y="1059.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.9" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="750.6" y="1043.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="753.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="750.6" y="1027.0" width="2.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="753.6" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.15%)</title><rect x="753.3" y="1203.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="756.3" y="1214.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="753.3" y="1187.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="756.3" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="755.1" y="1219.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="758.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (14 samples, 1.06%)</title><rect x="756.0" y="1267.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.06%)</title><rect x="756.0" y="1251.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.06%)</title><rect x="756.0" y="1235.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.06%)</title><rect x="756.0" y="1219.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.0" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.30%)</title><rect x="760.5" y="1203.0" width="3.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="763.5" y="1214.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="760.5" y="1187.0" width="3.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="763.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (5 samples, 0.38%)</title><rect x="764.1" y="1203.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 17.25%)</title><rect x="768.6" y="1267.0" width="203.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="771.6" y="1278.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (227 samples, 17.25%)</title><rect x="768.6" y="1251.0" width="203.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="771.6" y="1262.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 13.98%)</title><rect x="793.7" y="1235.0" width="165.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.7" y="1246.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.91%)</title><rect x="803.5" y="1219.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.91%)</title><rect x="803.5" y="1203.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.91%)</title><rect x="803.5" y="1187.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.91%)</title><rect x="803.5" y="1171.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (161 samples, 12.23%)</title><rect x="814.3" y="1219.0" width="144.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="817.3" y="1230.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 12.23%)</title><rect x="814.3" y="1203.0" width="144.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.3" y="1214.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="818.8" y="1187.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="821.8" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="819.7" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="822.7" y="1198.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 11.32%)</title><rect x="820.6" y="1187.0" width="133.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="823.6" y="1198.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="826.9" y="1171.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="829.9" y="1182.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="829.5" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.5" y="1182.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.52%)</title><rect x="830.4" y="1171.0" width="18.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.4" y="1182.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.68%)</title><rect x="835.8" y="1155.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.8" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.23%)</title><rect x="841.2" y="1139.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="844.2" y="1150.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.15%)</title><rect x="842.1" y="1123.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="845.1" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.30%)</title><rect x="843.9" y="1155.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.9" y="1166.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="847.5" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.5" y="1166.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="848.4" y="1171.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="851.4" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.30%)</title><rect x="850.2" y="1171.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="853.2" y="1182.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="853.8" y="1171.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="856.8" y="1182.0"></text>
</g>
<g>
<title>__lll_lock_wait (10 samples, 0.76%)</title><rect x="854.7" y="1171.0" width="8.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="857.7" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 2.74%)</title><rect x="863.6" y="1171.0" width="32.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="866.6" y="1182.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (42 samples, 3.19%)</title><rect x="895.9" y="1171.0" width="37.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="898.9" y="1182.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (11 samples, 0.84%)</title><rect x="933.6" y="1171.0" width="9.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="936.6" y="1182.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.15%)</title><rect x="943.4" y="1171.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="946.4" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="945.2" y="1171.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="948.2" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="946.1" y="1171.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="949.1" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="947.0" y="1171.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="950.0" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="947.9" y="1171.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.9" y="1182.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="950.6" y="1171.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.6" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.23%)</title><rect x="951.5" y="1171.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="954.5" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.23%)</title><rect x="954.2" y="1187.0" width="2.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="957.2" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="956.9" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.9" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="957.8" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.14%)</title><rect x="958.7" y="1235.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.14%)</title><rect x="958.7" y="1219.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="961.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.14%)</title><rect x="958.7" y="1203.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.14%)</title><rect x="958.7" y="1187.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.15%)</title><rect x="972.1" y="1315.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="975.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="973.0" y="1299.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="976.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="973.0" y="1283.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="976.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.08%)</title><rect x="973.0" y="1267.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="973.0" y="1251.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="976.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="973.0" y="1235.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="976.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="973.0" y="1219.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="976.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="973.0" y="1203.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="976.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="973.0" y="1187.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.0" y="1198.0"></text>
</g>
<g>
<title>start_thread (241 samples, 18.31%)</title><rect x="973.9" y="1315.0" width="216.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="976.9" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (241 samples, 18.31%)</title><rect x="973.9" y="1299.0" width="216.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="976.9" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.90%)</title><rect x="973.9" y="1283.0" width="22.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.9" y="1294.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.53%)</title><rect x="973.9" y="1267.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.9" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.53%)</title><rect x="973.9" y="1251.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.9" y="1262.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.53%)</title><rect x="973.9" y="1235.0" width="6.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="976.9" y="1246.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.22%)</title><rect x="980.2" y="1267.0" width="14.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.2" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.68%)</title><rect x="980.2" y="1251.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.2" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="980.2" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="983.2" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.08%)</title><rect x="980.2" y="1219.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.2" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.15%)</title><rect x="981.1" y="1235.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.1" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.15%)</title><rect x="981.1" y="1219.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.1" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.23%)</title><rect x="982.9" y="1235.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.9" y="1246.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.23%)</title><rect x="985.6" y="1235.0" width="2.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="988.6" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.15%)</title><rect x="988.3" y="1251.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="991.3" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="988.3" y="1235.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.3" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="988.3" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="988.3" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="991.3" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="988.3" y="1187.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="991.3" y="1198.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="988.3" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="991.3" y="1182.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="988.3" y="1155.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="991.3" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="989.1" y="1235.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.1" y="1246.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="989.1" y="1219.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.1" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.38%)</title><rect x="990.0" y="1251.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.0" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.38%)</title><rect x="990.0" y="1235.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="993.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.38%)</title><rect x="990.0" y="1219.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.0" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.38%)</title><rect x="990.0" y="1203.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.0" y="1214.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.30%)</title><rect x="990.9" y="1187.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.9" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.30%)</title><rect x="990.9" y="1171.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.9" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.23%)</title><rect x="991.8" y="1155.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.8" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="992.7" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.7" y="1150.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="993.6" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.6" y="1150.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="993.6" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.6" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.15%)</title><rect x="994.5" y="1267.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.5" y="1278.0"></text>
</g>
<g>
<title>JavaThread::run() (215 samples, 16.34%)</title><rect x="996.3" y="1283.0" width="192.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.3" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (215 samples, 16.34%)</title><rect x="996.3" y="1267.0" width="192.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.3" y="1278.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (214 samples, 16.26%)</title><rect x="996.3" y="1251.0" width="191.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.3" y="1262.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (213 samples, 16.19%)</title><rect x="996.3" y="1235.0" width="191.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.3" y="1246.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (210 samples, 15.96%)</title><rect x="996.3" y="1219.0" width="188.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.3" y="1230.0">C2Compiler::compile_meth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (210 samples, 15.96%)</title><rect x="996.3" y="1203.0" width="188.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="999.3" y="1214.0">Compile::Compile(ciEnv*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (113 samples, 8.59%)</title><rect x="996.3" y="1187.0" width="101.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.3" y="1198.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.46%)</title><rect x="996.3" y="1171.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.3" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="996.3" y="1155.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.3" y="1166.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="997.2" y="1139.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.2" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.23%)</title><rect x="998.1" y="1155.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.1" y="1166.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.08%)</title><rect x="998.1" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.1" y="1150.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="998.1" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.1" y="1134.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="998.1" y="1107.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.1" y="1118.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="998.1" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.1" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.15%)</title><rect x="999.0" y="1139.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.0" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1000.8" y="1155.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1003.8" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.53%)</title><rect x="1001.7" y="1171.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1004.7" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.30%)</title><rect x="1002.6" y="1155.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1005.6" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1002.6" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.6" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1002.6" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.6" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.23%)</title><rect x="1003.5" y="1139.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.5" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.23%)</title><rect x="1003.5" y="1123.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.5" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1006.2" y="1155.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.2" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1006.2" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.2" y="1150.0"></text>
</g>
<g>
<title>jmpConNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1007.1" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.1" y="1166.0"></text>
</g>
<g>
<title>Assembler::jcc(Assembler::Condition, Label&amp;, bool) (1 samples, 0.08%)</title><rect x="1007.1" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.1" y="1150.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1008.0" y="1171.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.0" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.61%)</title><rect x="1008.9" y="1171.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.9" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1008.9" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.9" y="1166.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.08%)</title><rect x="1009.8" y="1155.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1012.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1010.7" y="1155.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.38%)</title><rect x="1011.6" y="1155.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.6" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.23%)</title><rect x="1012.5" y="1139.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1015.2" y="1139.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1018.2" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1015.2" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1018.2" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1015.2" y="1107.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1018.2" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.46%)</title><rect x="1016.0" y="1171.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1019.0" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.46%)</title><rect x="1016.0" y="1155.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1016.0" y="1139.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1019.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.08%)</title><rect x="1016.0" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1019.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1016.9" y="1139.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.9" y="1150.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1016.9" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.9" y="1134.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.08%)</title><rect x="1016.9" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1019.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="1017.8" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.8" y="1134.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="1017.8" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.8" y="1118.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.08%)</title><rect x="1017.8" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.8" y="1102.0"></text>
</g>
<g>
<title>indOffset8Oper::base_position() const (1 samples, 0.08%)</title><rect x="1017.8" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1020.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1018.7" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.7" y="1150.0"></text>
</g>
<g>
<title>tlsLoadPNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1018.7" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1019.6" y="1139.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (84 samples, 6.38%)</title><rect x="1021.4" y="1171.0" width="75.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.4" y="1182.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1021.4" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.23%)</title><rect x="1022.3" y="1155.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1025.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="1023.2" y="1139.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1024.1" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.23%)</title><rect x="1025.0" y="1155.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1025.9" y="1139.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1026.8" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1026.8" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.91%)</title><rect x="1027.7" y="1155.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 1.06%)</title><rect x="1038.5" y="1155.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.5" y="1166.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1042.1" y="1139.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.38%)</title><rect x="1042.9" y="1139.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1045.6" y="1123.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1047.4" y="1139.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.4" y="1150.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.15%)</title><rect x="1048.3" y="1139.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.3" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1050.1" y="1139.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1053.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (10 samples, 0.76%)</title><rect x="1051.0" y="1155.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.0" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.15%)</title><rect x="1056.4" y="1139.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.4" y="1150.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.08%)</title><rect x="1058.2" y="1139.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.2" y="1150.0"></text>
</g>
<g>
<title>rRegPOper::in_RegMask(int) const (1 samples, 0.08%)</title><rect x="1059.1" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.15%)</title><rect x="1060.0" y="1155.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.08%)</title><rect x="1060.9" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.38%)</title><rect x="1061.8" y="1155.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.23%)</title><rect x="1063.6" y="1139.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 0.91%)</title><rect x="1066.3" y="1155.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.3" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1066.3" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.3" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 0.84%)</title><rect x="1067.2" y="1139.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1067.2" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.2" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 0.76%)</title><rect x="1068.1" y="1123.0" width="8.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.1" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.15%)</title><rect x="1068.1" y="1107.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.1" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 0.46%)</title><rect x="1069.8" y="1107.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.8" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1074.3" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.15%)</title><rect x="1075.2" y="1107.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.23%)</title><rect x="1077.0" y="1155.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1077.9" y="1139.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.23%)</title><rect x="1079.7" y="1155.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.7" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1081.5" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.30%)</title><rect x="1082.4" y="1155.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.4" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.15%)</title><rect x="1084.2" y="1139.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.2" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.84%)</title><rect x="1086.0" y="1155.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1093.2" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.2" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1094.1" y="1139.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.1" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1095.9" y="1155.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1098.9" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1096.7" y="1171.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1099.7" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (84 samples, 6.38%)</title><rect x="1097.6" y="1187.0" width="75.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.6" y="1198.0">Compile:..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1097.6" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.6" y="1182.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1097.6" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1097.6" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.15%)</title><rect x="1098.5" y="1171.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.15%)</title><rect x="1098.5" y="1155.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1098.5" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="1098.5" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.08%)</title><rect x="1098.5" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1099.4" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1099.4" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1099.4" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1099.4" y="1091.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.4" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1099.4" y="1075.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.4" y="1086.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1099.4" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.4" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.15%)</title><rect x="1100.3" y="1171.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.3" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1101.2" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.2" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1101.2" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.2" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1101.2" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.2" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1101.2" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (66 samples, 5.02%)</title><rect x="1102.1" y="1171.0" width="59.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.1" y="1182.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1155.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.1" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1123.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.1" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.1" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1075.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.1" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1043.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.1" y="1054.0"></text>
</g>
<g>
<title>CallNode::guaranteed_safepoint() (1 samples, 0.08%)</title><rect x="1102.1" y="1027.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.38%)</title><rect x="1103.0" y="1155.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.0" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1105.7" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="1150.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1106.6" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="1107.5" y="1155.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.5" y="1166.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1110.2" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (44 samples, 3.34%)</title><rect x="1111.1" y="1155.0" width="39.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.1" y="1166.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (42 samples, 3.19%)</title><rect x="1112.9" y="1139.0" width="37.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.9" y="1150.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.23%)</title><rect x="1113.8" y="1123.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (38 samples, 2.89%)</title><rect x="1116.5" y="1123.0" width="34.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.5" y="1134.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.15%)</title><rect x="1143.4" y="1107.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1143.4" y="1091.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.46%)</title><rect x="1145.2" y="1107.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.23%)</title><rect x="1150.5" y="1155.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.61%)</title><rect x="1153.2" y="1155.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1154.1" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.08%)</title><rect x="1154.1" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1155.0" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.38%)</title><rect x="1155.9" y="1139.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.08%)</title><rect x="1156.8" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.08%)</title><rect x="1157.7" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.08%)</title><rect x="1158.6" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1159.5" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.5" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="1160.4" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 0.91%)</title><rect x="1161.3" y="1171.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.3" y="1182.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.08%)</title><rect x="1161.3" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.84%)</title><rect x="1162.2" y="1155.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.2" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="1150.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1162.2" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="1134.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1162.2" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.2" y="1118.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1162.2" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1162.2" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.2" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1162.2" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.2" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1163.1" y="1139.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1164.9" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.23%)</title><rect x="1165.8" y="1139.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.15%)</title><rect x="1165.8" y="1123.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.8" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1166.7" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.7" y="1118.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1167.6" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.08%)</title><rect x="1167.6" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.6" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.5" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1168.5" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1169.4" y="1139.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="1150.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1169.4" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.3" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1170.3" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1170.3" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.3" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.2" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1171.2" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.2" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.2" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.2" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.2" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1172.1" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.1" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1172.1" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.1" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1172.1" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.1" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.84%)</title><rect x="1173.0" y="1187.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.84%)</title><rect x="1173.0" y="1171.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.76%)</title><rect x="1173.0" y="1155.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.76%)</title><rect x="1173.0" y="1139.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.76%)</title><rect x="1173.0" y="1123.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.76%)</title><rect x="1173.0" y="1107.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.76%)</title><rect x="1173.0" y="1091.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.76%)</title><rect x="1173.0" y="1075.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.76%)</title><rect x="1173.0" y="1059.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.76%)</title><rect x="1173.0" y="1043.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.76%)</title><rect x="1173.0" y="1027.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.68%)</title><rect x="1173.0" y="1011.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.46%)</title><rect x="1173.0" y="995.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.46%)</title><rect x="1173.0" y="979.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.46%)</title><rect x="1173.0" y="963.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.46%)</title><rect x="1173.0" y="947.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.46%)</title><rect x="1173.0" y="931.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.46%)</title><rect x="1173.0" y="915.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.0" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.46%)</title><rect x="1173.0" y="899.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.46%)</title><rect x="1173.0" y="883.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.46%)</title><rect x="1173.0" y="867.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.46%)</title><rect x="1173.0" y="851.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.46%)</title><rect x="1173.0" y="835.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.46%)</title><rect x="1173.0" y="819.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1173.0" y="803.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1173.0" y="787.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1173.0" y="771.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1173.0" y="755.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1173.0" y="739.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1173.0" y="723.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1173.0" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1173.0" y="691.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1173.0" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1173.0" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1173.0" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1173.0" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1173.0" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1173.0" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1173.0" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1173.0" y="563.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1173.0" y="547.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.0" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1173.0" y="531.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.0" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1173.0" y="515.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1173.0" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1173.0" y="483.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="494.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1173.0" y="467.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1173.0" y="451.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.0" y="462.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.08%)</title><rect x="1173.0" y="435.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1173.9" y="707.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1173.9" y="691.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1173.9" y="675.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1173.9" y="659.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1173.9" y="643.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1173.9" y="627.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1173.9" y="611.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1173.9" y="595.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1173.9" y="579.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1173.9" y="563.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1173.9" y="547.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1173.9" y="531.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1173.9" y="515.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1173.9" y="499.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1173.9" y="483.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1173.9" y="467.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1173.9" y="451.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1173.9" y="435.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1173.9" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.08%)</title><rect x="1173.9" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1173.9" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.08%)</title><rect x="1173.9" y="371.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.08%)</title><rect x="1173.9" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="419.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="371.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="323.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="307.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="243.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="227.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="195.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="179.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="147.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1174.8" y="131.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1174.8" y="115.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1174.8" y="99.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1174.8" y="83.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1174.8" y="67.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.8" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1174.8" y="51.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="62.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1175.7" y="531.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1175.7" y="515.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.7" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1175.7" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1175.7" y="483.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.6" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.6" y="787.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.6" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.6" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.6" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.6" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.6" y="707.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.6" y="691.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.6" y="675.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.6" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.6" y="643.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.6" y="627.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.6" y="611.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.6" y="595.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.6" y="579.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.6" y="563.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.6" y="547.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.6" y="531.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.6" y="515.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.6" y="499.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.6" y="483.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.6" y="467.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.6" y="451.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.6" y="435.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.6" y="419.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.6" y="403.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.6" y="387.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.6" y="371.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1176.6" y="355.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1176.6" y="339.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1176.6" y="323.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.6" y="307.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.6" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1176.6" y="275.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1176.6" y="259.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1176.6" y="243.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1177.4" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.4" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.4" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1178.3" y="995.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1178.3" y="979.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1178.3" y="963.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1178.3" y="947.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1178.3" y="931.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1178.3" y="915.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1178.3" y="899.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1178.3" y="883.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1178.3" y="867.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1178.3" y="851.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1178.3" y="835.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1178.3" y="819.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1178.3" y="803.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1178.3" y="787.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1178.3" y="771.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1178.3" y="755.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1178.3" y="739.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1178.3" y="723.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1178.3" y="707.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="691.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1178.3" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1178.3" y="659.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1178.3" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1178.3" y="627.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1178.3" y="611.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1179.2" y="691.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1179.2" y="675.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.2" y="686.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1179.2" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.2" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1179.2" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="654.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.2" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="638.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.2" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1179.2" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1179.2" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="590.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1179.2" y="563.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.1" y="659.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.1" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.1" y="627.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.1" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.1" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.1" y="579.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.1" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.1" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.1" y="531.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.1" y="515.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.1" y="499.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.1" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.1" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.1" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.1" y="435.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.1" y="419.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.1" y="403.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.1" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.1" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.1" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.1" y="339.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.1" y="323.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.1" y="307.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.1" y="291.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.1" y="275.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.1" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.1" y="243.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.1" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.1" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.1" y="195.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.1" y="179.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.1" y="163.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.1" y="147.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.1" y="131.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.1" y="115.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.1" y="99.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.1" y="83.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.1" y="67.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="78.0"></text>
</g>
<g>
<title>MethodHandles::signature_polymorphic_name_id(Klass*, Symbol*) (1 samples, 0.08%)</title><rect x="1180.1" y="51.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="62.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.08%)</title><rect x="1180.1" y="35.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="995.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="958.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1181.0" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1181.9" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="1166.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.9" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="1150.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.08%)</title><rect x="1181.9" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="1134.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.15%)</title><rect x="1182.8" y="1187.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1182.8" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1182.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1183.7" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.23%)</title><rect x="1184.6" y="1219.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.23%)</title><rect x="1184.6" y="1203.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.23%)</title><rect x="1184.6" y="1187.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.23%)</title><rect x="1184.6" y="1171.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1184.6" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.6" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1184.6" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1184.6" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1184.6" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.6" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1184.6" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1185.5" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.08%)</title><rect x="1185.5" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1186.4" y="1155.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1186.4" y="1139.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.4" y="1150.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.08%)</title><rect x="1186.4" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.08%)</title><rect x="1186.4" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="1118.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.08%)</title><rect x="1186.4" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.4" y="1102.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.08%)</title><rect x="1186.4" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.4" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1186.4" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.4" y="1070.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1187.3" y="1235.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1187.3" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1187.3" y="1203.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.3" y="1214.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.08%)</title><rect x="1187.3" y="1187.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.3" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.08%)</title><rect x="1187.3" y="1171.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1188.2" y="1251.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="1262.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1188.2" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1188.2" y="1219.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.2" y="1230.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.08%)</title><rect x="1188.2" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.2" y="1214.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1188.2" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1188.2" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.2" y="1182.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1188.2" y="1155.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.1" y="1283.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.1" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="1278.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1262.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1235.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1246.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1219.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.1" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1203.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1198.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="1189.1" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.1" y="1182.0"></text>
</g>
</g>
</svg>
