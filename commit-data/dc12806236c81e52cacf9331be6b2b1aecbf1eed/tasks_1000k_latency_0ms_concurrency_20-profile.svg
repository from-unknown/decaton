<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,403 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="10.8" y="2035.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.14%)</title><rect x="10.8" y="2019.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 19.60%)</title><rect x="12.5" y="2035.0" width="231.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.5" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (275 samples, 19.60%)</title><rect x="12.5" y="2019.0" width="231.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (274 samples, 19.53%)</title><rect x="13.4" y="2003.0" width="230.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.4" y="2014.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.07%)</title><rect x="14.2" y="1987.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="14.2" y="1971.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.2" y="1955.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="14.2" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.2" y="1923.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.2" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.2" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="14.2" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="14.2" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/1916744445.test (1 samples, 0.07%)</title><rect x="14.2" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 0.21%)</title><rect x="15.0" y="1987.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (3 samples, 0.21%)</title><rect x="15.0" y="1971.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="15.0" y="1955.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.21%)</title><rect x="15.0" y="1939.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.21%)</title><rect x="15.0" y="1923.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.21%)</title><rect x="15.0" y="1907.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.21%)</title><rect x="15.0" y="1891.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (3 samples, 0.21%)</title><rect x="15.0" y="1875.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (3 samples, 0.21%)</title><rect x="15.0" y="1859.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$278/84880720.test (1 samples, 0.07%)</title><rect x="15.0" y="1843.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.0" y="1854.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="15.9" y="1843.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="18.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.36%)</title><rect x="17.6" y="1987.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.36%)</title><rect x="17.6" y="1971.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.36%)</title><rect x="17.6" y="1955.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1616744399.accept (5 samples, 0.36%)</title><rect x="17.6" y="1939.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.36%)</title><rect x="17.6" y="1923.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.36%)</title><rect x="17.6" y="1907.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.6" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="18.4" y="1891.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="21.8" y="1987.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.8" y="1998.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="21.8" y="1971.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.8" y="1982.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="21.8" y="1955.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.8" y="1966.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="21.8" y="1939.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="24.8" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="21.8" y="1923.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="24.8" y="1934.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (211 samples, 15.04%)</title><rect x="22.6" y="1987.0" width="177.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.6" y="1998.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/2084875528.accept (193 samples, 13.76%)</title><rect x="23.5" y="1971.0" width="162.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.5" y="1982.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (193 samples, 13.76%)</title><rect x="23.5" y="1955.0" width="162.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.5" y="1966.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (2 samples, 0.14%)</title><rect x="24.3" y="1939.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (167 samples, 11.90%)</title><rect x="26.0" y="1939.0" width="140.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.0" y="1950.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (167 samples, 11.90%)</title><rect x="26.0" y="1923.0" width="140.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.0" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (167 samples, 11.90%)</title><rect x="26.0" y="1907.0" width="140.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.0" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (167 samples, 11.90%)</title><rect x="26.0" y="1891.0" width="140.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.0" y="1902.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (167 samples, 11.90%)</title><rect x="26.0" y="1875.0" width="140.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.0" y="1886.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (167 samples, 11.90%)</title><rect x="26.0" y="1859.0" width="140.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.0" y="1870.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (119 samples, 8.48%)</title><rect x="60.5" y="1843.0" width="100.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.5" y="1854.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="60.5" y="1827.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 1.85%)</title><rect x="61.3" y="1827.0" width="21.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.3" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 1.85%)</title><rect x="61.3" y="1811.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.3" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 1.85%)</title><rect x="61.3" y="1795.0" width="21.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.3" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.64%)</title><rect x="83.2" y="1827.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.64%)</title><rect x="83.2" y="1811.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.21%)</title><rect x="84.9" y="1795.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.9" y="1806.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.21%)</title><rect x="84.9" y="1779.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="87.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.21%)</title><rect x="87.4" y="1795.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="89.9" y="1795.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 5.92%)</title><rect x="90.7" y="1827.0" width="69.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.7" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 5.92%)</title><rect x="90.7" y="1811.0" width="69.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.7" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 5.77%)</title><rect x="90.7" y="1795.0" width="68.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.7" y="1806.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 5.77%)</title><rect x="90.7" y="1779.0" width="68.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.7" y="1790.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (81 samples, 5.77%)</title><rect x="90.7" y="1763.0" width="68.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.7" y="1774.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 5.13%)</title><rect x="91.6" y="1747.0" width="60.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="94.6" y="1758.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="92.4" y="1731.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="95.4" y="1742.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="94.1" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="97.1" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="94.9" y="1731.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="97.9" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 2.78%)</title><rect x="95.8" y="1731.0" width="32.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="98.8" y="1742.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.36%)</title><rect x="128.6" y="1731.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="131.6" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (23 samples, 1.64%)</title><rect x="132.8" y="1731.0" width="19.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="135.8" y="1742.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.21%)</title><rect x="152.1" y="1747.0" width="2.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="155.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.36%)</title><rect x="154.7" y="1747.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="157.7" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="158.9" y="1795.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.50%)</title><rect x="160.5" y="1843.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.50%)</title><rect x="160.5" y="1827.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.14%)</title><rect x="160.5" y="1811.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.36%)</title><rect x="162.2" y="1811.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.21%)</title><rect x="162.2" y="1795.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="165.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="164.8" y="1795.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="165.6" y="1795.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (16 samples, 1.14%)</title><rect x="166.4" y="1939.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.4" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (16 samples, 1.14%)</title><rect x="166.4" y="1923.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.43%)</title><rect x="174.8" y="1907.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.43%)</title><rect x="174.8" y="1891.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.43%)</title><rect x="174.8" y="1875.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.43%)</title><rect x="174.8" y="1859.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.43%)</title><rect x="174.8" y="1843.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.29%)</title><rect x="179.9" y="1939.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.29%)</title><rect x="179.9" y="1923.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="179.9" y="1907.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.21%)</title><rect x="183.3" y="1939.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.21%)</title><rect x="183.3" y="1923.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.21%)</title><rect x="183.3" y="1907.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.21%)</title><rect x="183.3" y="1891.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.21%)</title><rect x="183.3" y="1875.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.3" y="1886.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="185.8" y="1971.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="188.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="186.6" y="1971.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="186.6" y="1955.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="186.6" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="186.6" y="1923.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="186.6" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="186.6" y="1891.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (14 samples, 1.00%)</title><rect x="187.5" y="1971.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (12 samples, 0.86%)</title><rect x="189.1" y="1955.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (12 samples, 0.86%)</title><rect x="189.1" y="1939.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (12 samples, 0.86%)</title><rect x="189.1" y="1923.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="199.2" y="1971.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="199.2" y="1955.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 3.71%)</title><rect x="200.1" y="1987.0" width="43.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.1" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 3.71%)</title><rect x="200.1" y="1971.0" width="43.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.1" y="1982.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 2.28%)</title><rect x="200.1" y="1955.0" width="26.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.1" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="200.1" y="1939.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="200.1" y="1923.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="1934.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="200.1" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="203.1" y="1918.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.07%)</title><rect x="200.1" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="203.1" y="1902.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.07%)</title><rect x="200.1" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="203.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="200.9" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="200.9" y="1923.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="200.9" y="1907.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="200.9" y="1891.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="200.9" y="1875.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="200.9" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="200.9" y="1843.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="200.9" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.07%)</title><rect x="200.9" y="1811.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.14%)</title><rect x="201.8" y="1939.0" width="25.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.8" y="1950.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="201.8" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.00%)</title><rect x="202.6" y="1923.0" width="23.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.6" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 1.78%)</title><rect x="202.6" y="1907.0" width="21.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.6" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 1.78%)</title><rect x="202.6" y="1891.0" width="21.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.6" y="1902.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.14%)</title><rect x="203.4" y="1875.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.71%)</title><rect x="203.4" y="1859.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.71%)</title><rect x="203.4" y="1843.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.71%)</title><rect x="203.4" y="1827.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.71%)</title><rect x="203.4" y="1811.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.71%)</title><rect x="203.4" y="1795.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.71%)</title><rect x="203.4" y="1779.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.4" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.71%)</title><rect x="203.4" y="1763.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.43%)</title><rect x="211.9" y="1859.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.43%)</title><rect x="211.9" y="1843.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (6 samples, 0.43%)</title><rect x="211.9" y="1827.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.57%)</title><rect x="216.9" y="1875.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.57%)</title><rect x="216.9" y="1859.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.36%)</title><rect x="216.9" y="1843.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.36%)</title><rect x="216.9" y="1827.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.9" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="220.3" y="1811.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="223.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.21%)</title><rect x="221.1" y="1843.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.1" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.21%)</title><rect x="221.1" y="1827.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.14%)</title><rect x="223.6" y="1907.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.14%)</title><rect x="223.6" y="1891.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.14%)</title><rect x="223.6" y="1875.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="223.6" y="1859.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.6" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="224.5" y="1843.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="227.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="225.3" y="1907.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="225.3" y="1891.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="225.3" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.3" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="225.3" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="225.3" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.07%)</title><rect x="226.2" y="1923.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="226.2" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="226.2" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="226.2" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="226.2" y="1859.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.57%)</title><rect x="227.0" y="1955.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.43%)</title><rect x="227.0" y="1939.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.29%)</title><rect x="227.0" y="1923.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="227.0" y="1907.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/346018644.accept (1 samples, 0.07%)</title><rect x="227.0" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="227.0" y="1875.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="227.0" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="227.0" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="227.0" y="1827.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.0" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="227.0" y="1811.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="227.8" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="227.8" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="227.8" y="1875.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="227.8" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="227.8" y="1843.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.8" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="227.8" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.8" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="227.8" y="1811.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="227.8" y="1795.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.8" y="1806.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="227.8" y="1779.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="230.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="228.7" y="1907.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="228.7" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.7" y="1902.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="228.7" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="228.7" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.7" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="228.7" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="228.7" y="1827.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="228.7" y="1811.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="229.5" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="229.5" y="1891.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="230.4" y="1923.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="230.4" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="230.4" y="1891.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="230.4" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="230.4" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$51/1794717576.get (1 samples, 0.07%)</title><rect x="230.4" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="231.2" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.2" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="231.2" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="231.2" y="1875.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="231.2" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.14%)</title><rect x="232.0" y="1939.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.07%)</title><rect x="232.0" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.07%)</title><rect x="232.9" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.07%)</title><rect x="232.9" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.57%)</title><rect x="233.7" y="1955.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.57%)</title><rect x="233.7" y="1939.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 0.57%)</title><rect x="233.7" y="1923.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="233.7" y="1907.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="234.6" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (1 samples, 0.07%)</title><rect x="234.6" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.43%)</title><rect x="235.4" y="1907.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.4" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.14%)</title><rect x="235.4" y="1891.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.14%)</title><rect x="235.4" y="1875.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="235.4" y="1859.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="238.4" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="235.4" y="1843.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="238.4" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.07%)</title><rect x="236.2" y="1827.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="239.2" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="236.2" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="239.2" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="236.2" y="1795.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="239.2" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate_initialize_regions(unsigned int, unsigned int, unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="236.2" y="1779.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="239.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="237.1" y="1891.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="237.1" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="237.1" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="237.1" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.1" y="1854.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="237.1" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="237.1" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.1" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="237.1" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.1" y="1806.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.07%)</title><rect x="237.1" y="1779.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.1" y="1790.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.07%)</title><rect x="237.1" y="1763.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.1" y="1774.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.07%)</title><rect x="237.1" y="1747.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.21%)</title><rect x="237.9" y="1891.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="237.9" y="1875.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.14%)</title><rect x="237.9" y="1859.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.14%)</title><rect x="237.9" y="1843.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.14%)</title><rect x="237.9" y="1827.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.9" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.14%)</title><rect x="237.9" y="1811.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.9" y="1822.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="237.9" y="1795.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="240.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.07%)</title><rect x="239.6" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.6" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="239.6" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.6" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="239.6" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.21%)</title><rect x="240.4" y="1955.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.21%)</title><rect x="240.4" y="1939.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.21%)</title><rect x="240.4" y="1923.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="240.4" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="241.3" y="1907.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="241.3" y="1891.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="241.3" y="1875.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="242.1" y="1859.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="242.1" y="1843.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="242.1" y="1827.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="242.1" y="1811.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="242.1" y="1795.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.1" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="242.1" y="1779.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.1" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="242.1" y="1763.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="243.0" y="1955.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="243.0" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="243.0" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="243.0" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="243.0" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.07%)</title><rect x="243.0" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (773 samples, 55.10%)</title><rect x="243.8" y="2035.0" width="650.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.8" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (773 samples, 55.10%)</title><rect x="243.8" y="2019.0" width="650.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.8" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (773 samples, 55.10%)</title><rect x="243.8" y="2003.0" width="650.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.8" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1864098117.run (539 samples, 38.42%)</title><rect x="248.0" y="1987.0" width="453.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.0" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (538 samples, 38.35%)</title><rect x="248.9" y="1971.0" width="452.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.9" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (538 samples, 38.35%)</title><rect x="248.9" y="1955.0" width="452.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.9" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (538 samples, 38.35%)</title><rect x="248.9" y="1939.0" width="452.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.9" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipelin..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="256.4" y="1923.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="259.4" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="256.4" y="1907.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.4" y="1918.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="257.3" y="1923.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.57%)</title><rect x="258.1" y="1923.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.1" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.57%)</title><rect x="258.1" y="1907.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.57%)</title><rect x="258.1" y="1891.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="258.1" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.50%)</title><rect x="259.0" y="1875.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.0" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="261.5" y="1859.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="264.5" y="1870.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="261.5" y="1843.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="264.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (50 samples, 3.56%)</title><rect x="264.8" y="1923.0" width="42.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.8" y="1934.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (34 samples, 2.42%)</title><rect x="278.3" y="1907.0" width="28.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.3" y="1918.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (34 samples, 2.42%)</title><rect x="278.3" y="1891.0" width="28.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="1902.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (34 samples, 2.42%)</title><rect x="278.3" y="1875.0" width="28.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.3" y="1886.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.36%)</title><rect x="278.3" y="1859.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.36%)</title><rect x="278.3" y="1843.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.36%)</title><rect x="278.3" y="1827.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/1491612082.accept (1 samples, 0.07%)</title><rect x="280.0" y="1811.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.0" y="1822.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="280.8" y="1811.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="283.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (29 samples, 2.07%)</title><rect x="282.5" y="1859.0" width="24.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.5" y="1870.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/1491612082.accept (29 samples, 2.07%)</title><rect x="282.5" y="1843.0" width="24.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.5" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (29 samples, 2.07%)</title><rect x="282.5" y="1827.0" width="24.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.5" y="1838.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (29 samples, 2.07%)</title><rect x="282.5" y="1811.0" width="24.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.5" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (29 samples, 2.07%)</title><rect x="282.5" y="1795.0" width="24.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.5" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (29 samples, 2.07%)</title><rect x="282.5" y="1779.0" width="24.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.5" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (12 samples, 0.86%)</title><rect x="282.5" y="1763.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (12 samples, 0.86%)</title><rect x="282.5" y="1747.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.5" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1328010882.accept (1 samples, 0.07%)</title><rect x="288.4" y="1731.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.4" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/947293463.accept (2 samples, 0.14%)</title><rect x="289.2" y="1731.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.2" y="1742.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="290.9" y="1731.0" width="1.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="293.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.21%)</title><rect x="292.6" y="1763.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="306.9" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="306.9" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$204/87977376.get (1 samples, 0.07%)</title><rect x="306.9" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="306.9" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.9" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="306.9" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="309.9" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="306.9" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="309.9" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="306.9" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="309.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (154 samples, 10.98%)</title><rect x="307.7" y="1923.0" width="129.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.7" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (154 samples, 10.98%)</title><rect x="307.7" y="1907.0" width="129.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.7" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (154 samples, 10.98%)</title><rect x="307.7" y="1891.0" width="129.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.7" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 10.98%)</title><rect x="307.7" y="1875.0" width="129.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.7" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 10.98%)</title><rect x="307.7" y="1859.0" width="129.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.7" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (154 samples, 10.98%)</title><rect x="307.7" y="1843.0" width="129.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.7" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="307.7" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="310.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 3.99%)</title><rect x="308.6" y="1827.0" width="47.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.6" y="1838.0">com/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="321.2" y="1811.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="324.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="321.2" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="324.2" y="1806.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="322.0" y="1811.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="325.0" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.71%)</title><rect x="323.7" y="1811.0" width="8.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="326.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.50%)</title><rect x="326.2" y="1795.0" width="5.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="329.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.57%)</title><rect x="332.1" y="1811.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.57%)</title><rect x="332.1" y="1795.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="332.1" y="1779.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="335.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="332.1" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="335.1" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="332.1" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="335.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="332.1" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="335.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="332.1" y="1715.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="335.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.50%)</title><rect x="333.0" y="1779.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.50%)</title><rect x="333.0" y="1763.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.50%)</title><rect x="333.0" y="1747.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.50%)</title><rect x="333.0" y="1731.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.0" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 0.50%)</title><rect x="333.0" y="1715.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (20 samples, 1.43%)</title><rect x="338.9" y="1811.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="341.9" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="340.5" y="1795.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="343.5" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="340.5" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.5" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="340.5" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="343.5" y="1774.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.07%)</title><rect x="340.5" y="1747.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (17 samples, 1.21%)</title><rect x="341.4" y="1795.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="341.4" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="344.4" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="341.4" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="344.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="341.4" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="344.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="341.4" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="344.4" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="341.4" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="344.4" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="341.4" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="344.4" y="1710.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="341.4" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="344.4" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="341.4" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="344.4" y="1678.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="341.4" y="1651.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="344.4" y="1662.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="341.4" y="1635.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="344.4" y="1646.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="341.4" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="344.4" y="1630.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="341.4" y="1603.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="344.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.36%)</title><rect x="342.2" y="1779.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.2" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="342.2" y="1763.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="345.2" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="342.2" y="1747.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="345.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="342.2" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="345.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="343.1" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.21%)</title><rect x="343.9" y="1763.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="346.4" y="1779.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="346.4" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="346.4" y="1747.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="349.4" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="346.4" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="349.4" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="346.4" y="1715.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="349.4" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="346.4" y="1699.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="349.4" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="346.4" y="1683.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="349.4" y="1694.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="346.4" y="1667.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="349.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.71%)</title><rect x="347.3" y="1779.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 6.27%)</title><rect x="355.7" y="1827.0" width="74.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="358.7" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.14%)</title><rect x="359.0" y="1811.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.57%)</title><rect x="360.7" y="1811.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.36%)</title><rect x="363.2" y="1795.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.71%)</title><rect x="367.4" y="1811.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.71%)</title><rect x="367.4" y="1795.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.57%)</title><rect x="369.1" y="1779.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.50%)</title><rect x="370.0" y="1763.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.0" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="370.8" y="1747.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="373.8" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="370.8" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="373.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="370.8" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.8" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="370.8" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.8" y="1710.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="370.8" y="1683.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.36%)</title><rect x="371.7" y="1747.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.43%)</title><rect x="375.9" y="1811.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.43%)</title><rect x="375.9" y="1795.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.14%)</title><rect x="380.9" y="1811.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (56 samples, 3.99%)</title><rect x="382.6" y="1811.0" width="47.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.6" y="1822.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (56 samples, 3.99%)</title><rect x="382.6" y="1795.0" width="47.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.6" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.07%)</title><rect x="383.4" y="1779.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="386.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="386.0" y="1763.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.36%)</title><rect x="386.8" y="1763.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.36%)</title><rect x="386.8" y="1747.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.36%)</title><rect x="386.8" y="1731.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="391.0" y="1763.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="394.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="391.0" y="1747.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="394.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.36%)</title><rect x="391.8" y="1763.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 2.85%)</title><rect x="396.0" y="1779.0" width="33.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.0" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 2.85%)</title><rect x="396.0" y="1763.0" width="33.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.0" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (40 samples, 2.85%)</title><rect x="396.0" y="1747.0" width="33.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.0" y="1758.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.64%)</title><rect x="401.1" y="1731.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.21%)</title><rect x="401.9" y="1715.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.21%)</title><rect x="401.9" y="1699.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.21%)</title><rect x="401.9" y="1683.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="403.6" y="1667.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.21%)</title><rect x="404.5" y="1715.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.21%)</title><rect x="404.5" y="1699.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="406.1" y="1683.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.14%)</title><rect x="407.0" y="1715.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.86%)</title><rect x="408.7" y="1731.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.71%)</title><rect x="410.3" y="1715.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.71%)</title><rect x="410.3" y="1699.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.71%)</title><rect x="410.3" y="1683.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.71%)</title><rect x="410.3" y="1667.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="413.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="418.8" y="1731.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.57%)</title><rect x="419.6" y="1731.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.57%)</title><rect x="419.6" y="1715.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.57%)</title><rect x="419.6" y="1699.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="422.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.57%)</title><rect x="419.6" y="1683.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.6" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.57%)</title><rect x="419.6" y="1667.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.6" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.43%)</title><rect x="420.4" y="1651.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.4" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (4 samples, 0.29%)</title><rect x="422.1" y="1635.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.1" y="1646.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (1 samples, 0.07%)</title><rect x="425.5" y="1651.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.29%)</title><rect x="426.3" y="1731.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.29%)</title><rect x="426.3" y="1715.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.3" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="426.3" y="1699.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="429.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.64%)</title><rect x="429.7" y="1827.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.64%)</title><rect x="429.7" y="1811.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.64%)</title><rect x="429.7" y="1795.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.64%)</title><rect x="429.7" y="1779.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.64%)</title><rect x="429.7" y="1763.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (312 samples, 22.24%)</title><rect x="437.3" y="1923.0" width="262.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.3" y="1934.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="453.2" y="1907.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="456.2" y="1918.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="453.2" y="1891.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="456.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (46 samples, 3.28%)</title><rect x="454.9" y="1907.0" width="38.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.9" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="455.8" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.8" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 3.14%)</title><rect x="456.6" y="1891.0" width="37.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.6" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 2.85%)</title><rect x="460.0" y="1875.0" width="33.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.0" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.29%)</title><rect x="460.8" y="1859.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="463.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.29%)</title><rect x="460.8" y="1843.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.29%)</title><rect x="460.8" y="1827.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="463.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.29%)</title><rect x="460.8" y="1811.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="463.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="464.2" y="1859.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="464.2" y="1843.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="464.2" y="1827.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.14%)</title><rect x="464.2" y="1811.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.07%)</title><rect x="465.0" y="1795.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.0" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (33 samples, 2.35%)</title><rect x="465.9" y="1859.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.9" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (28 samples, 2.00%)</title><rect x="470.1" y="1843.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.1" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.36%)</title><rect x="489.4" y="1827.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="492.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="493.6" y="1907.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.6" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.14%)</title><rect x="493.6" y="1891.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (171 samples, 12.19%)</title><rect x="495.3" y="1907.0" width="143.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.3" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (160 samples, 11.40%)</title><rect x="495.3" y="1891.0" width="134.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.3" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (72 samples, 5.13%)</title><rect x="504.5" y="1875.0" width="60.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.5" y="1886.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 2.28%)</title><rect x="520.5" y="1859.0" width="26.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.5" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.28%)</title><rect x="520.5" y="1843.0" width="26.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="523.5" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.57%)</title><rect x="528.9" y="1827.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="531.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.57%)</title><rect x="528.9" y="1811.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.57%)</title><rect x="528.9" y="1795.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.9" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="528.9" y="1779.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="531.9" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.50%)</title><rect x="529.8" y="1779.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="532.8" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="529.8" y="1763.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="532.8" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.21%)</title><rect x="530.6" y="1763.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="533.6" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.14%)</title><rect x="531.5" y="1747.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="534.5" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="531.5" y="1731.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="534.5" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.14%)</title><rect x="531.5" y="1715.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="534.5" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.14%)</title><rect x="531.5" y="1699.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="534.5" y="1710.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.21%)</title><rect x="533.1" y="1763.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="536.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.21%)</title><rect x="533.1" y="1747.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="536.1" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="534.0" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="537.0" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="534.0" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="537.0" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="534.0" y="1699.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="537.0" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="534.0" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="537.0" y="1694.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="534.0" y="1667.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="537.0" y="1678.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="534.8" y="1731.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="537.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.36%)</title><rect x="535.7" y="1827.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="538.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="539.9" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="542.9" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (8 samples, 0.57%)</title><rect x="540.7" y="1827.0" width="6.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="543.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="547.4" y="1859.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="547.4" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="550.4" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="547.4" y="1827.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="550.4" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="547.4" y="1811.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="550.4" y="1822.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="547.4" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="550.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="548.3" y="1843.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="551.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="548.3" y="1827.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.3" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="548.3" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="548.3" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.3" y="1806.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="549.1" y="1859.0" width="1.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="552.1" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (17 samples, 1.21%)</title><rect x="550.8" y="1859.0" width="14.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="553.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.71%)</title><rect x="565.1" y="1875.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="568.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.71%)</title><rect x="565.1" y="1859.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.71%)</title><rect x="565.1" y="1843.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.1" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (67 samples, 4.78%)</title><rect x="573.5" y="1875.0" width="56.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="576.5" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (66 samples, 4.70%)</title><rect x="574.3" y="1859.0" width="55.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="577.3" y="1870.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.50%)</title><rect x="574.3" y="1843.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="577.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.50%)</title><rect x="574.3" y="1827.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.50%)</title><rect x="574.3" y="1811.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="577.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.50%)</title><rect x="574.3" y="1795.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="580.2" y="1843.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="580.2" y="1827.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="580.2" y="1811.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="583.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.21%)</title><rect x="580.2" y="1795.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="583.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.14%)</title><rect x="581.1" y="1779.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.1" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (56 samples, 3.99%)</title><rect x="582.8" y="1843.0" width="47.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="585.8" y="1854.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (50 samples, 3.56%)</title><rect x="587.8" y="1827.0" width="42.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.8" y="1838.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (24 samples, 1.71%)</title><rect x="609.7" y="1811.0" width="20.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="612.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.14%)</title><rect x="618.1" y="1795.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.64%)</title><rect x="619.8" y="1795.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="626.5" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="626.5" y="1763.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="629.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="626.5" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="629.5" y="1758.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.21%)</title><rect x="627.3" y="1795.0" width="2.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="630.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (11 samples, 0.78%)</title><rect x="629.9" y="1891.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (11 samples, 0.78%)</title><rect x="629.9" y="1875.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.78%)</title><rect x="629.9" y="1859.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.78%)</title><rect x="629.9" y="1843.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.9" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="634.9" y="1827.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="637.9" y="1838.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="635.7" y="1811.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="638.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="638.3" y="1827.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (63 samples, 4.49%)</title><rect x="639.1" y="1907.0" width="53.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.1" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (63 samples, 4.49%)</title><rect x="639.1" y="1891.0" width="53.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.1" y="1902.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="641.6" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="641.6" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="644.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="641.6" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="644.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="641.6" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.6" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="641.6" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="644.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/34722430.process (22 samples, 1.57%)</title><rect x="642.5" y="1875.0" width="18.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="645.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (21 samples, 1.50%)</title><rect x="642.5" y="1859.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.21%)</title><rect x="643.3" y="1843.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.3" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="643.3" y="1827.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.3" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="643.3" y="1811.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.3" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="643.3" y="1795.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.3" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="643.3" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.3" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 0.86%)</title><rect x="644.2" y="1827.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.2" y="1838.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="1811.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="652.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="649.2" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="652.2" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.36%)</title><rect x="650.0" y="1811.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="653.0" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="650.0" y="1795.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="653.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="654.2" y="1827.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="655.1" y="1827.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="658.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.21%)</title><rect x="657.6" y="1843.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="657.6" y="1827.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="657.6" y="1811.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="657.6" y="1795.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.21%)</title><rect x="657.6" y="1779.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.6" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="660.1" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.21%)</title><rect x="661.0" y="1875.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="662.7" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="665.7" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="662.7" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.7" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="662.7" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="665.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.21%)</title><rect x="663.5" y="1875.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="664.3" y="1859.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="666.0" y="1875.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.29%)</title><rect x="666.0" y="1859.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="669.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.07%)</title><rect x="669.4" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="672.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="669.4" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/933694666.get$Lambda (1 samples, 0.07%)</title><rect x="669.4" y="1843.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="672.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.36%)</title><rect x="670.2" y="1875.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.36%)</title><rect x="670.2" y="1859.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.2" y="1870.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="670.2" y="1843.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="673.2" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.21%)</title><rect x="671.9" y="1843.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="674.4" y="1875.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="675.3" y="1859.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.3" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.21%)</title><rect x="676.1" y="1875.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="679.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="677.8" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.14%)</title><rect x="678.6" y="1875.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 0.93%)</title><rect x="681.2" y="1859.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.93%)</title><rect x="681.2" y="1843.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.2" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="681.2" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.2" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="681.2" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="681.2" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="684.2" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="681.2" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="684.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.64%)</title><rect x="682.0" y="1827.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="685.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.64%)</title><rect x="682.0" y="1811.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 0.64%)</title><rect x="682.0" y="1795.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="685.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/933694666.accept (5 samples, 0.36%)</title><rect x="683.7" y="1779.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.7" y="1790.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="687.9" y="1779.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="690.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.21%)</title><rect x="689.6" y="1827.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/933694666.accept (2 samples, 0.14%)</title><rect x="690.4" y="1811.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (2 samples, 0.14%)</title><rect x="690.4" y="1795.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="692.1" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.1" y="1918.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="692.1" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.1" y="1902.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="692.1" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="695.1" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="692.1" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="692.1" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="695.1" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="692.1" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="695.1" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="692.1" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="695.1" y="1822.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="692.1" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="695.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.57%)</title><rect x="692.9" y="1907.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.57%)</title><rect x="692.9" y="1891.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="695.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.57%)</title><rect x="692.9" y="1875.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.9" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.36%)</title><rect x="692.9" y="1859.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.29%)</title><rect x="692.9" y="1843.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.29%)</title><rect x="692.9" y="1827.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.9" y="1838.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="694.6" y="1811.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="697.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="696.3" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="699.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.21%)</title><rect x="697.1" y="1859.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$301/1157829317.accept (3 samples, 0.21%)</title><rect x="697.1" y="1843.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (3 samples, 0.21%)</title><rect x="697.1" y="1827.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.21%)</title><rect x="697.1" y="1811.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.1" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.21%)</title><rect x="697.1" y="1795.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.1" y="1806.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.21%)</title><rect x="697.1" y="1779.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.1" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="697.1" y="1763.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="700.1" y="1774.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="698.0" y="1747.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="701.0" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="699.7" y="1923.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="702.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="699.7" y="1907.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="702.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.29%)</title><rect x="701.3" y="1987.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.3" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.29%)</title><rect x="701.3" y="1971.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.3" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.29%)</title><rect x="701.3" y="1955.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="704.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.29%)</title><rect x="701.3" y="1939.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (225 samples, 16.04%)</title><rect x="704.7" y="1987.0" width="189.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="707.7" y="1998.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (221 samples, 15.75%)</title><rect x="707.2" y="1971.0" width="185.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.2" y="1982.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 13.11%)</title><rect x="737.5" y="1955.0" width="154.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.5" y="1966.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (176 samples, 12.54%)</title><rect x="744.2" y="1939.0" width="148.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="747.2" y="1950.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (166 samples, 11.83%)</title><rect x="752.7" y="1923.0" width="139.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.7" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="756.0" y="1907.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="759.0" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="756.9" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="759.9" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="757.7" y="1907.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="760.7" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (156 samples, 11.12%)</title><rect x="758.5" y="1907.0" width="131.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="761.5" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="761.9" y="1891.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="764.9" y="1902.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="763.6" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="766.6" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="764.4" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="767.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 2.14%)</title><rect x="765.3" y="1891.0" width="25.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="768.3" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.71%)</title><rect x="772.0" y="1875.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.29%)</title><rect x="772.0" y="1859.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.14%)</title><rect x="773.7" y="1843.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.7" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="775.4" y="1859.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.4" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.29%)</title><rect x="777.0" y="1859.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="780.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="780.4" y="1875.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (10 samples, 0.71%)</title><rect x="782.1" y="1875.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="785.1" y="1886.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.07%)</title><rect x="789.7" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="792.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="789.7" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="792.7" y="1854.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="789.7" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="792.7" y="1838.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="789.7" y="1811.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="792.7" y="1822.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="790.5" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="793.5" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="791.3" y="1891.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.3" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="793.0" y="1891.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="796.0" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.57%)</title><rect x="793.9" y="1891.0" width="6.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="796.9" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.42%)</title><rect x="800.6" y="1891.0" width="28.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="803.6" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 3.64%)</title><rect x="829.2" y="1891.0" width="42.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="832.2" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.29%)</title><rect x="872.1" y="1891.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="875.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.14%)</title><rect x="875.4" y="1891.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="878.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.14%)</title><rect x="877.1" y="1891.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="880.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="878.8" y="1891.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="881.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.43%)</title><rect x="879.7" y="1891.0" width="5.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="882.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.21%)</title><rect x="884.7" y="1891.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.7" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.21%)</title><rect x="887.2" y="1891.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.21%)</title><rect x="889.7" y="1907.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="892.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="892.3" y="1955.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="895.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="892.3" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="895.3" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="892.3" y="1923.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="895.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.07%)</title><rect x="893.1" y="1971.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.14%)</title><rect x="893.9" y="2035.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="896.9" y="2046.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.07%)</title><rect x="893.9" y="2019.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.9" y="2030.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.07%)</title><rect x="893.9" y="2003.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="896.9" y="2014.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.07%)</title><rect x="893.9" y="1987.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.9" y="1998.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="893.9" y="1971.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="894.8" y="2019.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.8" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="894.8" y="2003.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.8" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="894.8" y="1987.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="894.8" y="1971.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="897.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="894.8" y="1955.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="897.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="894.8" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.07%)</title><rect x="894.8" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.07%)</title><rect x="894.8" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="897.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.07%)</title><rect x="894.8" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.07%)</title><rect x="894.8" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.07%)</title><rect x="894.8" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="897.8" y="1870.0"></text>
</g>
<g>
<title>start_thread (350 samples, 24.95%)</title><rect x="895.6" y="2035.0" width="294.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="898.6" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (350 samples, 24.95%)</title><rect x="895.6" y="2019.0" width="294.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="898.6" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.50%)</title><rect x="895.6" y="2003.0" width="17.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.6" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.29%)</title><rect x="896.5" y="1987.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.29%)</title><rect x="896.5" y="1971.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.5" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="896.5" y="1955.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="899.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="897.3" y="1955.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="900.3" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.07%)</title><rect x="899.8" y="1987.0" width="12.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.8" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.43%)</title><rect x="899.8" y="1971.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.8" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="899.8" y="1955.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="902.8" y="1966.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.07%)</title><rect x="900.7" y="1955.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.7" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.21%)</title><rect x="901.5" y="1955.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="904.0" y="1955.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="907.0" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.21%)</title><rect x="904.9" y="1971.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.9" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="904.9" y="1955.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.9" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="904.9" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.9" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="904.9" y="1923.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="907.9" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="904.9" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="907.9" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="905.7" y="1955.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="908.7" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.14%)</title><rect x="905.7" y="1939.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="908.7" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.43%)</title><rect x="907.4" y="1971.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.43%)</title><rect x="907.4" y="1955.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.4" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.43%)</title><rect x="907.4" y="1939.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="910.4" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.43%)</title><rect x="907.4" y="1923.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.4" y="1934.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.07%)</title><rect x="907.4" y="1907.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="910.4" y="1918.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.36%)</title><rect x="908.2" y="1907.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.2" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.29%)</title><rect x="909.1" y="1891.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.1" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.21%)</title><rect x="909.9" y="1875.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.9" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="910.8" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.8" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="911.6" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="914.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="912.5" y="1987.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.5" y="1998.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="912.5" y="1971.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.5" y="1982.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.07%)</title><rect x="912.5" y="1955.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.5" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (327 samples, 23.31%)</title><rect x="913.3" y="2003.0" width="275.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.3" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (327 samples, 23.31%)</title><rect x="913.3" y="1987.0" width="275.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.3" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (326 samples, 23.24%)</title><rect x="913.3" y="1971.0" width="274.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.3" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (324 samples, 23.09%)</title><rect x="913.3" y="1955.0" width="272.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.3" y="1966.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (322 samples, 22.95%)</title><rect x="913.3" y="1939.0" width="270.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.3" y="1950.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (322 samples, 22.95%)</title><rect x="913.3" y="1923.0" width="270.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.3" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="913.3" y="1907.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.3" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="913.3" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.3" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="913.3" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.3" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="913.3" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.3" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="913.3" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.3" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="913.3" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.3" y="1838.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_dummy_block() (1 samples, 0.07%)</title><rect x="913.3" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="916.3" y="1822.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (133 samples, 9.48%)</title><rect x="914.1" y="1907.0" width="111.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="917.1" y="1918.0">Compile::Code..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.21%)</title><rect x="914.1" y="1891.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.14%)</title><rect x="914.1" y="1875.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.1" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="915.8" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.8" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="915.8" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.8" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.43%)</title><rect x="916.7" y="1891.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="918.3" y="1875.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="918.3" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="918.3" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.3" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.21%)</title><rect x="919.2" y="1875.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="922.2" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.21%)</title><rect x="919.2" y="1859.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="922.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (12 samples, 0.86%)</title><rect x="921.7" y="1891.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.7" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="921.7" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.7" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 0.71%)</title><rect x="922.5" y="1875.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="925.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.50%)</title><rect x="922.5" y="1859.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="925.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="928.4" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="928.4" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.4" y="1854.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.07%)</title><rect x="928.4" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.4" y="1838.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.14%)</title><rect x="929.3" y="1859.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.1" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.1" y="1822.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="930.1" y="1795.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="933.1" y="1806.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="931.0" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.0" y="1886.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="931.8" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.8" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.07%)</title><rect x="931.8" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.8" y="1886.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="931.8" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.50%)</title><rect x="932.6" y="1891.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="932.6" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.6" y="1886.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.07%)</title><rect x="932.6" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.6" y="1870.0"></text>
</g>
<g>
<title>CFGLoop::update_succ_freq(Block*, float) (1 samples, 0.07%)</title><rect x="932.6" y="1843.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.43%)</title><rect x="933.5" y="1875.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.5" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="933.5" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.5" y="1870.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="934.3" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="935.2" y="1859.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.2" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="935.2" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="936.0" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="936.8" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.07%)</title><rect x="937.7" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (104 samples, 7.41%)</title><rect x="938.5" y="1891.0" width="87.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.5" y="1902.0">PhaseChait..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="938.5" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="939.4" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.4" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (5 samples, 0.36%)</title><rect x="940.2" y="1875.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.57%)</title><rect x="944.4" y="1875.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="947.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="945.3" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (6 samples, 0.43%)</title><rect x="946.1" y="1859.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.36%)</title><rect x="946.9" y="1843.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.29%)</title><rect x="951.1" y="1875.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="952.0" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.14%)</title><rect x="952.8" y="1859.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="955.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="952.8" y="1843.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.93%)</title><rect x="954.5" y="1875.0" width="10.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.5" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="962.9" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.9" y="1870.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="963.8" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="964.6" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="964.6" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.6" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="964.6" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.6" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (21 samples, 1.50%)</title><rect x="965.4" y="1875.0" width="17.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.21%)</title><rect x="971.3" y="1859.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="973.8" y="1859.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.8" y="1870.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="975.5" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.5" y="1870.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="976.4" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.36%)</title><rect x="977.2" y="1859.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="978.9" y="1843.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="981.4" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.4" y="1870.0"></text>
</g>
<g>
<title>checkCastPPNode::rule() const (1 samples, 0.07%)</title><rect x="982.3" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.14%)</title><rect x="983.1" y="1875.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="983.9" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (13 samples, 0.93%)</title><rect x="984.8" y="1875.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.8" y="1886.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="992.4" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.4" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="993.2" y="1859.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.07%)</title><rect x="994.9" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="995.7" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="995.7" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.43%)</title><rect x="996.6" y="1875.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.29%)</title><rect x="998.2" y="1859.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 0.71%)</title><rect x="1001.6" y="1875.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.6" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 0.71%)</title><rect x="1001.6" y="1859.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="1001.6" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.6" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 0.64%)</title><rect x="1002.4" y="1843.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1005.4" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.21%)</title><rect x="1002.4" y="1827.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.4" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.36%)</title><rect x="1005.0" y="1827.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.0" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1008.3" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.3" y="1822.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1009.2" y="1827.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1012.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.29%)</title><rect x="1010.0" y="1875.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1010.9" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1011.7" y="1859.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.29%)</title><rect x="1013.4" y="1875.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1015.1" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1018.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1016.7" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1019.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1016.7" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.7" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.57%)</title><rect x="1017.6" y="1875.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1018.4" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1021.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.43%)</title><rect x="1019.3" y="1859.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.3" y="1870.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.07%)</title><rect x="1024.3" y="1875.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.3" y="1886.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1024.3" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.3" y="1870.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1025.2" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.2" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (173 samples, 12.33%)</title><rect x="1026.0" y="1907.0" width="145.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.0" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1026.0" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.0" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1026.0" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.0" y="1886.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.07%)</title><rect x="1026.0" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.0" y="1870.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1026.8" y="1891.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (10 samples, 0.71%)</title><rect x="1027.7" y="1891.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (10 samples, 0.71%)</title><rect x="1027.7" y="1875.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1027.7" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (9 samples, 0.64%)</title><rect x="1028.5" y="1859.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.57%)</title><rect x="1028.5" y="1843.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (7 samples, 0.50%)</title><rect x="1028.5" y="1827.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="1028.5" y="1811.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.5" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.14%)</title><rect x="1028.5" y="1795.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.5" y="1806.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1029.4" y="1779.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.36%)</title><rect x="1030.2" y="1811.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1033.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1731.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1033.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1715.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1033.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1667.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1651.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1635.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1033.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1619.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1587.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1571.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1555.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1539.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1523.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1507.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1491.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1475.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1459.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1033.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1427.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1411.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1033.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1033.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1379.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1033.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1363.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1347.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1283.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1267.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1235.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1033.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1033.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1123.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1033.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1043.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="947.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="931.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="899.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1033.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1033.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1033.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="851.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="835.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="819.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="787.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1030.2" y="771.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.2" y="782.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1030.2" y="755.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="1031.0" y="1795.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="1031.0" y="1779.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1763.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1747.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1731.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1699.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1683.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1667.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1651.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1635.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1619.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1603.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1587.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1571.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1555.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1539.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1031.0" y="1523.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.0" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1031.0" y="1507.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1763.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.9" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1747.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1731.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.9" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1715.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1699.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.9" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1683.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.9" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1667.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.9" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1651.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1635.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.9" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="1031.9" y="1619.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.9" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1603.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.9" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1587.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.9" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1571.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.9" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1555.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.9" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.9" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1523.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.9" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1507.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.9" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1491.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.9" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1475.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.9" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1459.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.9" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1443.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.9" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1427.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.9" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1411.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.9" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.9" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1379.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.9" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1363.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.9" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.9" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1331.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1283.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.9" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1267.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1034.9" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1251.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1235.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1187.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1027.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="963.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="915.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="883.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="819.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="803.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1031.9" y="755.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1034.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1032.7" y="1603.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1032.7" y="1587.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1032.7" y="1571.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1032.7" y="1555.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1032.7" y="1539.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.7" y="1550.0"></text>
</g>
<g>
<title>CallNode::may_modify(TypeOopPtr const*, PhaseTransform*) (1 samples, 0.07%)</title><rect x="1032.7" y="1523.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1523.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1507.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1491.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1475.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1459.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1443.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1427.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1411.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1363.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1331.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1315.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1299.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1091.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1075.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1027.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="947.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="931.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="915.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="899.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="883.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="867.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="851.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="819.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="803.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="787.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="771.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="755.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="691.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="675.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="643.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="611.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="595.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="579.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="563.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="547.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="515.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1033.6" y="499.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.6" y="510.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1033.6" y="483.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.6" y="494.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1034.4" y="1827.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1037.4" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_instance_id(int) const (1 samples, 0.07%)</title><rect x="1035.2" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.2" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1035.2" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.2" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1035.2" y="1811.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.2" y="1822.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.14%)</title><rect x="1036.1" y="1891.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.1" y="1902.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1036.1" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.1" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1036.1" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.1" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1036.1" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.1" y="1854.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1036.1" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.1" y="1838.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1036.9" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.9" y="1886.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1036.9" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.9" y="1870.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1036.9" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.9" y="1854.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1036.9" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.9" y="1838.0"></text>
</g>
<g>
<title>TypeNarrowPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1036.9" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (2 samples, 0.14%)</title><rect x="1037.8" y="1891.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1040.8" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.14%)</title><rect x="1037.8" y="1875.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1040.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (127 samples, 9.05%)</title><rect x="1039.5" y="1891.0" width="106.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.5" y="1902.0">PhaseIdealLoo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1039.5" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1042.5" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1039.5" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="1039.5" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="1039.5" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1039.5" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.5" y="1822.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1039.5" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.5" y="1806.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1040.3" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.36%)</title><rect x="1041.1" y="1875.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.1" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1043.7" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.7" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1044.5" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.50%)</title><rect x="1045.3" y="1875.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1050.4" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (103 samples, 7.34%)</title><rect x="1051.2" y="1875.0" width="86.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.2" y="1886.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (101 samples, 7.20%)</title><rect x="1052.9" y="1859.0" width="85.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.9" y="1870.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.43%)</title><rect x="1053.7" y="1843.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (94 samples, 6.70%)</title><rect x="1058.8" y="1843.0" width="79.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.8" y="1854.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.14%)</title><rect x="1114.3" y="1827.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1114.3" y="1811.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1115.1" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.1" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (23 samples, 1.64%)</title><rect x="1116.0" y="1827.0" width="19.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.21%)</title><rect x="1135.3" y="1827.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.29%)</title><rect x="1137.9" y="1875.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.29%)</title><rect x="1141.2" y="1875.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.14%)</title><rect x="1142.9" y="1859.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.07%)</title><rect x="1142.9" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_up(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1143.7" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1143.7" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1143.7" y="1811.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.7" y="1822.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1143.7" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.7" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.14%)</title><rect x="1144.6" y="1875.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.14%)</title><rect x="1144.6" y="1859.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.6" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1144.6" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.4" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.4" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1145.4" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 1.92%)</title><rect x="1146.3" y="1891.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.3" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.85%)</title><rect x="1147.1" y="1875.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.1" y="1886.0">P..</text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1147.9" y="1859.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.9" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1147.9" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="1854.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1147.9" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.9" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1147.9" y="1811.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.9" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1147.9" y="1795.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="1806.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.8" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.8" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1149.6" y="1859.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.6" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1149.6" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.6" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1149.6" y="1811.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.6" y="1822.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.5" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1151.3" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.3" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.3" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.3" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1151.3" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.3" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1152.2" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1152.2" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.2" y="1854.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1152.2" y="1827.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.2" y="1838.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.07%)</title><rect x="1152.2" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.2" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1153.0" y="1859.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.21%)</title><rect x="1154.7" y="1859.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1157.2" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (7 samples, 0.50%)</title><rect x="1158.0" y="1859.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1162.2" y="1843.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1163.1" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.9" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1163.9" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1164.8" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.8" y="1870.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.07%)</title><rect x="1164.8" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1165.6" y="1859.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="1870.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="1165.6" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.5" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1166.5" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.5" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1166.5" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="1822.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1167.3" y="1859.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.3" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.14%)</title><rect x="1167.3" y="1843.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1167.3" y="1827.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.3" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.3" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.3" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1779.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.3" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.3" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.3" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1731.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.3" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.3" y="1726.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.3" y="1699.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.3" y="1710.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1167.3" y="1683.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.3" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.1" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.1" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1168.1" y="1795.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1169.0" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.0" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1169.0" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.0" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1169.0" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.0" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.0" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1169.8" y="1891.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1169.8" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1169.8" y="1859.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.8" y="1843.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.8" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.8" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.8" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1169.8" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.7" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1170.7" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1170.7" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1170.7" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.7" y="1811.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1173.7" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.07%)</title><rect x="1171.5" y="1907.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.5" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.07%)</title><rect x="1171.5" y="1891.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.07%)</title><rect x="1171.5" y="1875.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.07%)</title><rect x="1171.5" y="1859.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.07%)</title><rect x="1171.5" y="1843.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.00%)</title><rect x="1171.5" y="1827.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.71%)</title><rect x="1171.5" y="1811.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.71%)</title><rect x="1171.5" y="1795.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.71%)</title><rect x="1171.5" y="1779.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.5" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.71%)</title><rect x="1171.5" y="1763.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.5" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.71%)</title><rect x="1171.5" y="1747.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.71%)</title><rect x="1171.5" y="1731.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.5" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1171.5" y="1715.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1171.5" y="1699.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1171.5" y="1683.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1171.5" y="1667.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1171.5" y="1651.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1171.5" y="1635.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="1646.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1171.5" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.5" y="1630.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1171.5" y="1603.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.5" y="1614.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1171.5" y="1587.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1174.5" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.3" y="1619.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.3" y="1603.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.3" y="1587.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.3" y="1571.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.3" y="1555.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.3" y="1539.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.3" y="1523.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.3" y="1507.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.3" y="1491.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.3" y="1475.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.3" y="1459.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.3" y="1443.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.3" y="1427.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.3" y="1411.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.3" y="1395.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.3" y="1379.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.3" y="1363.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.3" y="1347.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.3" y="1331.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.3" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.3" y="1299.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.3" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.3" y="1267.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.3" y="1251.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.3" y="1235.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.3" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.3" y="1203.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.3" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.3" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.3" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.3" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.3" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.3" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.3" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.3" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1172.3" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1172.3" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="1054.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1172.3" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1172.3" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="1022.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1172.3" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.3" y="1006.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.07%)</title><rect x="1172.3" y="979.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="990.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1172.3" y="963.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.3" y="974.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1172.3" y="947.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1175.3" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1173.2" y="1619.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="1630.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.2" y="1603.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.2" y="1614.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.2" y="1587.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="1598.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1173.2" y="1571.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1173.2" y="1555.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="1566.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.2" y="1539.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="1550.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.2" y="1523.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.2" y="1534.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.2" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="1518.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.2" y="1491.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1502.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1173.2" y="1475.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="1486.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.2" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="1470.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.50%)</title><rect x="1174.0" y="1715.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.0" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.50%)</title><rect x="1174.0" y="1699.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.0" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.50%)</title><rect x="1174.0" y="1683.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.50%)</title><rect x="1174.0" y="1667.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.50%)</title><rect x="1174.0" y="1651.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.50%)</title><rect x="1174.0" y="1635.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.50%)</title><rect x="1174.0" y="1619.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.0" y="1630.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.0" y="1603.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="1614.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.0" y="1587.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.0" y="1598.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.0" y="1571.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.0" y="1555.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.0" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.0" y="1539.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.0" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.0" y="1523.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.0" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.0" y="1507.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.0" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.0" y="1491.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.0" y="1502.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.07%)</title><rect x="1174.0" y="1475.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.0" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.0" y="1459.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.0" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.0" y="1443.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.0" y="1454.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.07%)</title><rect x="1174.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.0" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.43%)</title><rect x="1174.9" y="1603.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.43%)</title><rect x="1174.9" y="1587.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.43%)</title><rect x="1174.9" y="1571.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.43%)</title><rect x="1174.9" y="1555.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.43%)</title><rect x="1174.9" y="1539.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.43%)</title><rect x="1174.9" y="1523.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1174.9" y="1507.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1174.9" y="1491.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1174.9" y="1475.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.36%)</title><rect x="1174.9" y="1459.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1174.9" y="1443.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.36%)</title><rect x="1174.9" y="1427.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1174.9" y="1411.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1174.9" y="1395.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1174.9" y="1379.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1174.9" y="1363.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1174.9" y="1347.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1174.9" y="1331.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1174.9" y="1315.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1174.9" y="1299.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1174.9" y="1283.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1174.9" y="1267.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1174.9" y="1251.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.9" y="1235.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.9" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.9" y="1203.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.9" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.9" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.9" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1174.9" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="1150.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1174.9" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="1134.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1174.9" y="1107.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="1118.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="1174.9" y="1091.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1177.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1175.7" y="1235.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="1246.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1175.7" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="1230.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1175.7" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1214.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1176.5" y="1411.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.5" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1176.5" y="1395.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1176.5" y="1379.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1176.5" y="1363.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1176.5" y="1347.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1176.5" y="1331.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1176.5" y="1315.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1176.5" y="1299.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1176.5" y="1283.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1176.5" y="1267.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1176.5" y="1251.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1176.5" y="1235.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1176.5" y="1219.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="1230.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1176.5" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="1214.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1176.5" y="1187.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="1198.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.07%)</title><rect x="1176.5" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="1182.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1176.5" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="1166.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1176.5" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1176.5" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.5" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1176.5" y="1107.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1179.5" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.4" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.4" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.4" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.4" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.4" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.4" y="1123.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.4" y="1107.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.4" y="1091.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.4" y="1075.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.4" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.4" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.4" y="1027.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.4" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.4" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.4" y="979.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.4" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.4" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.4" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.4" y="915.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.4" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1177.4" y="883.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.4" y="867.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.4" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1177.4" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1177.4" y="819.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1177.4" y="803.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.07%)</title><rect x="1177.4" y="787.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="1177.4" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.2" y="1299.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.2" y="1283.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.2" y="1267.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.2" y="1251.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.2" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.2" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.2" y="1203.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.2" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.2" y="1171.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1182.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1178.2" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="1166.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1178.2" y="1139.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="1150.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.2" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1134.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.2" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="1118.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1178.2" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="1102.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="1178.2" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1178.2" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1178.2" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.2" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.2" y="1011.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.2" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1178.2" y="979.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="990.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.07%)</title><rect x="1178.2" y="963.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.1" y="1507.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1518.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.1" y="1491.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.1" y="1502.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.1" y="1475.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="1486.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1179.1" y="1459.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="1470.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1179.1" y="1443.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="1454.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1179.1" y="1427.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="1438.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1179.1" y="1411.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="1422.0"></text>
</g>
<g>
<title>BitMap::set_difference(BitMap) (1 samples, 0.07%)</title><rect x="1179.1" y="1395.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="1406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.9" y="1811.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="1822.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1179.9" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="1806.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="1779.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="1790.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.9" y="1763.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="1774.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="1747.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="1758.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="1179.9" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.7" y="1795.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.7" y="1779.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.7" y="1763.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.7" y="1747.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.7" y="1731.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.7" y="1715.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.7" y="1699.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.7" y="1683.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.7" y="1667.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.7" y="1651.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.7" y="1635.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.7" y="1619.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.7" y="1603.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.7" y="1587.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.7" y="1571.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.7" y="1555.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.7" y="1539.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.7" y="1523.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1507.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1491.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="1475.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="1459.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="1443.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="1427.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.7" y="1411.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1395.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="1379.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="1363.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="1347.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="1331.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.7" y="1315.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1299.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="1283.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="1267.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="1251.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="1235.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.7" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="1187.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="1171.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="1155.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.7" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="1059.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="1054.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.07%)</title><rect x="1180.7" y="1027.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.07%)</title><rect x="1180.7" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.07%)</title><rect x="1180.7" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.7" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="990.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1180.7" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1180.7" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1180.7" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1180.7" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1181.6" y="1523.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="1534.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.6" y="1507.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="1518.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1181.6" y="1491.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="1502.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1181.6" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="1486.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1181.6" y="1459.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1182.4" y="1619.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="1630.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1182.4" y="1603.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="1614.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1182.4" y="1587.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.4" y="1598.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.07%)</title><rect x="1182.4" y="1571.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.3" y="1827.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="1838.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1183.3" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="1822.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.3" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="1806.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.3" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="1790.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.07%)</title><rect x="1183.3" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="1774.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.14%)</title><rect x="1184.1" y="1939.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.14%)</title><rect x="1184.1" y="1923.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.14%)</title><rect x="1184.1" y="1907.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1184.1" y="1891.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.07%)</title><rect x="1184.1" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1184.1" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.07%)</title><rect x="1184.1" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.07%)</title><rect x="1184.1" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1184.1" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1184.1" y="1795.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.1" y="1779.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1184.1" y="1763.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.1" y="1747.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.1" y="1731.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="1742.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.1" y="1715.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="1726.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1184.1" y="1699.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.1" y="1683.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="1694.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.1" y="1667.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="1678.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.1" y="1651.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="1662.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.1" y="1635.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="1646.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1184.1" y="1619.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="1630.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.07%)</title><rect x="1184.1" y="1603.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="1614.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.07%)</title><rect x="1185.0" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.0" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.0" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.0" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.0" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1185.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="1854.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.14%)</title><rect x="1185.8" y="1955.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.14%)</title><rect x="1185.8" y="1939.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.14%)</title><rect x="1185.8" y="1923.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.14%)</title><rect x="1185.8" y="1907.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1186.6" y="1891.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="1902.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.5" y="1971.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.5" y="1955.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1939.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1923.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.5" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1187.5" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1187.5" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="1902.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.07%)</title><rect x="1187.5" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.5" y="1886.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.3" y="2003.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.3" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.3" y="1987.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1188.3" y="1971.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1188.3" y="1955.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1188.3" y="1939.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1923.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1907.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1188.3" y="1891.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1188.3" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="1886.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="1188.3" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="1870.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="1188.3" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="1854.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>CardTableRS::prepare_for_younger_refs_iterate(bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
</g>
</svg>
