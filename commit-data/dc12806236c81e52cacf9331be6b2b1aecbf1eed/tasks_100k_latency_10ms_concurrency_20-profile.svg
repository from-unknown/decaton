<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (352 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.28%)</title><rect x="10.0" y="899.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>zeroes (1 samples, 0.28%)</title><rect x="10.0" y="883.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.28%)</title><rect x="10.0" y="867.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>_IO_no_init (1 samples, 0.28%)</title><rect x="10.0" y="851.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 6.82%)</title><rect x="13.4" y="899.0" width="80.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.4" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (24 samples, 6.82%)</title><rect x="13.4" y="883.0" width="80.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (23 samples, 6.53%)</title><rect x="16.7" y="867.0" width="77.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="878.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.57%)</title><rect x="16.7" y="851.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.28%)</title><rect x="16.7" y="835.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.28%)</title><rect x="16.7" y="819.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.28%)</title><rect x="20.1" y="835.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.28%)</title><rect x="20.1" y="819.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.28%)</title><rect x="20.1" y="803.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.28%)</title><rect x="20.1" y="787.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.1" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.28%)</title><rect x="20.1" y="771.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="20.1" y="755.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.28%)</title><rect x="23.4" y="851.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.28%)</title><rect x="23.4" y="835.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.28%)</title><rect x="23.4" y="819.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/308888466.accept (1 samples, 0.28%)</title><rect x="23.4" y="803.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.28%)</title><rect x="23.4" y="787.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.28%)</title><rect x="23.4" y="771.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.27%)</title><rect x="26.8" y="851.0" width="26.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.8" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1018061280.accept (7 samples, 1.99%)</title><rect x="26.8" y="835.0" width="23.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.8" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (7 samples, 1.99%)</title><rect x="26.8" y="819.0" width="23.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.8" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.28%)</title><rect x="26.8" y="803.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 0.85%)</title><rect x="30.1" y="803.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.85%)</title><rect x="30.1" y="787.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.85%)</title><rect x="30.1" y="771.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.85%)</title><rect x="30.1" y="755.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.85%)</title><rect x="30.1" y="739.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.85%)</title><rect x="30.1" y="723.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.28%)</title><rect x="40.2" y="803.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.28%)</title><rect x="40.2" y="787.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.28%)</title><rect x="43.5" y="803.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="43.5" y="787.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="43.5" y="771.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.28%)</title><rect x="46.9" y="803.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.28%)</title><rect x="46.9" y="787.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.28%)</title><rect x="46.9" y="771.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.28%)</title><rect x="46.9" y="755.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.28%)</title><rect x="46.9" y="739.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.9" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="50.2" y="835.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="53.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.41%)</title><rect x="53.6" y="851.0" width="40.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.6" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.41%)</title><rect x="53.6" y="835.0" width="40.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.6" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.70%)</title><rect x="53.6" y="819.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.85%)</title><rect x="53.6" y="803.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.85%)</title><rect x="53.6" y="787.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="53.6" y="771.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="53.6" y="755.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.28%)</title><rect x="53.6" y="739.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/134090566.shouldBlock (1 samples, 0.28%)</title><rect x="56.9" y="771.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.28%)</title><rect x="56.9" y="755.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.28%)</title><rect x="56.9" y="739.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.28%)</title><rect x="56.9" y="723.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="56.9" y="707.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="56.9" y="691.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="56.9" y="675.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="56.9" y="659.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="56.9" y="643.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.28%)</title><rect x="56.9" y="627.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.28%)</title><rect x="56.9" y="611.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.28%)</title><rect x="56.9" y="595.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.28%)</title><rect x="60.3" y="771.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.57%)</title><rect x="63.6" y="803.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.57%)</title><rect x="63.6" y="787.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.57%)</title><rect x="63.6" y="771.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.57%)</title><rect x="63.6" y="755.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.28%)</title><rect x="63.6" y="739.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.28%)</title><rect x="67.0" y="739.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.28%)</title><rect x="67.0" y="723.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.28%)</title><rect x="67.0" y="707.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.0" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.28%)</title><rect x="67.0" y="691.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.28%)</title><rect x="70.3" y="803.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.28%)</title><rect x="70.3" y="787.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.28%)</title><rect x="70.3" y="771.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.3" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.28%)</title><rect x="70.3" y="755.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.28%)</title><rect x="70.3" y="739.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.3" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.28%)</title><rect x="70.3" y="723.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.85%)</title><rect x="73.7" y="819.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.85%)</title><rect x="73.7" y="803.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.85%)</title><rect x="73.7" y="787.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.57%)</title><rect x="73.7" y="771.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.57%)</title><rect x="73.7" y="755.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.7" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.57%)</title><rect x="73.7" y="739.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.57%)</title><rect x="73.7" y="723.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.57%)</title><rect x="73.7" y="707.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="77.0" y="691.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.28%)</title><rect x="77.0" y="675.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.28%)</title><rect x="80.4" y="771.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.28%)</title><rect x="80.4" y="755.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="80.4" y="739.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="80.4" y="723.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="80.4" y="707.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.28%)</title><rect x="83.8" y="819.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="83.8" y="803.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="83.8" y="787.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="83.8" y="771.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="83.8" y="755.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.28%)</title><rect x="83.8" y="739.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.28%)</title><rect x="83.8" y="723.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="86.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.28%)</title><rect x="83.8" y="707.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.28%)</title><rect x="83.8" y="691.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.28%)</title><rect x="83.8" y="675.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.28%)</title><rect x="83.8" y="659.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.28%)</title><rect x="83.8" y="643.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.write (1 samples, 0.28%)</title><rect x="83.8" y="627.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.8" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.28%)</title><rect x="83.8" y="611.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.28%)</title><rect x="83.8" y="595.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.57%)</title><rect x="87.1" y="819.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.28%)</title><rect x="90.5" y="803.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.28%)</title><rect x="90.5" y="787.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/1074020579.accept (1 samples, 0.28%)</title><rect x="90.5" y="771.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.28%)</title><rect x="90.5" y="755.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.28%)</title><rect x="90.5" y="739.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.28%)</title><rect x="90.5" y="723.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (276 samples, 78.41%)</title><rect x="93.8" y="899.0" width="925.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.8" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (276 samples, 78.41%)</title><rect x="93.8" y="883.0" width="925.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.8" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (276 samples, 78.41%)</title><rect x="93.8" y="867.0" width="925.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.8" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/167079244.run (259 samples, 73.58%)</title><rect x="107.2" y="851.0" width="868.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.2" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/167079244.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (259 samples, 73.58%)</title><rect x="107.2" y="835.0" width="868.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.2" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (259 samples, 73.58%)</title><rect x="107.2" y="819.0" width="868.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.2" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (258 samples, 73.30%)</title><rect x="107.2" y="803.0" width="864.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.2" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.85%)</title><rect x="117.3" y="787.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.85%)</title><rect x="117.3" y="771.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.85%)</title><rect x="117.3" y="755.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.57%)</title><rect x="117.3" y="739.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="124.0" y="739.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 4.55%)</title><rect x="127.3" y="787.0" width="53.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.3" y="798.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.99%)</title><rect x="157.5" y="771.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.99%)</title><rect x="157.5" y="755.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.99%)</title><rect x="157.5" y="739.0" width="23.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.5" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.28%)</title><rect x="157.5" y="723.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.28%)</title><rect x="157.5" y="707.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.28%)</title><rect x="157.5" y="691.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/449980333.accept (1 samples, 0.28%)</title><rect x="157.5" y="675.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.70%)</title><rect x="160.9" y="723.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/449980333.accept (6 samples, 1.70%)</title><rect x="160.9" y="707.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (6 samples, 1.70%)</title><rect x="160.9" y="691.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 1.70%)</title><rect x="160.9" y="675.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 1.70%)</title><rect x="160.9" y="659.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 1.70%)</title><rect x="160.9" y="643.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.85%)</title><rect x="160.9" y="627.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.85%)</title><rect x="160.9" y="611.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/570239638.accept (3 samples, 0.85%)</title><rect x="160.9" y="595.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.85%)</title><rect x="170.9" y="627.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (50 samples, 14.20%)</title><rect x="181.0" y="787.0" width="167.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.0" y="798.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (50 samples, 14.20%)</title><rect x="181.0" y="771.0" width="167.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.0" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (50 samples, 14.20%)</title><rect x="181.0" y="755.0" width="167.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.0" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 14.20%)</title><rect x="181.0" y="739.0" width="167.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.0" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 14.20%)</title><rect x="181.0" y="723.0" width="167.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.0" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (50 samples, 14.20%)</title><rect x="181.0" y="707.0" width="167.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.0" y="718.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 3.69%)</title><rect x="181.0" y="691.0" width="43.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.0" y="702.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 1.70%)</title><rect x="181.0" y="675.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.70%)</title><rect x="181.0" y="659.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.99%)</title><rect x="201.1" y="675.0" width="23.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.1" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 1.99%)</title><rect x="201.1" y="659.0" width="23.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.1" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.28%)</title><rect x="204.4" y="643.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.57%)</title><rect x="207.8" y="643.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.57%)</title><rect x="207.8" y="627.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.57%)</title><rect x="207.8" y="611.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.85%)</title><rect x="214.5" y="643.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.28%)</title><rect x="221.2" y="627.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.2" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="221.2" y="611.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="224.2" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="221.2" y="595.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="224.2" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="221.2" y="579.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="224.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="221.2" y="563.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="224.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.28%)</title><rect x="221.2" y="547.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="224.2" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.28%)</title><rect x="221.2" y="531.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="224.2" y="542.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.28%)</title><rect x="221.2" y="515.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="224.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (32 samples, 9.09%)</title><rect x="224.5" y="691.0" width="107.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.5" y="702.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.28%)</title><rect x="224.5" y="675.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.28%)</title><rect x="224.5" y="659.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.57%)</title><rect x="227.9" y="675.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.57%)</title><rect x="227.9" y="659.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.28%)</title><rect x="227.9" y="643.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.28%)</title><rect x="231.2" y="643.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.85%)</title><rect x="234.6" y="675.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.85%)</title><rect x="234.6" y="659.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.85%)</title><rect x="234.6" y="643.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="241.3" y="627.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.85%)</title><rect x="244.7" y="675.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.57%)</title><rect x="244.7" y="659.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.28%)</title><rect x="251.4" y="659.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (23 samples, 6.53%)</title><rect x="254.7" y="675.0" width="77.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.7" y="686.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.28%)</title><rect x="254.7" y="659.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (22 samples, 6.25%)</title><rect x="258.1" y="659.0" width="73.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.1" y="670.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (1 samples, 0.28%)</title><rect x="261.4" y="643.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 2.56%)</title><rect x="264.8" y="643.0" width="30.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.8" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.85%)</title><rect x="264.8" y="627.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.85%)</title><rect x="264.8" y="611.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.85%)</title><rect x="264.8" y="595.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.85%)</title><rect x="264.8" y="579.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.28%)</title><rect x="271.5" y="563.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.42%)</title><rect x="274.8" y="627.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.57%)</title><rect x="274.8" y="611.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.28%)</title><rect x="278.2" y="595.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.85%)</title><rect x="281.5" y="611.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.85%)</title><rect x="281.5" y="595.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.85%)</title><rect x="281.5" y="579.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.85%)</title><rect x="281.5" y="563.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="291.6" y="627.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="291.6" y="611.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.13%)</title><rect x="294.9" y="643.0" width="36.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.9" y="654.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.28%)</title><rect x="294.9" y="627.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 2.84%)</title><rect x="298.3" y="627.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.3" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 2.84%)</title><rect x="298.3" y="611.0" width="33.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.3" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.57%)</title><rect x="298.3" y="595.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.57%)</title><rect x="298.3" y="579.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.57%)</title><rect x="298.3" y="563.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.57%)</title><rect x="298.3" y="547.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.28%)</title><rect x="305.0" y="595.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.28%)</title><rect x="305.0" y="579.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.28%)</title><rect x="305.0" y="563.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.28%)</title><rect x="305.0" y="547.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.28%)</title><rect x="305.0" y="531.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.57%)</title><rect x="308.4" y="595.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.57%)</title><rect x="308.4" y="579.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.57%)</title><rect x="308.4" y="563.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.57%)</title><rect x="308.4" y="547.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="308.4" y="531.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.4" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.28%)</title><rect x="311.7" y="531.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.7" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.28%)</title><rect x="311.7" y="515.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.7" y="526.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.28%)</title><rect x="311.7" y="499.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.57%)</title><rect x="315.1" y="595.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.57%)</title><rect x="315.1" y="579.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.57%)</title><rect x="315.1" y="563.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="318.4" y="547.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.85%)</title><rect x="321.8" y="595.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.42%)</title><rect x="331.8" y="691.0" width="16.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.42%)</title><rect x="331.8" y="675.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.42%)</title><rect x="331.8" y="659.0" width="16.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.28%)</title><rect x="335.2" y="643.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.28%)</title><rect x="338.5" y="643.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.57%)</title><rect x="341.9" y="643.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.57%)</title><rect x="341.9" y="627.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (185 samples, 52.56%)</title><rect x="348.6" y="787.0" width="620.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.6" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="425.7" y="771.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="428.7" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="425.7" y="755.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="428.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (31 samples, 8.81%)</title><rect x="429.0" y="771.0" width="104.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.0" y="782.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.28%)</title><rect x="449.1" y="755.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="452.1" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 6.82%)</title><rect x="452.5" y="755.0" width="80.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.5" y="766.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (23 samples, 6.53%)</title><rect x="455.9" y="739.0" width="77.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.9" y="750.0">ch/qos/lo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="455.9" y="723.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="455.9" y="707.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="455.9" y="691.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="455.9" y="675.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.28%)</title><rect x="455.9" y="659.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.9" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (22 samples, 6.25%)</title><rect x="459.2" y="723.0" width="73.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.2" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 2.84%)</title><rect x="499.4" y="707.0" width="33.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.4" y="718.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.42%)</title><rect x="516.2" y="691.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="533.0" y="771.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="536.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="533.0" y="755.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (26 samples, 7.39%)</title><rect x="536.3" y="771.0" width="87.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.3" y="782.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (25 samples, 7.10%)</title><rect x="536.3" y="755.0" width="83.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.3" y="766.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 4.26%)</title><rect x="539.7" y="739.0" width="50.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="542.7" y="750.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.84%)</title><rect x="543.0" y="723.0" width="33.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.0" y="734.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.70%)</title><rect x="549.7" y="707.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.7" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.85%)</title><rect x="556.4" y="691.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="559.4" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.85%)</title><rect x="556.4" y="675.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.4" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.85%)</title><rect x="556.4" y="659.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.4" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.85%)</title><rect x="556.4" y="643.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="559.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.85%)</title><rect x="556.4" y="627.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="559.4" y="638.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.28%)</title><rect x="556.4" y="611.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="559.4" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="559.8" y="611.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="562.8" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="563.1" y="611.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.1" y="622.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.28%)</title><rect x="563.1" y="595.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="566.1" y="606.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.28%)</title><rect x="563.1" y="579.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.1" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="566.5" y="691.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="569.5" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.57%)</title><rect x="569.8" y="707.0" width="6.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="572.8" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 1.14%)</title><rect x="576.5" y="723.0" width="13.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="579.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.28%)</title><rect x="589.9" y="739.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.28%)</title><rect x="589.9" y="723.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="589.9" y="707.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.9" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.27%)</title><rect x="593.3" y="739.0" width="26.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.3" y="750.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.27%)</title><rect x="593.3" y="723.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.3" y="734.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.27%)</title><rect x="593.3" y="707.0" width="26.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.3" y="718.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 1.99%)</title><rect x="596.6" y="691.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.6" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.14%)</title><rect x="606.7" y="675.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.28%)</title><rect x="610.1" y="659.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="613.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.57%)</title><rect x="613.4" y="659.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.28%)</title><rect x="620.1" y="755.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.28%)</title><rect x="620.1" y="739.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="620.1" y="723.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="620.1" y="707.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="623.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (98 samples, 27.84%)</title><rect x="623.5" y="771.0" width="328.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.5" y="782.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (98 samples, 27.84%)</title><rect x="623.5" y="755.0" width="328.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.5" y="766.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/906853483.process (75 samples, 21.31%)</title><rect x="633.5" y="739.0" width="251.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="636.5" y="750.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (75 samples, 21.31%)</title><rect x="633.5" y="723.0" width="251.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.5" y="734.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (75 samples, 21.31%)</title><rect x="633.5" y="707.0" width="251.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.5" y="718.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (7 samples, 1.99%)</title><rect x="643.6" y="691.0" width="23.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.6" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (7 samples, 1.99%)</title><rect x="643.6" y="675.0" width="23.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="646.6" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 1.99%)</title><rect x="643.6" y="659.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.6" y="670.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 1.99%)</title><rect x="643.6" y="643.0" width="23.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="646.6" y="654.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (6 samples, 1.70%)</title><rect x="646.9" y="627.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (6 samples, 1.70%)</title><rect x="646.9" y="611.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (64 samples, 18.18%)</title><rect x="667.0" y="691.0" width="214.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.0" y="702.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (62 samples, 17.61%)</title><rect x="670.4" y="675.0" width="207.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.4" y="686.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (57 samples, 16.19%)</title><rect x="677.1" y="659.0" width="191.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="680.1" y="670.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.57%)</title><rect x="703.9" y="643.0" width="6.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="706.9" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.85%)</title><rect x="710.6" y="643.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.6" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.28%)</title><rect x="720.7" y="643.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.7" y="654.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (43 samples, 12.22%)</title><rect x="724.0" y="643.0" width="144.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="727.0" y="654.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.14%)</title><rect x="747.5" y="627.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="750.5" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="757.6" y="611.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.6" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="760.9" y="627.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="763.9" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="760.9" y="611.0" width="3.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="763.9" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.14%)</title><rect x="764.3" y="627.0" width="13.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="767.3" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.28%)</title><rect x="777.7" y="627.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="780.7" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 3.98%)</title><rect x="781.0" y="627.0" width="47.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="784.0" y="638.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.57%)</title><rect x="828.0" y="627.0" width="6.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="831.0" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.57%)</title><rect x="834.7" y="627.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="837.7" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.85%)</title><rect x="841.4" y="627.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="844.4" y="638.0"></text>
</g>
<g>
<title>pthread_getspecific (5 samples, 1.42%)</title><rect x="851.4" y="627.0" width="16.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="854.4" y="638.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="868.2" y="659.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.2" y="670.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.28%)</title><rect x="871.5" y="659.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="874.5" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="874.9" y="659.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.9" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="878.2" y="675.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="881.2" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="878.2" y="659.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="881.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.28%)</title><rect x="881.6" y="691.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="884.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.57%)</title><rect x="884.9" y="739.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="887.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="891.6" y="739.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="894.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="891.6" y="723.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="894.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.14%)</title><rect x="895.0" y="739.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="898.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.14%)</title><rect x="895.0" y="723.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.0" y="734.0"></text>
</g>
<g>
<title>itable stub (4 samples, 1.14%)</title><rect x="895.0" y="707.0" width="13.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="898.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="908.4" y="739.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="911.4" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="908.4" y="723.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="911.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.99%)</title><rect x="911.8" y="739.0" width="23.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="914.8" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.85%)</title><rect x="925.2" y="723.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="928.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.85%)</title><rect x="925.2" y="707.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.57%)</title><rect x="925.2" y="691.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.57%)</title><rect x="925.2" y="675.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.57%)</title><rect x="925.2" y="659.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.2" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="928.5" y="643.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="931.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.28%)</title><rect x="931.9" y="691.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/587107709.accept (1 samples, 0.28%)</title><rect x="931.9" y="675.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="934.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.28%)</title><rect x="931.9" y="659.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="934.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (5 samples, 1.42%)</title><rect x="935.2" y="739.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.42%)</title><rect x="952.0" y="771.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.42%)</title><rect x="952.0" y="755.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.42%)</title><rect x="952.0" y="739.0" width="16.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="955.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.14%)</title><rect x="952.0" y="723.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="955.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.14%)</title><rect x="952.0" y="707.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="955.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.14%)</title><rect x="952.0" y="691.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/17829467.accept (2 samples, 0.57%)</title><rect x="955.3" y="675.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="958.3" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="962.0" y="675.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="965.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.28%)</title><rect x="965.4" y="723.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="968.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/17829467.accept (1 samples, 0.28%)</title><rect x="965.4" y="707.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="968.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.28%)</title><rect x="965.4" y="691.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="968.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.28%)</title><rect x="965.4" y="675.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="968.4" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.28%)</title><rect x="965.4" y="659.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="968.4" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.28%)</title><rect x="965.4" y="643.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.4" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="968.8" y="787.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.8" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="968.8" y="771.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="971.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.28%)</title><rect x="972.1" y="803.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="975.1" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.28%)</title><rect x="972.1" y="787.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="975.1" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.28%)</title><rect x="972.1" y="771.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="972.1" y="755.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="972.1" y="739.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="975.1" y="750.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.28%)</title><rect x="972.1" y="723.0" width="3.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="975.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.28%)</title><rect x="975.5" y="851.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="978.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.28%)</title><rect x="978.8" y="851.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="981.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="978.8" y="835.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="981.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.28%)</title><rect x="978.8" y="819.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="981.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.28%)</title><rect x="978.8" y="803.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="981.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.28%)</title><rect x="978.8" y="787.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="981.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.13%)</title><rect x="982.2" y="851.0" width="36.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="985.2" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 2.84%)</title><rect x="985.5" y="835.0" width="33.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="988.5" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.85%)</title><rect x="1005.6" y="819.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1008.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.85%)</title><rect x="1005.6" y="803.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1008.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.28%)</title><rect x="1015.7" y="819.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1018.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.28%)</title><rect x="1015.7" y="803.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1018.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.28%)</title><rect x="1015.7" y="787.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1018.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.85%)</title><rect x="1019.0" y="899.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Object.wait (3 samples, 0.85%)</title><rect x="1019.0" y="883.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.0" y="894.0"></text>
</g>
<g>
<title>JVM_MonitorWait (3 samples, 0.85%)</title><rect x="1019.0" y="867.0" width="10.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1022.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (3 samples, 0.85%)</title><rect x="1019.0" y="851.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.0" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.28%)</title><rect x="1019.0" y="835.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1022.0" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.28%)</title><rect x="1022.4" y="835.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.4" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="1025.7" y="835.0" width="3.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1028.7" y="846.0"></text>
</g>
<g>
<title>start_thread (48 samples, 13.64%)</title><rect x="1029.1" y="899.0" width="160.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1032.1" y="910.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (48 samples, 13.64%)</title><rect x="1029.1" y="883.0" width="160.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1032.1" y="894.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 5.11%)</title><rect x="1029.1" y="867.0" width="60.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1032.1" y="878.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.28%)</title><rect x="1029.1" y="851.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.1" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.28%)</title><rect x="1029.1" y="835.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.1" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.28%)</title><rect x="1029.1" y="819.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1032.1" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 4.83%)</title><rect x="1032.4" y="851.0" width="57.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.4" y="862.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 3.98%)</title><rect x="1032.4" y="835.0" width="47.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.4" y="846.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 3.98%)</title><rect x="1032.4" y="819.0" width="47.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.4" y="830.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.99%)</title><rect x="1045.9" y="803.0" width="23.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.9" y="814.0">G..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.28%)</title><rect x="1055.9" y="787.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.9" y="798.0"></text>
</g>
<g>
<title>G1DefaultAllocator::survivor_gc_alloc_region(unsigned char) (1 samples, 0.28%)</title><rect x="1055.9" y="771.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.85%)</title><rect x="1059.3" y="787.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.3" y="798.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.28%)</title><rect x="1069.3" y="803.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.3" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.57%)</title><rect x="1072.7" y="803.0" width="6.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1075.7" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.85%)</title><rect x="1079.4" y="835.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.4" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="1079.4" y="819.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.4" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1079.4" y="803.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.28%)</title><rect x="1079.4" y="787.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.4" y="798.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.28%)</title><rect x="1079.4" y="771.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.4" y="782.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.28%)</title><rect x="1079.4" y="755.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.4" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.57%)</title><rect x="1082.7" y="819.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.7" y="830.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.57%)</title><rect x="1082.7" y="803.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (29 samples, 8.24%)</title><rect x="1089.4" y="867.0" width="97.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.4" y="878.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (29 samples, 8.24%)</title><rect x="1089.4" y="851.0" width="97.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.4" y="862.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (29 samples, 8.24%)</title><rect x="1089.4" y="835.0" width="97.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.4" y="846.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (28 samples, 7.95%)</title><rect x="1089.4" y="819.0" width="93.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.4" y="830.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (26 samples, 7.39%)</title><rect x="1089.4" y="803.0" width="87.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.4" y="814.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (26 samples, 7.39%)</title><rect x="1089.4" y="787.0" width="87.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.4" y="798.0">Compile::C..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.28%)</title><rect x="1089.4" y="771.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.4" y="782.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.28%)</title><rect x="1089.4" y="755.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.4" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1089.4" y="739.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1089.4" y="723.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1089.4" y="707.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1089.4" y="691.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1089.4" y="675.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1089.4" y="659.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.4" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.28%)</title><rect x="1089.4" y="643.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.4" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1089.4" y="627.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1089.4" y="611.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1089.4" y="595.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.4" y="606.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1089.4" y="579.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.4" y="590.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.28%)</title><rect x="1089.4" y="563.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.4" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.28%)</title><rect x="1089.4" y="547.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.4" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.28%)</title><rect x="1089.4" y="531.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.4" y="542.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.28%)</title><rect x="1089.4" y="515.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.4" y="526.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.28%)</title><rect x="1089.4" y="499.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.4" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (15 samples, 4.26%)</title><rect x="1092.8" y="771.0" width="50.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.8" y="782.0">Compi..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.28%)</title><rect x="1092.8" y="755.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.8" y="766.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.28%)</title><rect x="1092.8" y="739.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.8" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.57%)</title><rect x="1096.1" y="755.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.57%)</title><rect x="1096.1" y="739.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.1" y="750.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.28%)</title><rect x="1099.5" y="723.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.28%)</title><rect x="1102.8" y="755.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.28%)</title><rect x="1102.8" y="739.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.8" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1102.8" y="723.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 3.13%)</title><rect x="1106.2" y="755.0" width="36.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.2" y="766.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.28%)</title><rect x="1106.2" y="739.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.2" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.28%)</title><rect x="1106.2" y="723.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.28%)</title><rect x="1109.5" y="739.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.5" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.28%)</title><rect x="1109.5" y="723.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.5" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1109.5" y="707.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.14%)</title><rect x="1112.9" y="739.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.28%)</title><rect x="1123.0" y="723.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.0" y="734.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.28%)</title><rect x="1123.0" y="707.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.28%)</title><rect x="1126.3" y="739.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.28%)</title><rect x="1129.7" y="739.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.28%)</title><rect x="1129.7" y="723.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.7" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.28%)</title><rect x="1133.0" y="739.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.0" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.28%)</title><rect x="1133.0" y="723.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.28%)</title><rect x="1133.0" y="707.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.0" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.57%)</title><rect x="1136.4" y="739.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.4" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.28%)</title><rect x="1139.7" y="723.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.7" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 1.70%)</title><rect x="1143.1" y="771.0" width="20.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 0.85%)</title><rect x="1143.1" y="755.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.28%)</title><rect x="1143.1" y="739.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.28%)</title><rect x="1146.4" y="739.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.4" y="750.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.28%)</title><rect x="1146.4" y="723.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1149.8" y="739.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.28%)</title><rect x="1149.8" y="723.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.57%)</title><rect x="1153.1" y="755.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.57%)</title><rect x="1153.1" y="739.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1153.1" y="723.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="734.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.28%)</title><rect x="1153.1" y="707.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1156.5" y="723.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.28%)</title><rect x="1156.5" y="707.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="691.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="675.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="659.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="643.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="627.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="611.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="595.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1156.5" y="579.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.5" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="563.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.5" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.28%)</title><rect x="1159.8" y="755.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.8" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.28%)</title><rect x="1159.8" y="739.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.8" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.28%)</title><rect x="1159.8" y="723.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1163.2" y="771.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1163.2" y="755.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1163.2" y="739.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1163.2" y="723.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1163.2" y="707.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1163.2" y="691.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="675.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="659.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="643.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="627.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="611.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1163.2" y="595.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="579.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="563.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="547.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="531.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="515.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1163.2" y="499.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="510.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.28%)</title><rect x="1163.2" y="483.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.28%)</title><rect x="1163.2" y="467.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="478.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.28%)</title><rect x="1163.2" y="451.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="462.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.28%)</title><rect x="1163.2" y="435.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="446.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.28%)</title><rect x="1163.2" y="419.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="499.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="483.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="467.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="451.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="435.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="419.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="403.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="387.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="371.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="355.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="339.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="323.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="307.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="291.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="275.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="259.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="243.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="227.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1166.5" y="211.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1166.5" y="195.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.28%)</title><rect x="1166.5" y="179.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1166.5" y="163.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1166.5" y="147.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="158.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1166.5" y="131.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="142.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.28%)</title><rect x="1166.5" y="115.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1166.5" y="99.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1166.5" y="83.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.28%)</title><rect x="1166.5" y="67.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1166.5" y="51.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="62.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.28%)</title><rect x="1166.5" y="35.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1169.9" y="675.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1169.9" y="659.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1169.9" y="643.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1169.9" y="627.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1169.9" y="611.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1169.9" y="595.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1169.9" y="579.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1169.9" y="563.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1169.9" y="547.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1169.9" y="531.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1169.9" y="515.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1169.9" y="499.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1169.9" y="483.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1169.9" y="467.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1169.9" y="451.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.28%)</title><rect x="1169.9" y="435.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.28%)</title><rect x="1169.9" y="419.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.28%)</title><rect x="1173.2" y="771.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="782.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.28%)</title><rect x="1173.2" y="755.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.2" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.57%)</title><rect x="1176.6" y="803.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.57%)</title><rect x="1176.6" y="787.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.57%)</title><rect x="1176.6" y="771.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.28%)</title><rect x="1176.6" y="755.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.28%)</title><rect x="1176.6" y="739.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1176.6" y="723.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1176.6" y="707.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1176.6" y="691.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1176.6" y="675.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1176.6" y="659.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1176.6" y="643.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.28%)</title><rect x="1179.9" y="755.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1179.9" y="739.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.28%)</title><rect x="1179.9" y="723.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.28%)</title><rect x="1183.3" y="819.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.28%)</title><rect x="1183.3" y="803.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.28%)</title><rect x="1183.3" y="787.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.28%)</title><rect x="1183.3" y="771.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.28%)</title><rect x="1183.3" y="755.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>nmethod::flush_dependencies(BoolObjectClosure*) (1 samples, 0.28%)</title><rect x="1183.3" y="739.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::remove_dependent_nmethod(nmethod*) (1 samples, 0.28%)</title><rect x="1183.3" y="723.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.28%)</title><rect x="1186.6" y="867.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.28%)</title><rect x="1186.6" y="851.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.28%)</title><rect x="1186.6" y="835.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.28%)</title><rect x="1186.6" y="819.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.28%)</title><rect x="1186.6" y="803.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1189.6" y="814.0"></text>
</g>
</g>
</svg>
