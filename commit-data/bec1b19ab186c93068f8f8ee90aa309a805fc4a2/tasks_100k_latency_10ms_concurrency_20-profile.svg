<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (365 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 6.85%)</title><rect x="10.0" y="1251.0" width="80.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (25 samples, 6.85%)</title><rect x="10.0" y="1235.0" width="80.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 6.85%)</title><rect x="10.0" y="1219.0" width="80.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.55%)</title><rect x="10.0" y="1203.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.27%)</title><rect x="10.0" y="1187.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="10.0" y="1171.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="10.0" y="1155.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="10.0" y="1139.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="10.0" y="1123.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="10.0" y="1107.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.27%)</title><rect x="10.0" y="1091.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.27%)</title><rect x="10.0" y="1075.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.27%)</title><rect x="10.0" y="1059.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="10.0" y="1043.0" width="3.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.27%)</title><rect x="13.2" y="1187.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.27%)</title><rect x="13.2" y="1171.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2500 (1 samples, 0.27%)</title><rect x="13.2" y="1155.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.pause (1 samples, 0.27%)</title><rect x="13.2" y="1139.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.27%)</title><rect x="16.5" y="1203.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.27%)</title><rect x="16.5" y="1187.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 1.92%)</title><rect x="19.7" y="1203.0" width="22.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.7" y="1214.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/2140476004.accept (7 samples, 1.92%)</title><rect x="19.7" y="1187.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.7" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (7 samples, 1.92%)</title><rect x="19.7" y="1171.0" width="22.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.7" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.10%)</title><rect x="19.7" y="1155.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.10%)</title><rect x="19.7" y="1139.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.10%)</title><rect x="19.7" y="1123.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.10%)</title><rect x="19.7" y="1107.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.10%)</title><rect x="19.7" y="1091.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.55%)</title><rect x="26.2" y="1075.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.2" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="26.2" y="1059.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.2" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="26.2" y="1043.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="26.2" y="1027.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.2" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="26.2" y="1011.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="29.2" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.27%)</title><rect x="26.2" y="995.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="29.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.27%)</title><rect x="29.4" y="1059.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.27%)</title><rect x="29.4" y="1043.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.27%)</title><rect x="29.4" y="1027.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.27%)</title><rect x="29.4" y="1011.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.27%)</title><rect x="32.6" y="1155.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.27%)</title><rect x="32.6" y="1139.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.27%)</title><rect x="32.6" y="1123.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.27%)</title><rect x="32.6" y="1107.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.27%)</title><rect x="32.6" y="1091.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.27%)</title><rect x="32.6" y="1075.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.27%)</title><rect x="32.6" y="1059.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.27%)</title><rect x="32.6" y="1043.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.55%)</title><rect x="35.9" y="1155.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.55%)</title><rect x="35.9" y="1139.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.55%)</title><rect x="35.9" y="1123.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.11%)</title><rect x="42.3" y="1203.0" width="48.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.3" y="1214.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.11%)</title><rect x="42.3" y="1187.0" width="48.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.3" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (13 samples, 3.56%)</title><rect x="42.3" y="1171.0" width="42.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.3" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (8 samples, 2.19%)</title><rect x="42.3" y="1155.0" width="25.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.3" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (8 samples, 2.19%)</title><rect x="42.3" y="1139.0" width="25.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.3" y="1150.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.27%)</title><rect x="42.3" y="1123.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.55%)</title><rect x="45.6" y="1123.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.55%)</title><rect x="45.6" y="1107.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.27%)</title><rect x="45.6" y="1091.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.27%)</title><rect x="45.6" y="1075.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.27%)</title><rect x="45.6" y="1059.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.27%)</title><rect x="45.6" y="1043.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.6" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="45.6" y="1027.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="48.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.27%)</title><rect x="48.8" y="1091.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.27%)</title><rect x="48.8" y="1075.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.27%)</title><rect x="48.8" y="1059.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.8" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.27%)</title><rect x="48.8" y="1043.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.27%)</title><rect x="48.8" y="1027.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.27%)</title><rect x="48.8" y="1011.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.27%)</title><rect x="48.8" y="995.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.27%)</title><rect x="48.8" y="979.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/1078869299.shouldBlock (1 samples, 0.27%)</title><rect x="52.0" y="1123.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.27%)</title><rect x="52.0" y="1107.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.27%)</title><rect x="52.0" y="1091.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.27%)</title><rect x="52.0" y="1075.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="52.0" y="1059.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="52.0" y="1043.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="52.0" y="1027.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="52.0" y="1011.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="52.0" y="995.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.27%)</title><rect x="52.0" y="979.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.27%)</title><rect x="52.0" y="963.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.27%)</title><rect x="52.0" y="947.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.27%)</title><rect x="52.0" y="931.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$267/1515709405.test (1 samples, 0.27%)</title><rect x="52.0" y="915.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.27%)</title><rect x="55.3" y="1123.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.remove (1 samples, 0.27%)</title><rect x="55.3" y="1107.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.27%)</title><rect x="55.3" y="1091.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.27%)</title><rect x="58.5" y="1123.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.27%)</title><rect x="58.5" y="1107.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeyIterator.&lt;init&gt; (1 samples, 0.27%)</title><rect x="58.5" y="1091.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.27%)</title><rect x="58.5" y="1075.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.27%)</title><rect x="58.5" y="1059.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.27%)</title><rect x="61.7" y="1123.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.27%)</title><rect x="61.7" y="1107.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.27%)</title><rect x="65.0" y="1123.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.27%)</title><rect x="65.0" y="1107.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="65.0" y="1091.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="65.0" y="1075.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.27%)</title><rect x="65.0" y="1059.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.27%)</title><rect x="65.0" y="1043.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.27%)</title><rect x="65.0" y="1027.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.27%)</title><rect x="65.0" y="1011.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.27%)</title><rect x="65.0" y="995.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.27%)</title><rect x="65.0" y="979.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.37%)</title><rect x="68.2" y="1155.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.27%)</title><rect x="68.2" y="1139.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.2" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.next (1 samples, 0.27%)</title><rect x="68.2" y="1123.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.10%)</title><rect x="71.4" y="1139.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.10%)</title><rect x="71.4" y="1123.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.10%)</title><rect x="71.4" y="1107.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.82%)</title><rect x="71.4" y="1091.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.55%)</title><rect x="74.7" y="1075.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.55%)</title><rect x="74.7" y="1059.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.55%)</title><rect x="74.7" y="1043.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.55%)</title><rect x="74.7" y="1027.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.55%)</title><rect x="74.7" y="1011.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.55%)</title><rect x="74.7" y="995.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.55%)</title><rect x="74.7" y="979.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.27%)</title><rect x="81.1" y="1091.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.27%)</title><rect x="81.1" y="1075.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.27%)</title><rect x="81.1" y="1059.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.1" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.27%)</title><rect x="81.1" y="1043.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.55%)</title><rect x="84.4" y="1171.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.55%)</title><rect x="84.4" y="1155.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.27%)</title><rect x="84.4" y="1139.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.27%)</title><rect x="87.6" y="1139.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.27%)</title><rect x="87.6" y="1123.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="87.6" y="1107.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="87.6" y="1091.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="87.6" y="1075.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (243 samples, 66.58%)</title><rect x="90.8" y="1251.0" width="785.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.8" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (243 samples, 66.58%)</title><rect x="90.8" y="1235.0" width="785.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.8" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (243 samples, 66.58%)</title><rect x="90.8" y="1219.0" width="785.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.8" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/642660280.run (227 samples, 62.19%)</title><rect x="90.8" y="1203.0" width="733.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.8" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/642660280.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (227 samples, 62.19%)</title><rect x="90.8" y="1187.0" width="733.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.8" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (227 samples, 62.19%)</title><rect x="90.8" y="1171.0" width="733.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="93.8" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (227 samples, 62.19%)</title><rect x="90.8" y="1155.0" width="733.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="93.8" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (1 samples, 0.27%)</title><rect x="110.2" y="1139.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.10%)</title><rect x="113.5" y="1139.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.10%)</title><rect x="113.5" y="1123.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.10%)</title><rect x="113.5" y="1107.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="113.5" y="1091.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.82%)</title><rect x="116.7" y="1091.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (20 samples, 5.48%)</title><rect x="126.4" y="1139.0" width="64.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.4" y="1150.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.19%)</title><rect x="165.2" y="1123.0" width="25.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.19%)</title><rect x="165.2" y="1107.0" width="25.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="168.2" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.19%)</title><rect x="165.2" y="1091.0" width="25.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.55%)</title><rect x="165.2" y="1075.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.55%)</title><rect x="165.2" y="1059.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.2" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="168.4" y="1043.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="171.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.64%)</title><rect x="171.6" y="1075.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/596194167.accept (6 samples, 1.64%)</title><rect x="171.6" y="1059.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (6 samples, 1.64%)</title><rect x="171.6" y="1043.0" width="19.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 1.64%)</title><rect x="171.6" y="1027.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 1.64%)</title><rect x="171.6" y="1011.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 1.64%)</title><rect x="171.6" y="995.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.27%)</title><rect x="171.6" y="979.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.27%)</title><rect x="171.6" y="963.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.37%)</title><rect x="174.9" y="979.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/481285245.accept (1 samples, 0.27%)</title><rect x="174.9" y="963.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="177.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 1.10%)</title><rect x="178.1" y="963.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.27%)</title><rect x="187.8" y="947.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (39 samples, 10.68%)</title><rect x="191.0" y="1139.0" width="126.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.0" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="194.3" y="1123.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="197.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="194.3" y="1107.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="197.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (37 samples, 10.14%)</title><rect x="197.5" y="1123.0" width="119.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.5" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (37 samples, 10.14%)</title><rect x="197.5" y="1107.0" width="119.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.5" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.14%)</title><rect x="197.5" y="1091.0" width="119.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.5" y="1102.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.14%)</title><rect x="197.5" y="1075.0" width="119.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.5" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 10.14%)</title><rect x="197.5" y="1059.0" width="119.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.5" y="1070.0">com/fasterxml/j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="197.5" y="1043.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="200.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="197.5" y="1027.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="200.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="197.5" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="200.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.66%)</title><rect x="200.7" y="1043.0" width="55.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.7" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.37%)</title><rect x="200.7" y="1027.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.37%)</title><rect x="200.7" y="1011.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.37%)</title><rect x="200.7" y="995.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.37%)</title><rect x="200.7" y="979.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.10%)</title><rect x="200.7" y="963.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.27%)</title><rect x="213.7" y="963.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (12 samples, 3.29%)</title><rect x="216.9" y="1027.0" width="38.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.9" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (12 samples, 3.29%)</title><rect x="216.9" y="1011.0" width="38.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.9" y="1022.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="216.9" y="995.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.27%)</title><rect x="216.9" y="979.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="219.9" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.27%)</title><rect x="216.9" y="963.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="219.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.10%)</title><rect x="220.1" y="995.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 1.10%)</title><rect x="220.1" y="979.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.55%)</title><rect x="226.6" y="963.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 1.92%)</title><rect x="233.1" y="995.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.1" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 1.92%)</title><rect x="233.1" y="979.0" width="22.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.1" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 1.37%)</title><rect x="233.1" y="963.0" width="16.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.27%)</title><rect x="249.2" y="963.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.27%)</title><rect x="252.5" y="963.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.27%)</title><rect x="252.5" y="947.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (17 samples, 4.66%)</title><rect x="255.7" y="1043.0" width="55.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.7" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.55%)</title><rect x="255.7" y="1027.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.55%)</title><rect x="255.7" y="1011.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.10%)</title><rect x="262.2" y="1027.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 1.10%)</title><rect x="262.2" y="1011.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.55%)</title><rect x="268.6" y="995.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.55%)</title><rect x="268.6" y="979.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.55%)</title><rect x="268.6" y="963.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="268.6" y="947.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="271.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="268.6" y="931.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="271.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="268.6" y="915.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="271.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="268.6" y="899.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="271.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="271.9" y="947.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="274.9" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="271.9" y="931.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="274.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (11 samples, 3.01%)</title><rect x="275.1" y="1027.0" width="35.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.1" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.01%)</title><rect x="275.1" y="1011.0" width="35.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.1" y="1022.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.37%)</title><rect x="278.3" y="995.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="291.3" y="979.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="291.3" y="963.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="291.3" y="947.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.37%)</title><rect x="294.5" y="995.0" width="16.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.37%)</title><rect x="294.5" y="979.0" width="16.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.37%)</title><rect x="294.5" y="963.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.82%)</title><rect x="297.7" y="947.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.55%)</title><rect x="297.7" y="931.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.55%)</title><rect x="297.7" y="915.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.55%)</title><rect x="297.7" y="899.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.27%)</title><rect x="301.0" y="883.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.27%)</title><rect x="301.0" y="867.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.27%)</title><rect x="301.0" y="851.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.27%)</title><rect x="301.0" y="835.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.27%)</title><rect x="304.2" y="931.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.27%)</title><rect x="307.4" y="947.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="307.4" y="931.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="307.4" y="915.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.55%)</title><rect x="310.7" y="1043.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.55%)</title><rect x="310.7" y="1027.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.55%)</title><rect x="310.7" y="1011.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.55%)</title><rect x="310.7" y="995.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.55%)</title><rect x="310.7" y="979.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (157 samples, 43.01%)</title><rect x="317.1" y="1139.0" width="507.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.1" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="349.5" y="1123.0" width="6.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="352.5" y="1134.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="349.5" y="1107.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="352.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (20 samples, 5.48%)</title><rect x="355.9" y="1123.0" width="64.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.9" y="1134.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 5.21%)</title><rect x="359.2" y="1107.0" width="61.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.2" y="1118.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 4.93%)</title><rect x="362.4" y="1091.0" width="58.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.4" y="1102.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.55%)</title><rect x="365.6" y="1075.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.55%)</title><rect x="365.6" y="1059.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.55%)</title><rect x="365.6" y="1043.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.55%)</title><rect x="365.6" y="1027.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 4.11%)</title><rect x="372.1" y="1075.0" width="48.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.1" y="1086.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 1.64%)</title><rect x="401.2" y="1059.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.64%)</title><rect x="401.2" y="1043.0" width="19.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.55%)</title><rect x="420.6" y="1123.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="423.8" y="1107.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="426.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (29 samples, 7.95%)</title><rect x="427.0" y="1123.0" width="93.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.0" y="1134.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (29 samples, 7.95%)</title><rect x="427.0" y="1107.0" width="93.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.0" y="1118.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 4.11%)</title><rect x="430.3" y="1091.0" width="48.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.3" y="1102.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (14 samples, 3.84%)</title><rect x="430.3" y="1075.0" width="45.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.3" y="1086.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 3.84%)</title><rect x="430.3" y="1059.0" width="45.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.3" y="1070.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 2.74%)</title><rect x="433.5" y="1043.0" width="32.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.5" y="1054.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 2.74%)</title><rect x="433.5" y="1027.0" width="32.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.5" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 2.74%)</title><rect x="433.5" y="1011.0" width="32.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.5" y="1022.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.82%)</title><rect x="452.9" y="995.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="455.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.27%)</title><rect x="452.9" y="979.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="455.9" y="990.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.27%)</title><rect x="452.9" y="963.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="455.9" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.55%)</title><rect x="456.1" y="979.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="459.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="459.4" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="462.4" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.27%)</title><rect x="459.4" y="947.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="462.4" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.27%)</title><rect x="459.4" y="931.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="462.4" y="942.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.27%)</title><rect x="459.4" y="915.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="462.4" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.27%)</title><rect x="459.4" y="899.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="462.4" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.27%)</title><rect x="459.4" y="883.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="462.4" y="894.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.27%)</title><rect x="459.4" y="867.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="462.4" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="462.6" y="995.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="465.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="465.8" y="1043.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.8" y="1054.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.55%)</title><rect x="469.1" y="1043.0" width="6.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="472.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.27%)</title><rect x="475.5" y="1075.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.5" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.27%)</title><rect x="475.5" y="1059.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="478.5" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="475.5" y="1043.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="478.5" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="475.5" y="1027.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="478.5" y="1038.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.27%)</title><rect x="475.5" y="1011.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="478.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.27%)</title><rect x="478.8" y="1091.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.27%)</title><rect x="478.8" y="1075.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="478.8" y="1059.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.8" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 3.29%)</title><rect x="482.0" y="1091.0" width="38.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="1102.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.29%)</title><rect x="482.0" y="1075.0" width="38.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.0" y="1086.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.27%)</title><rect x="482.0" y="1059.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.27%)</title><rect x="482.0" y="1043.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.27%)</title><rect x="482.0" y="1027.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.27%)</title><rect x="482.0" y="1011.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.01%)</title><rect x="485.2" y="1059.0" width="35.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.2" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.01%)</title><rect x="485.2" y="1043.0" width="35.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.2" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (10 samples, 2.74%)</title><rect x="488.5" y="1027.0" width="32.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.5" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 1.64%)</title><rect x="501.4" y="1011.0" width="19.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="517.6" y="995.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="517.6" y="979.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="520.6" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="517.6" y="963.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="520.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (88 samples, 24.11%)</title><rect x="520.8" y="1123.0" width="284.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.8" y="1134.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (88 samples, 24.11%)</title><rect x="520.8" y="1107.0" width="284.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="523.8" y="1118.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/983517944.process (68 samples, 18.63%)</title><rect x="524.0" y="1091.0" width="219.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.0" y="1102.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (68 samples, 18.63%)</title><rect x="524.0" y="1075.0" width="219.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="527.0" y="1086.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (67 samples, 18.36%)</title><rect x="527.3" y="1059.0" width="216.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.3" y="1070.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 1.37%)</title><rect x="537.0" y="1043.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="540.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 1.37%)</title><rect x="537.0" y="1027.0" width="16.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.0" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 1.37%)</title><rect x="537.0" y="1011.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="540.0" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 1.37%)</title><rect x="537.0" y="995.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (59 samples, 16.16%)</title><rect x="553.1" y="1043.0" width="190.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.1" y="1054.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (59 samples, 16.16%)</title><rect x="553.1" y="1027.0" width="190.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.1" y="1038.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (51 samples, 13.97%)</title><rect x="572.5" y="1011.0" width="164.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="575.5" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.27%)</title><rect x="575.8" y="995.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="578.8" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="579.0" y="995.0" width="3.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="582.0" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 1.64%)</title><rect x="582.2" y="995.0" width="19.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="585.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="595.2" y="979.0" width="6.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="598.2" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="601.6" y="995.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="604.6" y="1006.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (41 samples, 11.23%)</title><rect x="604.8" y="995.0" width="132.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.8" y="1006.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.10%)</title><rect x="627.5" y="979.0" width="12.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.5" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.27%)</title><rect x="637.2" y="963.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.2" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.55%)</title><rect x="640.4" y="979.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.4" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="646.9" y="979.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="649.9" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="646.9" y="963.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="649.9" y="974.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.82%)</title><rect x="650.1" y="979.0" width="9.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="653.1" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 0.82%)</title><rect x="659.8" y="979.0" width="9.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="662.8" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.01%)</title><rect x="669.5" y="979.0" width="35.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="672.5" y="990.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.27%)</title><rect x="705.1" y="979.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="708.1" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.27%)</title><rect x="708.3" y="979.0" width="3.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="711.3" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 1.64%)</title><rect x="711.5" y="979.0" width="19.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.5" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.55%)</title><rect x="730.9" y="979.0" width="6.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="733.9" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.27%)</title><rect x="737.4" y="1011.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="740.4" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="740.6" y="1011.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="743.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (6 samples, 1.64%)</title><rect x="743.9" y="1091.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="743.9" y="1075.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.9" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="743.9" y="1059.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="746.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="743.9" y="1043.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="743.9" y="1027.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="746.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 1.37%)</title><rect x="747.1" y="1075.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 1.37%)</title><rect x="747.1" y="1059.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.55%)</title><rect x="763.3" y="1091.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.55%)</title><rect x="763.3" y="1075.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="769.7" y="1091.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="769.7" y="1075.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.10%)</title><rect x="773.0" y="1091.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.82%)</title><rect x="776.2" y="1075.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.2" y="1086.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.55%)</title><rect x="776.2" y="1059.0" width="6.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="779.2" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.27%)</title><rect x="782.7" y="1059.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.82%)</title><rect x="785.9" y="1091.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.82%)</title><rect x="795.6" y="1091.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="798.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.82%)</title><rect x="795.6" y="1075.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.82%)</title><rect x="795.6" y="1059.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.55%)</title><rect x="795.6" y="1043.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.55%)</title><rect x="795.6" y="1027.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="798.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.27%)</title><rect x="802.1" y="1043.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/2017944661.accept (1 samples, 0.27%)</title><rect x="802.1" y="1027.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.27%)</title><rect x="802.1" y="1011.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.37%)</title><rect x="805.3" y="1123.0" width="16.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="808.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.37%)</title><rect x="805.3" y="1107.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.37%)</title><rect x="805.3" y="1091.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.55%)</title><rect x="805.3" y="1075.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.55%)</title><rect x="805.3" y="1059.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.82%)</title><rect x="811.8" y="1075.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1444435600.accept (3 samples, 0.82%)</title><rect x="811.8" y="1059.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (3 samples, 0.82%)</title><rect x="811.8" y="1043.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="814.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.82%)</title><rect x="811.8" y="1027.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.8" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.82%)</title><rect x="811.8" y="1011.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.8" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.82%)</title><rect x="811.8" y="995.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.8" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="815.0" y="979.0" width="6.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="818.0" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="815.0" y="963.0" width="6.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="818.0" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.27%)</title><rect x="821.5" y="1123.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="824.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 1.37%)</title><rect x="824.7" y="1203.0" width="16.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.37%)</title><rect x="824.7" y="1187.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="827.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.37%)</title><rect x="824.7" y="1171.0" width="16.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.10%)</title><rect x="827.9" y="1155.0" width="12.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.01%)</title><rect x="840.8" y="1203.0" width="35.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.8" y="1214.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.92%)</title><rect x="853.8" y="1187.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="856.8" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.64%)</title><rect x="857.0" y="1171.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="860.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.64%)</title><rect x="857.0" y="1155.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.64%)</title><rect x="857.0" y="1139.0" width="19.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="860.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.64%)</title><rect x="857.0" y="1123.0" width="19.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="860.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.55%)</title><rect x="876.4" y="1251.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="879.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.27%)</title><rect x="879.6" y="1235.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="879.6" y="1219.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.6" y="1230.0"></text>
</g>
<g>
<title>start_thread (95 samples, 26.03%)</title><rect x="882.9" y="1251.0" width="307.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="885.9" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (95 samples, 26.03%)</title><rect x="882.9" y="1235.0" width="307.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="885.9" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 5.75%)</title><rect x="882.9" y="1219.0" width="67.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.9" y="1230.0">GangWor..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 5.75%)</title><rect x="882.9" y="1203.0" width="67.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.9" y="1214.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 3.56%)</title><rect x="882.9" y="1187.0" width="42.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="885.9" y="1198.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 2.74%)</title><rect x="889.3" y="1171.0" width="32.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="892.3" y="1182.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.82%)</title><rect x="912.0" y="1155.0" width="9.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="915.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.27%)</title><rect x="918.4" y="1139.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.4" y="1150.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.27%)</title><rect x="921.7" y="1171.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.7" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 1.92%)</title><rect x="924.9" y="1187.0" width="22.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="927.9" y="1198.0">G..</text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.27%)</title><rect x="924.9" y="1171.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="927.9" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.27%)</title><rect x="924.9" y="1155.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.9" y="1166.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.27%)</title><rect x="924.9" y="1139.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.27%)</title><rect x="924.9" y="1123.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.9" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.27%)</title><rect x="924.9" y="1107.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.9" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.27%)</title><rect x="928.1" y="1171.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.1" y="1182.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.27%)</title><rect x="928.1" y="1155.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.1" y="1166.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.27%)</title><rect x="928.1" y="1139.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.1" y="1150.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.27%)</title><rect x="928.1" y="1123.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.1" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 1.37%)</title><rect x="931.4" y="1171.0" width="16.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.4" y="1182.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 1.37%)</title><rect x="931.4" y="1155.0" width="16.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.4" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.27%)</title><rect x="947.5" y="1187.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.5" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.27%)</title><rect x="947.5" y="1171.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.5" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.27%)</title><rect x="947.5" y="1155.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="950.5" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.27%)</title><rect x="947.5" y="1139.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="950.5" y="1150.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.27%)</title><rect x="947.5" y="1123.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.5" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.27%)</title><rect x="947.5" y="1107.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.5" y="1118.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.27%)</title><rect x="947.5" y="1091.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.5" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (74 samples, 20.27%)</title><rect x="950.8" y="1219.0" width="239.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.8" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 20.27%)</title><rect x="950.8" y="1203.0" width="239.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="953.8" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 20.27%)</title><rect x="950.8" y="1187.0" width="239.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.8" y="1198.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 20.00%)</title><rect x="954.0" y="1171.0" width="236.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.0" y="1182.0">CompileBroker::invoke_compiler_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (71 samples, 19.45%)</title><rect x="954.0" y="1155.0" width="229.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.0" y="1166.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (71 samples, 19.45%)</title><rect x="954.0" y="1139.0" width="229.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.0" y="1150.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 11.51%)</title><rect x="954.0" y="1123.0" width="135.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.0" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.55%)</title><rect x="954.0" y="1107.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.0" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.27%)</title><rect x="954.0" y="1091.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.0" y="1102.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.27%)</title><rect x="954.0" y="1075.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.0" y="1086.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.27%)</title><rect x="954.0" y="1059.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.0" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.27%)</title><rect x="957.2" y="1091.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.2" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.27%)</title><rect x="957.2" y="1075.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.2" y="1086.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.27%)</title><rect x="957.2" y="1059.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.2" y="1070.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.27%)</title><rect x="957.2" y="1043.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.2" y="1054.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop_not_null(RegisterImpl*, RegisterImpl*) (1 samples, 0.27%)</title><rect x="957.2" y="1027.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.2" y="1038.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (2 samples, 0.55%)</title><rect x="960.5" y="1107.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.5" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.64%)</title><rect x="966.9" y="1107.0" width="19.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.55%)</title><rect x="966.9" y="1091.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.9" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.10%)</title><rect x="973.4" y="1091.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.4" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.82%)</title><rect x="973.4" y="1075.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.27%)</title><rect x="983.1" y="1075.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.1" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.27%)</title><rect x="983.1" y="1059.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.82%)</title><rect x="986.3" y="1107.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.82%)</title><rect x="986.3" y="1091.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.55%)</title><rect x="986.3" y="1075.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.3" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.27%)</title><rect x="986.3" y="1059.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.27%)</title><rect x="989.6" y="1059.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.6" y="1070.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.27%)</title><rect x="989.6" y="1043.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.27%)</title><rect x="992.8" y="1075.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 7.67%)</title><rect x="996.0" y="1107.0" width="90.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.0" y="1118.0">PhaseChait..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="996.0" y="1091.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.0" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.27%)</title><rect x="999.3" y="1091.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.55%)</title><rect x="1002.5" y="1091.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1002.5" y="1075.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.27%)</title><rect x="1005.7" y="1075.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1005.7" y="1059.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.82%)</title><rect x="1009.0" y="1091.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.64%)</title><rect x="1018.7" y="1091.0" width="19.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1021.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.55%)</title><rect x="1031.6" y="1075.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.6" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1034.8" y="1059.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.27%)</title><rect x="1038.1" y="1091.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.55%)</title><rect x="1041.3" y="1091.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1044.5" y="1075.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.37%)</title><rect x="1047.8" y="1091.0" width="16.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.8" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.37%)</title><rect x="1047.8" y="1075.0" width="16.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.8" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 1.37%)</title><rect x="1047.8" y="1059.0" width="16.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.8" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.10%)</title><rect x="1047.8" y="1043.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.27%)</title><rect x="1060.7" y="1043.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1063.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.27%)</title><rect x="1063.9" y="1091.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.27%)</title><rect x="1067.2" y="1091.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.2" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1067.2" y="1075.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.2" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.10%)</title><rect x="1070.4" y="1091.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.4" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.27%)</title><rect x="1073.6" y="1075.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.6" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.55%)</title><rect x="1076.8" y="1075.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.8" y="1086.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.27%)</title><rect x="1083.3" y="1091.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.3" y="1102.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.27%)</title><rect x="1086.5" y="1107.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1089.5" y="1118.0"></text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 6.30%)</title><rect x="1089.8" y="1123.0" width="74.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.8" y="1134.0">Compile:..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.27%)</title><rect x="1089.8" y="1107.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.55%)</title><rect x="1093.0" y="1107.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.55%)</title><rect x="1093.0" y="1091.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="1075.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="1059.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="1043.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="1027.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="1011.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="995.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="979.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="963.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="947.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="931.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="915.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1096.2" y="899.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.2" y="910.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1096.2" y="883.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.2" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.27%)</title><rect x="1099.5" y="1107.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.5" y="1118.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1099.5" y="1091.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.5" y="1102.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1099.5" y="1075.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 4.38%)</title><rect x="1102.7" y="1107.0" width="51.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.7" y="1118.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.55%)</title><rect x="1102.7" y="1091.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.7" y="1102.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.27%)</title><rect x="1105.9" y="1075.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.55%)</title><rect x="1109.2" y="1091.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.27%)</title><rect x="1112.4" y="1075.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 2.47%)</title><rect x="1115.6" y="1091.0" width="29.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.6" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 2.19%)</title><rect x="1118.9" y="1075.0" width="25.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.9" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 2.19%)</title><rect x="1118.9" y="1059.0" width="25.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.27%)</title><rect x="1144.7" y="1091.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.27%)</title><rect x="1144.7" y="1075.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="1148.0" y="1091.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.27%)</title><rect x="1148.0" y="1075.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.27%)</title><rect x="1148.0" y="1059.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.0" y="1070.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.27%)</title><rect x="1148.0" y="1043.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.27%)</title><rect x="1151.2" y="1091.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.27%)</title><rect x="1151.2" y="1075.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.82%)</title><rect x="1154.4" y="1107.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.82%)</title><rect x="1154.4" y="1091.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.4" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1154.4" y="1075.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="1086.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.27%)</title><rect x="1154.4" y="1059.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.4" y="1070.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1157.7" y="1075.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1160.9" y="1075.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="1086.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.27%)</title><rect x="1160.9" y="1059.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.37%)</title><rect x="1164.1" y="1123.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.37%)</title><rect x="1164.1" y="1107.0" width="16.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.37%)</title><rect x="1164.1" y="1091.0" width="16.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.37%)</title><rect x="1164.1" y="1075.0" width="16.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.37%)</title><rect x="1164.1" y="1059.0" width="16.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.37%)</title><rect x="1164.1" y="1043.0" width="16.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="1027.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="1038.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="1011.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1164.1" y="995.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="1164.1" y="979.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="1164.1" y="963.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1164.1" y="947.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1164.1" y="931.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1164.1" y="915.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1164.1" y="899.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="883.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1164.1" y="867.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1164.1" y="851.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.1" y="862.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1164.1" y="835.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1164.1" y="819.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1164.1" y="803.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="787.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.27%)</title><rect x="1164.1" y="771.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.10%)</title><rect x="1167.4" y="1027.0" width="12.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.10%)</title><rect x="1167.4" y="1011.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.10%)</title><rect x="1167.4" y="995.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.10%)</title><rect x="1167.4" y="979.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.10%)</title><rect x="1167.4" y="963.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.10%)</title><rect x="1167.4" y="947.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="931.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="915.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="899.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="883.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="867.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.4" y="851.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.4" y="862.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="835.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.4" y="846.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool) (1 samples, 0.27%)</title><rect x="1167.4" y="819.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.27%)</title><rect x="1167.4" y="803.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1167.4" y="787.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.4" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1170.6" y="931.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1170.6" y="915.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1170.6" y="899.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1170.6" y="883.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1170.6" y="867.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1170.6" y="851.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1170.6" y="835.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1170.6" y="819.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1170.6" y="803.0" width="9.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1170.6" y="787.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1170.6" y="771.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1170.6" y="755.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1170.6" y="739.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1170.6" y="723.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1170.6" y="707.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.27%)</title><rect x="1170.6" y="691.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.27%)</title><rect x="1170.6" y="675.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.27%)</title><rect x="1170.6" y="659.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1173.8" y="691.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1173.8" y="675.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1173.8" y="659.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1173.8" y="643.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1173.8" y="627.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1173.8" y="611.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1173.8" y="595.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1173.8" y="579.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1173.8" y="563.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1173.8" y="547.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1173.8" y="531.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1173.8" y="515.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1173.8" y="499.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1173.8" y="483.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1173.8" y="467.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1173.8" y="451.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1173.8" y="435.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1173.8" y="419.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1173.8" y="403.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1173.8" y="387.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1173.8" y="371.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="355.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="339.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="323.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="307.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="291.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="275.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="259.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="243.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="227.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="211.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="195.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="179.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="163.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="147.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="131.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="115.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="99.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="83.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.27%)</title><rect x="1173.8" y="67.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="78.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.27%)</title><rect x="1173.8" y="51.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="62.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.27%)</title><rect x="1173.8" y="35.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.27%)</title><rect x="1177.1" y="355.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.27%)</title><rect x="1177.1" y="339.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.27%)</title><rect x="1177.1" y="323.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.27%)</title><rect x="1177.1" y="307.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.27%)</title><rect x="1177.1" y="291.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.27%)</title><rect x="1180.3" y="1123.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.27%)</title><rect x="1180.3" y="1107.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.27%)</title><rect x="1180.3" y="1091.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.55%)</title><rect x="1183.5" y="1155.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.55%)</title><rect x="1183.5" y="1139.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.55%)</title><rect x="1183.5" y="1123.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.5" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.55%)</title><rect x="1183.5" y="1107.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="1118.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.27%)</title><rect x="1183.5" y="1091.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.27%)</title><rect x="1183.5" y="1075.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.27%)</title><rect x="1183.5" y="1059.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.27%)</title><rect x="1183.5" y="1043.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.27%)</title><rect x="1183.5" y="1027.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.27%)</title><rect x="1183.5" y="1011.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1183.5" y="995.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.27%)</title><rect x="1183.5" y="979.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.27%)</title><rect x="1183.5" y="963.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.27%)</title><rect x="1183.5" y="947.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.27%)</title><rect x="1183.5" y="931.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1183.5" y="915.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="926.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.27%)</title><rect x="1183.5" y="899.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="910.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.27%)</title><rect x="1183.5" y="883.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="894.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.27%)</title><rect x="1183.5" y="867.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol*, Symbol*) (1 samples, 0.27%)</title><rect x="1183.5" y="851.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.27%)</title><rect x="1183.5" y="835.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.27%)</title><rect x="1186.8" y="1091.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.8" y="1102.0"></text>
</g>
<g>
<title>Compilation::generate_exception_handler_table() (1 samples, 0.27%)</title><rect x="1186.8" y="1075.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.8" y="1086.0"></text>
</g>
<g>
<title>ExceptionHandlerTable::add_subtable(int, GrowableArray&lt;long&gt;*, GrowableArray&lt;long&gt;*, GrowableArray&lt;long&gt;*) (1 samples, 0.27%)</title><rect x="1186.8" y="1059.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="1070.0"></text>
</g>
</g>
</svg>
