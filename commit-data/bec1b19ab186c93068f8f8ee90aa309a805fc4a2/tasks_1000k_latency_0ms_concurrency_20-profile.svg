<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (1,206 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (260 samples, 21.56%)</title><rect x="10.0" y="835.0" width="254.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (260 samples, 21.56%)</title><rect x="10.0" y="819.0" width="254.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (256 samples, 21.23%)</title><rect x="12.0" y="803.0" width="250.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="814.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.08%)</title><rect x="12.0" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="12.0" y="771.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="12.0" y="755.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="12.0" y="739.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="12.0" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="12.9" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="12.9" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="12.9" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="12.9" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="12.9" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="12.9" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="12.9" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="12.9" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="12.9" y="659.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.33%)</title><rect x="13.9" y="787.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.33%)</title><rect x="13.9" y="771.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.33%)</title><rect x="13.9" y="755.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1616744399.accept (4 samples, 0.33%)</title><rect x="13.9" y="739.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.33%)</title><rect x="13.9" y="723.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="13.9" y="707.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.9" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.17%)</title><rect x="15.9" y="691.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="17.8" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (1 samples, 0.08%)</title><rect x="17.8" y="771.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="17.8" y="755.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="20.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (194 samples, 16.09%)</title><rect x="18.8" y="787.0" width="189.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="798.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/2084875528.accept (181 samples, 15.01%)</title><rect x="18.8" y="771.0" width="177.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.8" y="782.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (181 samples, 15.01%)</title><rect x="18.8" y="755.0" width="177.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="766.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (157 samples, 13.02%)</title><rect x="18.8" y="739.0" width="153.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.8" y="750.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (157 samples, 13.02%)</title><rect x="18.8" y="723.0" width="153.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.8" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (157 samples, 13.02%)</title><rect x="18.8" y="707.0" width="153.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.8" y="718.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 13.02%)</title><rect x="18.8" y="691.0" width="153.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.8" y="702.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 13.02%)</title><rect x="18.8" y="675.0" width="153.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="686.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 13.02%)</title><rect x="18.8" y="659.0" width="153.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.8" y="670.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 8.71%)</title><rect x="58.9" y="643.0" width="102.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.9" y="654.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (28 samples, 2.32%)</title><rect x="59.9" y="627.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.9" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (28 samples, 2.32%)</title><rect x="59.9" y="611.0" width="27.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.9" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (28 samples, 2.32%)</title><rect x="59.9" y="595.0" width="27.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.9" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.83%)</title><rect x="87.3" y="627.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.83%)</title><rect x="87.3" y="611.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.25%)</title><rect x="89.3" y="595.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.3" y="606.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.25%)</title><rect x="89.3" y="579.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="92.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.41%)</title><rect x="92.2" y="595.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (66 samples, 5.47%)</title><rect x="97.1" y="627.0" width="64.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.1" y="638.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (66 samples, 5.47%)</title><rect x="97.1" y="611.0" width="64.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.1" y="622.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (64 samples, 5.31%)</title><rect x="98.1" y="595.0" width="62.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.1" y="606.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (64 samples, 5.31%)</title><rect x="98.1" y="579.0" width="62.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.1" y="590.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (63 samples, 5.22%)</title><rect x="99.0" y="563.0" width="61.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.0" y="574.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (57 samples, 4.73%)</title><rect x="99.0" y="547.0" width="55.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="102.0" y="558.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="100.0" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="103.0" y="542.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.25%)</title><rect x="101.0" y="531.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="104.0" y="542.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.32%)</title><rect x="103.9" y="531.0" width="39.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="106.9" y="542.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.25%)</title><rect x="143.1" y="531.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="146.1" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.75%)</title><rect x="146.0" y="531.0" width="8.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="149.0" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.25%)</title><rect x="154.8" y="547.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="157.8" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="157.7" y="547.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="160.7" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="159.7" y="547.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="162.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="160.7" y="595.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.33%)</title><rect x="161.7" y="643.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.25%)</title><rect x="161.7" y="627.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.25%)</title><rect x="161.7" y="611.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="163.6" y="595.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.08%)</title><rect x="164.6" y="627.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="164.6" y="611.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.58%)</title><rect x="165.6" y="643.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.58%)</title><rect x="165.6" y="627.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="165.6" y="611.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.25%)</title><rect x="165.6" y="595.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.33%)</title><rect x="168.5" y="611.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.17%)</title><rect x="170.5" y="595.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (18 samples, 1.49%)</title><rect x="172.4" y="739.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (18 samples, 1.49%)</title><rect x="172.4" y="723.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="187.1" y="707.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="187.1" y="691.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="187.1" y="675.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="187.1" y="659.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.25%)</title><rect x="187.1" y="643.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.33%)</title><rect x="190.0" y="739.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="190.0" y="723.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="190.0" y="707.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="193.9" y="739.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="193.9" y="723.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.17%)</title><rect x="193.9" y="707.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="193.9" y="691.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="193.9" y="675.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.9" y="686.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.33%)</title><rect x="195.9" y="771.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="198.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.75%)</title><rect x="199.8" y="771.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.75%)</title><rect x="199.8" y="755.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.75%)</title><rect x="199.8" y="739.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.75%)</title><rect x="199.8" y="723.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.56%)</title><rect x="208.6" y="787.0" width="53.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.6" y="798.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 4.48%)</title><rect x="208.6" y="771.0" width="52.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.6" y="782.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.99%)</title><rect x="208.6" y="755.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.6" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 2.99%)</title><rect x="208.6" y="739.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.6" y="750.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="208.6" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.82%)</title><rect x="209.6" y="723.0" width="33.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.6" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.16%)</title><rect x="209.6" y="707.0" width="25.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.6" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.16%)</title><rect x="209.6" y="691.0" width="25.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.6" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 0.91%)</title><rect x="210.6" y="675.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.58%)</title><rect x="211.6" y="659.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.58%)</title><rect x="211.6" y="643.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.58%)</title><rect x="211.6" y="627.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.58%)</title><rect x="211.6" y="611.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.58%)</title><rect x="211.6" y="595.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.58%)</title><rect x="211.6" y="579.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.58%)</title><rect x="211.6" y="563.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="218.4" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="218.4" y="643.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.08%)</title><rect x="218.4" y="627.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="218.4" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarint (1 samples, 0.08%)</title><rect x="218.4" y="595.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readUnsignedVarint (1 samples, 0.08%)</title><rect x="218.4" y="579.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="218.4" y="563.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.08%)</title><rect x="218.4" y="547.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isControlBatch (2 samples, 0.17%)</title><rect x="219.4" y="659.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.attributes (2 samples, 0.17%)</title><rect x="219.4" y="643.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.4" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (2 samples, 0.17%)</title><rect x="219.4" y="627.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.getShort (1 samples, 0.08%)</title><rect x="219.4" y="611.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.4" y="622.0"></text>
</g>
<g>
<title>java/nio/Bits.getShortB (1 samples, 0.08%)</title><rect x="219.4" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.4" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer._get (1 samples, 0.08%)</title><rect x="219.4" y="579.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.4" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="220.4" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.08%)</title><rect x="221.3" y="675.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.00%)</title><rect x="222.3" y="659.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (12 samples, 1.00%)</title><rect x="222.3" y="643.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.3" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (12 samples, 1.00%)</title><rect x="222.3" y="627.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.3" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (7 samples, 0.58%)</title><rect x="227.2" y="611.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.2" y="622.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.17%)</title><rect x="230.1" y="595.0" width="2.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="233.1" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="232.1" y="595.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="235.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="234.1" y="675.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="235.0" y="707.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="235.0" y="691.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="235.0" y="675.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="235.0" y="659.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="235.0" y="643.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="236.0" y="627.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.08%)</title><rect x="236.0" y="611.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (4 samples, 0.33%)</title><rect x="237.0" y="707.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.25%)</title><rect x="238.0" y="691.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="238.0" y="675.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="238.0" y="659.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.0" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="238.0" y="643.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="241.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="239.0" y="675.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="239.0" y="659.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="239.9" y="643.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="240.9" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.08%)</title><rect x="241.9" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.08%)</title><rect x="242.9" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.66%)</title><rect x="243.8" y="755.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.50%)</title><rect x="243.8" y="739.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.50%)</title><rect x="243.8" y="723.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="243.8" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="243.8" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="243.8" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="243.8" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="243.8" y="643.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="244.8" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="244.8" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="244.8" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="244.8" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.08%)</title><rect x="245.8" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="246.8" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="246.8" y="691.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="247.8" y="707.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="247.8" y="691.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.8" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="247.8" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="247.8" y="659.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="247.8" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="248.7" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="248.7" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="248.7" y="675.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="248.7" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="249.7" y="739.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="249.7" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="249.7" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="250.7" y="723.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.75%)</title><rect x="251.7" y="755.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.50%)</title><rect x="251.7" y="739.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.17%)</title><rect x="251.7" y="723.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.17%)</title><rect x="251.7" y="707.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.17%)</title><rect x="251.7" y="691.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.08%)</title><rect x="251.7" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.08%)</title><rect x="251.7" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="251.7" y="643.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="252.7" y="675.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.08%)</title><rect x="252.7" y="659.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="252.7" y="643.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="253.6" y="723.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.6" y="734.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.08%)</title><rect x="253.6" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="256.6" y="718.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="253.6" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="256.6" y="702.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.08%)</title><rect x="253.6" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="256.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="254.6" y="707.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="254.6" y="691.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="254.6" y="675.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="254.6" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="254.6" y="643.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="254.6" y="627.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="254.6" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.6" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="254.6" y="595.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="257.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.memoryAllocated (1 samples, 0.08%)</title><rect x="255.6" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.6" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="255.6" y="643.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.08%)</title><rect x="256.6" y="707.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 0.25%)</title><rect x="257.5" y="739.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (3 samples, 0.25%)</title><rect x="257.5" y="723.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.25%)</title><rect x="257.5" y="707.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ApiVersions.get (1 samples, 0.08%)</title><rect x="257.5" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="257.5" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="257.5" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="258.5" y="691.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.17%)</title><rect x="258.5" y="675.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.17%)</title><rect x="258.5" y="659.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="258.5" y="643.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.08%)</title><rect x="258.5" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.08%)</title><rect x="258.5" y="611.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type.isArray (1 samples, 0.08%)</title><rect x="258.5" y="595.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="259.5" y="643.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="259.5" y="627.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.5" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.08%)</title><rect x="259.5" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="262.5" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="259.5" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="262.5" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="259.5" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="262.5" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="259.5" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="262.5" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="259.5" y="547.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.5" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="259.5" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="262.5" y="542.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="259.5" y="515.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="262.5" y="526.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="259.5" y="499.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="262.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.08%)</title><rect x="260.5" y="755.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.08%)</title><rect x="260.5" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="260.5" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="260.5" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="260.5" y="691.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="260.5" y="675.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.5" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="260.5" y="659.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="260.5" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="260.5" y="627.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.5" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="260.5" y="611.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.5" y="622.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="260.5" y="595.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="260.5" y="579.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$241/1471806942.apply (1 samples, 0.08%)</title><rect x="260.5" y="563.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.08%)</title><rect x="260.5" y="547.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="261.5" y="771.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.5" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="261.5" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="264.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="261.5" y="739.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="264.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="262.4" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.4" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="262.4" y="787.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="265.4" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="262.4" y="771.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="265.4" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="263.4" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (793 samples, 65.75%)</title><rect x="264.4" y="835.0" width="775.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.4" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (793 samples, 65.75%)</title><rect x="264.4" y="819.0" width="775.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.4" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (793 samples, 65.75%)</title><rect x="264.4" y="803.0" width="775.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.4" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1864098117.run (577 samples, 47.84%)</title><rect x="266.4" y="787.0" width="564.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.4" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1864..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (577 samples, 47.84%)</title><rect x="266.4" y="771.0" width="564.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.4" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (577 samples, 47.84%)</title><rect x="266.4" y="755.0" width="564.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.4" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (577 samples, 47.84%)</title><rect x="266.4" y="739.0" width="564.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.4" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.25%)</title><rect x="284.9" y="723.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.00%)</title><rect x="287.9" y="723.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.00%)</title><rect x="287.9" y="707.0" width="11.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.00%)</title><rect x="287.9" y="691.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 1.00%)</title><rect x="287.9" y="675.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="293.7" y="659.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="296.7" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="294.7" y="659.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="297.7" y="670.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="294.7" y="643.0" width="4.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="297.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (46 samples, 3.81%)</title><rect x="299.6" y="723.0" width="45.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.6" y="734.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="311.4" y="707.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 2.74%)</title><rect x="312.3" y="707.0" width="32.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.3" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 2.74%)</title><rect x="312.3" y="691.0" width="32.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.3" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (33 samples, 2.74%)</title><rect x="312.3" y="675.0" width="32.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.3" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.50%)</title><rect x="312.3" y="659.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.50%)</title><rect x="312.3" y="643.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.50%)</title><rect x="312.3" y="627.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1518517299.accept (2 samples, 0.17%)</title><rect x="315.3" y="611.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.3" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="317.2" y="611.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="320.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 2.24%)</title><rect x="318.2" y="659.0" width="26.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.2" y="670.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1518517299.accept (27 samples, 2.24%)</title><rect x="318.2" y="643.0" width="26.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.2" y="654.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (27 samples, 2.24%)</title><rect x="318.2" y="627.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.2" y="638.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (27 samples, 2.24%)</title><rect x="318.2" y="611.0" width="26.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.2" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (27 samples, 2.24%)</title><rect x="318.2" y="595.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.2" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (26 samples, 2.16%)</title><rect x="319.2" y="579.0" width="25.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.2" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.33%)</title><rect x="319.2" y="563.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.33%)</title><rect x="319.2" y="547.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1328010882.accept (1 samples, 0.08%)</title><rect x="322.1" y="531.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.82%)</title><rect x="323.1" y="563.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.1" y="574.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (154 samples, 12.77%)</title><rect x="344.6" y="723.0" width="150.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.6" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (154 samples, 12.77%)</title><rect x="344.6" y="707.0" width="150.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.6" y="718.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (154 samples, 12.77%)</title><rect x="344.6" y="691.0" width="150.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.6" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 12.77%)</title><rect x="344.6" y="675.0" width="150.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.6" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 12.77%)</title><rect x="344.6" y="659.0" width="150.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.6" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (154 samples, 12.77%)</title><rect x="344.6" y="643.0" width="150.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.6" y="654.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 4.64%)</title><rect x="344.6" y="627.0" width="54.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.6" y="638.0">com/f..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="353.4" y="611.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="356.4" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.75%)</title><rect x="354.4" y="611.0" width="8.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="357.4" y="622.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="356.4" y="595.0" width="6.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="359.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 0.83%)</title><rect x="363.2" y="611.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.75%)</title><rect x="364.2" y="595.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.75%)</title><rect x="364.2" y="579.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.75%)</title><rect x="364.2" y="563.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.2" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.75%)</title><rect x="364.2" y="547.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.2" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.75%)</title><rect x="364.2" y="531.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.2" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.75%)</title><rect x="364.2" y="515.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 2.24%)</title><rect x="373.0" y="611.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.0" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.82%)</title><rect x="377.9" y="595.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.9" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.33%)</title><rect x="378.9" y="579.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.9" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="378.9" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="381.9" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="378.9" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="381.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="378.9" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="381.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.25%)</title><rect x="379.9" y="563.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.17%)</title><rect x="382.8" y="579.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.17%)</title><rect x="382.8" y="563.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.08%)</title><rect x="382.8" y="547.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="382.8" y="531.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="385.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="382.8" y="515.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="385.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="382.8" y="499.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="385.8" y="510.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="382.8" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="385.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="383.8" y="547.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="383.8" y="531.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="386.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="383.8" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="383.8" y="499.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="386.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="383.8" y="483.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="386.8" y="494.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="383.8" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="386.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (15 samples, 1.24%)</title><rect x="384.7" y="579.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (92 samples, 7.63%)</title><rect x="399.4" y="627.0" width="90.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.4" y="638.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="399.4" y="611.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.17%)</title><rect x="401.4" y="611.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="403.3" y="611.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="403.3" y="595.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.91%)</title><rect x="407.2" y="611.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.83%)</title><rect x="408.2" y="595.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.75%)</title><rect x="409.2" y="579.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.33%)</title><rect x="414.1" y="563.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="417.0" y="547.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.33%)</title><rect x="418.0" y="611.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="419.0" y="595.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (68 samples, 5.64%)</title><rect x="421.9" y="611.0" width="66.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.9" y="622.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="421.9" y="595.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (67 samples, 5.56%)</title><rect x="422.9" y="595.0" width="65.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.9" y="606.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.33%)</title><rect x="423.9" y="579.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="426.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.58%)</title><rect x="428.8" y="563.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.58%)</title><rect x="428.8" y="547.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.58%)</title><rect x="428.8" y="531.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.33%)</title><rect x="435.6" y="563.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 4.15%)</title><rect x="439.5" y="579.0" width="49.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.5" y="590.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.15%)</title><rect x="439.5" y="563.0" width="49.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.5" y="574.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.06%)</title><rect x="440.5" y="547.0" width="48.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.5" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.16%)</title><rect x="448.3" y="531.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.58%)</title><rect x="453.2" y="515.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.58%)</title><rect x="453.2" y="499.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.58%)</title><rect x="453.2" y="483.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="456.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.50%)</title><rect x="454.2" y="467.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="460.1" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="460.1" y="499.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="460.1" y="483.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="461.1" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.50%)</title><rect x="462.0" y="531.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.50%)</title><rect x="462.0" y="515.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.50%)</title><rect x="462.0" y="499.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.50%)</title><rect x="462.0" y="483.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.50%)</title><rect x="462.0" y="467.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.50%)</title><rect x="467.9" y="531.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.50%)</title><rect x="467.9" y="515.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.50%)</title><rect x="467.9" y="499.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.50%)</title><rect x="467.9" y="483.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.9" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.50%)</title><rect x="467.9" y="467.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.75%)</title><rect x="473.8" y="531.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.75%)</title><rect x="473.8" y="515.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.75%)</title><rect x="473.8" y="499.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="480.6" y="483.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.6" y="494.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="481.6" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="484.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.50%)</title><rect x="482.6" y="531.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (6 samples, 0.50%)</title><rect x="482.6" y="515.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.6" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.17%)</title><rect x="486.5" y="499.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="488.5" y="611.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.50%)</title><rect x="489.4" y="627.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="489.4" y="611.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.41%)</title><rect x="490.4" y="611.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.41%)</title><rect x="490.4" y="595.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.41%)</title><rect x="490.4" y="579.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="490.4" y="563.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (335 samples, 27.78%)</title><rect x="495.3" y="723.0" width="327.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.3" y="734.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.58%)</title><rect x="498.2" y="707.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="501.2" y="718.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="501.2" y="691.0" width="3.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="504.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (61 samples, 5.06%)</title><rect x="505.1" y="707.0" width="59.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.1" y="718.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (61 samples, 5.06%)</title><rect x="505.1" y="691.0" width="59.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.1" y="702.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (60 samples, 4.98%)</title><rect x="506.1" y="675.0" width="58.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.1" y="686.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="511.0" y="659.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="511.0" y="643.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="511.0" y="627.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="514.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="511.0" y="611.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="514.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="515.9" y="659.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="515.9" y="643.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="515.9" y="627.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="515.9" y="611.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.17%)</title><rect x="515.9" y="595.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 3.98%)</title><rect x="517.8" y="659.0" width="47.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.8" y="670.0">java..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="549.1" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 1.24%)</title><rect x="550.1" y="643.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.33%)</title><rect x="552.1" y="627.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="556.0" y="627.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="556.0" y="611.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.58%)</title><rect x="556.9" y="627.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.9" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="563.8" y="627.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="566.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.75%)</title><rect x="564.8" y="707.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.75%)</title><rect x="564.8" y="691.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (181 samples, 15.01%)</title><rect x="573.6" y="707.0" width="177.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="576.6" y="718.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (169 samples, 14.01%)</title><rect x="573.6" y="691.0" width="165.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.6" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 5.22%)</title><rect x="585.3" y="675.0" width="61.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.3" y="686.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.32%)</title><rect x="605.9" y="659.0" width="27.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.9" y="670.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.24%)</title><rect x="606.8" y="643.0" width="26.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.8" y="654.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.16%)</title><rect x="611.7" y="627.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="614.7" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.16%)</title><rect x="611.7" y="611.0" width="13.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.7" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.16%)</title><rect x="611.7" y="595.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.7" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.08%)</title><rect x="612.7" y="579.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="612.7" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="615.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="612.7" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="615.7" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.33%)</title><rect x="613.7" y="563.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="616.7" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="613.7" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="616.7" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="613.7" y="531.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.7" y="542.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.25%)</title><rect x="614.7" y="547.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="617.7" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.25%)</title><rect x="614.7" y="531.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="617.7" y="542.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="614.7" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="617.7" y="526.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.17%)</title><rect x="615.7" y="515.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="618.7" y="526.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.17%)</title><rect x="617.6" y="563.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="620.6" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.41%)</title><rect x="619.6" y="563.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="622.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.33%)</title><rect x="619.6" y="547.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="622.6" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="619.6" y="531.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.6" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="619.6" y="515.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="622.6" y="526.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="619.6" y="499.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.6" y="510.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="620.5" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.5" y="542.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="621.5" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.5" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="622.5" y="531.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="625.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="623.5" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.5" y="558.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.08%)</title><rect x="624.5" y="563.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="627.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="625.4" y="627.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="628.4" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.17%)</title><rect x="629.4" y="627.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.4" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="631.3" y="627.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="634.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="633.3" y="659.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.3" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="633.3" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="636.3" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="633.3" y="627.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="636.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="633.3" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="636.3" y="622.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="634.2" y="659.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="637.2" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.00%)</title><rect x="635.2" y="659.0" width="11.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="638.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.66%)</title><rect x="647.0" y="675.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="650.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="647.0" y="659.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.58%)</title><rect x="647.9" y="659.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="650.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.58%)</title><rect x="647.9" y="643.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="650.9" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 7.13%)</title><rect x="654.8" y="675.0" width="84.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.8" y="686.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 6.97%)</title><rect x="656.7" y="659.0" width="82.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.7" y="670.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="656.7" y="643.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="656.7" y="627.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="656.7" y="611.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="656.7" y="595.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.7" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (79 samples, 6.55%)</title><rect x="661.6" y="643.0" width="77.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.6" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 5.56%)</title><rect x="673.4" y="627.0" width="65.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.4" y="638.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.99%)</title><rect x="703.7" y="611.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.7" y="622.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.33%)</title><rect x="718.4" y="595.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.08%)</title><rect x="722.3" y="595.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="725.3" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.25%)</title><rect x="732.1" y="579.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="735.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="733.1" y="563.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="733.1" y="547.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="736.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="734.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.0" y="542.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="734.0" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.0" y="526.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.33%)</title><rect x="735.0" y="595.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="738.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.00%)</title><rect x="738.9" y="691.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.00%)</title><rect x="738.9" y="675.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="741.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.00%)</title><rect x="738.9" y="659.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 1.00%)</title><rect x="738.9" y="643.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.9" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="743.8" y="627.0" width="4.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="746.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="745.8" y="611.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="748.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="748.7" y="627.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 5.06%)</title><rect x="750.7" y="707.0" width="59.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.7" y="718.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/34722430.process (1 samples, 0.08%)</title><rect x="750.7" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="753.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (1 samples, 0.08%)</title><rect x="750.7" y="675.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="750.7" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="750.7" y="643.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="753.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="750.7" y="627.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="753.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="750.7" y="611.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="753.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="750.7" y="595.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (60 samples, 4.98%)</title><rect x="751.7" y="691.0" width="58.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.7" y="702.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/34722430.process (21 samples, 1.74%)</title><rect x="754.6" y="675.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (20 samples, 1.66%)</title><rect x="755.6" y="659.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.41%)</title><rect x="756.6" y="643.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.6" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="766.3" y="627.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.3" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="766.3" y="611.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.3" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="766.3" y="595.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.3" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="766.3" y="579.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="769.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="767.3" y="563.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="770.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.41%)</title><rect x="768.3" y="627.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.3" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="769.3" y="611.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.3" y="622.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="769.3" y="595.0" width="3.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="772.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="773.2" y="643.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="773.2" y="627.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="776.2" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="773.2" y="611.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="773.2" y="595.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (8 samples, 0.66%)</title><rect x="775.1" y="675.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (8 samples, 0.66%)</title><rect x="775.1" y="659.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 0.66%)</title><rect x="775.1" y="643.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 0.66%)</title><rect x="775.1" y="627.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.66%)</title><rect x="775.1" y="611.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.66%)</title><rect x="775.1" y="595.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/34722430.process (3 samples, 0.25%)</title><rect x="780.0" y="579.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="783.0" y="675.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="786.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.25%)</title><rect x="783.9" y="659.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.9" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="785.9" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.9" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="785.9" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="788.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="785.9" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="788.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="785.9" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="788.9" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="785.9" y="579.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="788.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.50%)</title><rect x="786.9" y="675.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.9" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.33%)</title><rect x="788.8" y="659.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.8" y="670.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="788.8" y="643.0" width="3.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="791.8" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="791.8" y="643.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="794.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (12 samples, 1.00%)</title><rect x="792.8" y="675.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="794.7" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="797.7" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="795.7" y="659.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="795.7" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="795.7" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="798.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="795.7" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="795.7" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="798.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="795.7" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.7" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="795.7" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="798.7" y="574.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="795.7" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.7" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="795.7" y="531.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.7" y="542.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="795.7" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.7" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.66%)</title><rect x="796.7" y="659.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.50%)</title><rect x="804.5" y="675.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.41%)</title><rect x="805.5" y="659.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.41%)</title><rect x="805.5" y="643.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.33%)</title><rect x="805.5" y="627.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.33%)</title><rect x="805.5" y="611.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.33%)</title><rect x="805.5" y="595.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/1848517733.accept (2 samples, 0.17%)</title><rect x="805.5" y="579.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.5" y="590.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="807.4" y="579.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="810.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="809.4" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.4" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/461796820.linkToTargetMethod (1 samples, 0.08%)</title><rect x="810.4" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.4" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="810.4" y="691.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="813.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2123559757.get$Lambda (1 samples, 0.08%)</title><rect x="810.4" y="675.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="810.4" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="810.4" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="810.4" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="813.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="810.4" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.4" y="622.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="810.4" y="595.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="813.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.00%)</title><rect x="811.3" y="707.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.00%)</title><rect x="811.3" y="691.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.00%)</title><rect x="811.3" y="675.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="811.3" y="659.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.17%)</title><rect x="811.3" y="643.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="814.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.17%)</title><rect x="811.3" y="627.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2123559757.accept (1 samples, 0.08%)</title><rect x="811.3" y="611.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.3" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="812.3" y="611.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="815.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.83%)</title><rect x="813.3" y="659.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2123559757.accept (8 samples, 0.66%)</title><rect x="815.3" y="643.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="818.3" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="815.3" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="815.3" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="818.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="815.3" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="818.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="815.3" y="579.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="818.3" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="815.3" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="818.3" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="815.3" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="818.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (7 samples, 0.58%)</title><rect x="816.2" y="627.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (7 samples, 0.58%)</title><rect x="816.2" y="611.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="819.2" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.58%)</title><rect x="816.2" y="595.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.2" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.58%)</title><rect x="816.2" y="579.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.2" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="820.1" y="563.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="823.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="820.1" y="547.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="823.1" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.66%)</title><rect x="823.1" y="723.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.1" y="734.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.66%)</title><rect x="823.1" y="707.0" width="7.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="826.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.58%)</title><rect x="830.9" y="787.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.58%)</title><rect x="830.9" y="771.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.58%)</title><rect x="830.9" y="755.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="832.9" y="739.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="835.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1864098117.run (1 samples, 0.08%)</title><rect x="836.8" y="723.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (207 samples, 17.16%)</title><rect x="837.8" y="787.0" width="202.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="840.8" y="798.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (207 samples, 17.16%)</title><rect x="837.8" y="771.0" width="202.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="840.8" y="782.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 15.26%)</title><rect x="839.7" y="755.0" width="180.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.7" y="766.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (18 samples, 1.49%)</title><rect x="853.4" y="739.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="856.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.50%)</title><rect x="871.0" y="739.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.50%)</title><rect x="871.0" y="723.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.50%)</title><rect x="871.0" y="707.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="871.0" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.0" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="871.0" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.0" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="871.0" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="871.0" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="871.0" y="627.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="871.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.0" y="622.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="871.0" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="872.0" y="691.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="875.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (145 samples, 12.02%)</title><rect x="876.9" y="739.0" width="141.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="879.9" y="750.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (145 samples, 12.02%)</title><rect x="876.9" y="723.0" width="141.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="879.9" y="734.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="879.8" y="707.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="882.8" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="880.8" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="881.8" y="707.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="884.8" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (131 samples, 10.86%)</title><rect x="884.7" y="707.0" width="128.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="887.7" y="718.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="888.6" y="691.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.6" y="702.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="891.6" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.6" y="702.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.58%)</title><rect x="892.6" y="691.0" width="18.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="895.6" y="702.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.25%)</title><rect x="899.4" y="675.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.4" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="899.4" y="659.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="902.4" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="899.4" y="643.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="902.4" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="901.4" y="659.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="904.4" y="670.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="902.3" y="675.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="905.3" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.50%)</title><rect x="904.3" y="675.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.3" y="686.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="910.2" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.2" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="911.1" y="691.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="914.1" y="702.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="914.1" y="691.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="917.1" y="702.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.66%)</title><rect x="915.1" y="691.0" width="7.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="918.1" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.07%)</title><rect x="922.9" y="691.0" width="24.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="925.9" y="702.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 3.90%)</title><rect x="947.3" y="691.0" width="46.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="950.3" y="702.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.58%)</title><rect x="993.3" y="691.0" width="6.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="996.3" y="702.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="1000.2" y="691.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1003.2" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.33%)</title><rect x="1002.1" y="691.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1005.1" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1006.1" y="691.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1009.1" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.25%)</title><rect x="1007.0" y="691.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1010.0" y="702.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1010.0" y="691.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1013.0" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1010.9" y="691.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.9" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.41%)</title><rect x="1012.9" y="707.0" width="4.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1015.9" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1017.8" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.8" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1018.8" y="739.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.74%)</title><rect x="1019.8" y="755.0" width="20.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.74%)</title><rect x="1019.8" y="739.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1022.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.74%)</title><rect x="1019.8" y="723.0" width="20.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1022.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.74%)</title><rect x="1019.8" y="707.0" width="20.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1040.3" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1043.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1040.3" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1040.3" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1043.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.08%)</title><rect x="1040.3" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1043.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.08%)</title><rect x="1040.3" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1043.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.08%)</title><rect x="1040.3" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1043.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="1040.3" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1040.3" y="723.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="1040.3" y="707.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.08%)</title><rect x="1040.3" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.3" y="702.0"></text>
</g>
<g>
<title>start_thread (152 samples, 12.60%)</title><rect x="1041.3" y="835.0" width="148.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1044.3" y="846.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (152 samples, 12.60%)</title><rect x="1041.3" y="819.0" width="148.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1044.3" y="830.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.07%)</title><rect x="1041.3" y="803.0" width="24.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.3" y="814.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.58%)</title><rect x="1041.3" y="787.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.3" y="798.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.58%)</title><rect x="1041.3" y="771.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1044.3" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1041.3" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.3" y="766.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.50%)</title><rect x="1042.3" y="755.0" width="5.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1045.3" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.49%)</title><rect x="1048.1" y="787.0" width="17.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.1" y="798.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1048.1" y="771.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1048.1" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.1" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1048.1" y="739.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1051.1" y="750.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1049.1" y="755.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1052.1" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (12 samples, 1.00%)</title><rect x="1050.1" y="771.0" width="11.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.1" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.33%)</title><rect x="1050.1" y="755.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.1" y="766.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (4 samples, 0.33%)</title><rect x="1050.1" y="739.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.1" y="750.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (4 samples, 0.33%)</title><rect x="1050.1" y="723.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.1" y="734.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.17%)</title><rect x="1050.1" y="707.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.1" y="718.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.17%)</title><rect x="1050.1" y="691.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.1" y="702.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.08%)</title><rect x="1050.1" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.1" y="686.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.08%)</title><rect x="1051.1" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.1" y="686.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.08%)</title><rect x="1051.1" y="659.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.1" y="670.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1052.0" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.0" y="718.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1052.0" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.0" y="702.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.08%)</title><rect x="1053.0" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.0" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (7 samples, 0.58%)</title><rect x="1054.0" y="755.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.0" y="766.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 0.50%)</title><rect x="1054.0" y="739.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.0" y="750.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1058.9" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="734.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1058.9" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.9" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1059.9" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.9" y="750.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1059.9" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1062.9" y="734.0"></text>
</g>
<g>
<title>SubTasksDone::is_task_claimed(unsigned int) (1 samples, 0.08%)</title><rect x="1060.8" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.8" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="1061.8" y="771.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.8" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="1061.8" y="755.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1061.8" y="739.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.8" y="750.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.33%)</title><rect x="1061.8" y="723.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.8" y="734.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.33%)</title><rect x="1061.8" y="707.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.8" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.33%)</title><rect x="1061.8" y="691.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.8" y="702.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1063.8" y="675.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.8" y="686.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.08%)</title><rect x="1063.8" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.8" y="670.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1064.8" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (126 samples, 10.45%)</title><rect x="1065.7" y="803.0" width="123.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.7" y="814.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (126 samples, 10.45%)</title><rect x="1065.7" y="787.0" width="123.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.7" y="798.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (125 samples, 10.36%)</title><rect x="1065.7" y="771.0" width="122.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.7" y="782.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (124 samples, 10.28%)</title><rect x="1065.7" y="755.0" width="121.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.7" y="766.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (123 samples, 10.20%)</title><rect x="1065.7" y="739.0" width="120.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.7" y="750.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (123 samples, 10.20%)</title><rect x="1065.7" y="723.0" width="120.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.7" y="734.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 4.73%)</title><rect x="1065.7" y="707.0" width="55.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.7" y="718.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1065.7" y="691.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.7" y="702.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="1065.7" y="675.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.7" y="686.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="1065.7" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.7" y="670.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1066.7" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.7" y="670.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.08%)</title><rect x="1066.7" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.7" y="654.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1067.7" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.7" y="702.0"></text>
</g>
<g>
<title>jmpCon_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1067.7" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.7" y="686.0"></text>
</g>
<g>
<title>cmpOpOper::ccode() const (1 samples, 0.08%)</title><rect x="1067.7" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.7" y="670.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1068.7" y="691.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.7" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.41%)</title><rect x="1069.7" y="691.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.7" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.33%)</title><rect x="1069.7" y="675.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.7" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1071.6" y="659.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.6" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1071.6" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.6" y="654.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1071.6" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.6" y="638.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1071.6" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.6" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1071.6" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.6" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1071.6" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.6" y="590.0"></text>
</g>
<g>
<title>TypeKlassPtr::hash() const (1 samples, 0.08%)</title><rect x="1071.6" y="563.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.6" y="574.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1072.6" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.6" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1072.6" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.6" y="638.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.08%)</title><rect x="1073.6" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.6" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.25%)</title><rect x="1074.5" y="691.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="1074.5" y="675.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.5" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1074.5" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.5" y="670.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1074.5" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.5" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1075.5" y="659.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (45 samples, 3.73%)</title><rect x="1077.5" y="691.0" width="44.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.5" y="702.0">Phas..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.08%)</title><rect x="1078.5" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.5" y="686.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1079.4" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="1080.4" y="675.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.4" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.17%)</title><rect x="1081.4" y="659.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.4" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1082.4" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.4" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.25%)</title><rect x="1083.3" y="675.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.3" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1083.3" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.3" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1084.3" y="659.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.3" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1085.3" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.3" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.75%)</title><rect x="1086.3" y="675.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.3" y="686.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="1090.2" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1091.2" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1091.2" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.2" y="654.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1091.2" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.2" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.25%)</title><rect x="1092.2" y="659.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (2 samples, 0.17%)</title><rect x="1093.1" y="643.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.1" y="654.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1093.1" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.1" y="638.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.08%)</title><rect x="1094.1" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.66%)</title><rect x="1095.1" y="675.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.1" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1097.0" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.41%)</title><rect x="1098.0" y="659.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.0" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1101.0" y="643.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="1102.9" y="675.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1103.9" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.25%)</title><rect x="1104.9" y="675.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.9" y="686.0"></text>
</g>
<g>
<title>MachCallNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1105.9" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.9" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1106.8" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="1107.8" y="675.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1109.8" y="675.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1110.7" y="659.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.7" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.33%)</title><rect x="1112.7" y="675.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.7" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1113.7" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.7" y="670.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.08%)</title><rect x="1113.7" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.7" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1114.7" y="659.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="670.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.33%)</title><rect x="1116.6" y="675.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.6" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1118.6" y="659.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.6" y="670.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.08%)</title><rect x="1120.5" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.5" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (54 samples, 4.48%)</title><rect x="1121.5" y="707.0" width="52.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="718.0">Compi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.17%)</title><rect x="1121.5" y="691.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.5" y="702.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.17%)</title><rect x="1121.5" y="675.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.5" y="686.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1122.5" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.5" y="670.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.08%)</title><rect x="1122.5" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1123.5" y="691.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1123.5" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1123.5" y="659.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1126.5" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1124.4" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.4" y="702.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1124.4" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.4" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1124.4" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.4" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1124.4" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.4" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1125.4" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.4" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1125.4" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (38 samples, 3.15%)</title><rect x="1126.4" y="691.0" width="37.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.4" y="702.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1126.4" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.4" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1126.4" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.4" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1126.4" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.4" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1126.4" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.4" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1126.4" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1126.4" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.08%)</title><rect x="1126.4" y="579.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.4" y="590.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1127.4" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.41%)</title><rect x="1128.4" y="675.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.33%)</title><rect x="1133.3" y="675.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 1.49%)</title><rect x="1137.2" y="675.0" width="17.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 1.33%)</title><rect x="1139.1" y="659.0" width="15.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1139.1" y="643.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 1.08%)</title><rect x="1141.1" y="643.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1149.9" y="627.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1152.8" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.8" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1153.8" y="643.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1156.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1154.8" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1155.8" y="675.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1156.7" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1157.7" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1157.7" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1157.7" y="627.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.41%)</title><rect x="1158.7" y="675.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.7" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.41%)</title><rect x="1158.7" y="659.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="670.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.7" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.7" y="654.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.6" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="654.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.08%)</title><rect x="1160.6" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="638.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1161.6" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="654.0"></text>
</g>
<g>
<title>IfNode::is_range_check(Node*&amp;, Node*&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1161.6" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="638.0"></text>
</g>
<g>
<title>Node::find_int_type() const (1 samples, 0.08%)</title><rect x="1161.6" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.6" y="622.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.6" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1162.6" y="627.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1162.6" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.66%)</title><rect x="1163.6" y="691.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.6" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.58%)</title><rect x="1164.6" y="675.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="686.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.6" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="670.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.5" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.5" y="670.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1165.5" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.5" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.5" y="659.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1167.5" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1167.5" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.5" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="670.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.08%)</title><rect x="1168.5" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="654.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1169.5" y="659.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1169.5" y="643.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="627.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="611.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="595.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="579.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="563.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="547.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="531.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="515.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="499.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="483.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.5" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.5" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="451.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="435.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.5" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="419.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.5" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="403.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="387.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.5" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="371.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="339.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.5" y="334.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.5" y="307.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.5" y="318.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.5" y="291.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="302.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.4" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1170.4" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.4" y="462.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1171.4" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1171.4" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1171.4" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.4" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1171.4" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1172.4" y="691.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1172.4" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.4" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1172.4" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.4" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.4" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="654.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.4" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="638.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1172.4" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="622.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1172.4" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="606.0"></text>
</g>
<g>
<title>TypeRawPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1172.4" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.4" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.08%)</title><rect x="1173.4" y="675.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::set_eden_pointers(Node*&amp;, Node*&amp;) (1 samples, 0.08%)</title><rect x="1173.4" y="659.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.91%)</title><rect x="1174.3" y="707.0" width="10.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.91%)</title><rect x="1174.3" y="691.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.91%)</title><rect x="1174.3" y="675.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.91%)</title><rect x="1174.3" y="659.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.91%)</title><rect x="1174.3" y="643.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.83%)</title><rect x="1174.3" y="627.0" width="9.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.66%)</title><rect x="1174.3" y="611.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.66%)</title><rect x="1174.3" y="595.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1174.3" y="579.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1174.3" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1174.3" y="547.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1174.3" y="531.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.17%)</title><rect x="1174.3" y="515.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.17%)</title><rect x="1174.3" y="499.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.17%)</title><rect x="1174.3" y="483.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.3" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1174.3" y="467.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.3" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.17%)</title><rect x="1174.3" y="451.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.3" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.17%)</title><rect x="1174.3" y="435.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1174.3" y="419.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.3" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1174.3" y="403.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.17%)</title><rect x="1174.3" y="387.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.17%)</title><rect x="1174.3" y="371.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.17%)</title><rect x="1174.3" y="355.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.17%)</title><rect x="1174.3" y="339.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.3" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.17%)</title><rect x="1174.3" y="323.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="334.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1174.3" y="307.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.3" y="318.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1174.3" y="291.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="302.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1174.3" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.3" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1174.3" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1175.3" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="318.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1175.3" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="302.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.3" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="286.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.08%)</title><rect x="1175.3" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1176.3" y="515.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1176.3" y="499.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1176.3" y="483.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1176.3" y="467.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1176.3" y="451.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1176.3" y="435.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1176.3" y="419.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1176.3" y="403.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1176.3" y="387.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.3" y="371.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.3" y="355.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="339.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="323.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.3" y="307.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1176.3" y="291.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.3" y="275.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.3" y="259.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="243.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="227.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.3" y="211.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1176.3" y="195.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.3" y="179.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.3" y="163.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="147.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="131.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.3" y="115.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1176.3" y="99.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1176.3" y="83.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="67.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="51.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="35.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="99.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="67.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1177.3" y="51.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="62.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="35.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1178.3" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="366.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.2" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.2" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.2" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.2" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.2" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.2" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.2" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.2" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.2" y="387.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="398.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1179.2" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1179.2" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="366.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1179.2" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="531.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1180.2" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="467.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1181.2" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1181.2" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.2" y="611.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.2" y="595.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.2" y="579.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.2" y="563.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.2" y="547.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.2" y="531.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.2" y="515.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.2" y="499.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.2" y="483.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.2" y="467.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.2" y="451.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.2" y="435.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.2" y="419.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="387.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="275.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="259.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="243.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="254.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="238.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="211.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="371.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1184.1" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.08%)</title><rect x="1184.1" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1184.1" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1185.1" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="718.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1185.1" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.1" y="702.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1185.1" y="675.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1185.1" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="670.0"></text>
</g>
<g>
<title>HeapRegion::add_strong_code_root_locked(nmethod*) (1 samples, 0.08%)</title><rect x="1185.1" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="654.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.08%)</title><rect x="1186.1" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.08%)</title><rect x="1186.1" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1187.1" y="755.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1187.1" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1187.1" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.08%)</title><rect x="1187.1" y="707.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1188.0" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1188.0" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1188.0" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="750.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1188.0" y="723.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.0" y="734.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1188.0" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="718.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="1188.0" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.08%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.08%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
</g>
</svg>
