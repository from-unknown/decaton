<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (1,283 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (279 samples, 21.75%)</title><rect x="10.0" y="1059.0" width="256.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (279 samples, 21.75%)</title><rect x="10.0" y="1043.0" width="256.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (277 samples, 21.59%)</title><rect x="10.0" y="1027.0" width="254.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.23%)</title><rect x="10.0" y="1011.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.23%)</title><rect x="10.0" y="995.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="10.9" y="979.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="10.9" y="963.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="10.9" y="947.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="10.9" y="931.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="10.9" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="10.9" y="899.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="11.8" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.16%)</title><rect x="12.8" y="1011.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.16%)</title><rect x="12.8" y="995.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="12.8" y="979.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/1207268042.accept (1 samples, 0.08%)</title><rect x="13.7" y="963.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.08%)</title><rect x="13.7" y="947.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="13.7" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.7" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="13.7" y="915.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (193 samples, 15.04%)</title><rect x="14.6" y="1011.0" width="177.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.6" y="1022.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1607585257.accept (184 samples, 14.34%)</title><rect x="14.6" y="995.0" width="169.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.6" y="1006.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (181 samples, 14.11%)</title><rect x="17.4" y="979.0" width="166.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.4" y="990.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="20.1" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (159 samples, 12.39%)</title><rect x="21.0" y="963.0" width="146.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="974.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (159 samples, 12.39%)</title><rect x="21.0" y="947.0" width="146.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.0" y="958.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (159 samples, 12.39%)</title><rect x="21.0" y="931.0" width="146.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.0" y="942.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 12.39%)</title><rect x="21.0" y="915.0" width="146.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.0" y="926.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 12.39%)</title><rect x="21.0" y="899.0" width="146.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.0" y="910.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 12.39%)</title><rect x="21.0" y="883.0" width="146.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.0" y="894.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (110 samples, 8.57%)</title><rect x="62.4" y="867.0" width="101.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.4" y="878.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.48%)</title><rect x="64.3" y="851.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.48%)</title><rect x="64.3" y="835.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.48%)</title><rect x="64.3" y="819.0" width="17.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.39%)</title><rect x="81.7" y="851.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.39%)</title><rect x="81.7" y="835.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="82.7" y="819.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.7" y="830.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="82.7" y="803.0" width="1.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="85.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.16%)</title><rect x="84.5" y="819.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 6.55%)</title><rect x="86.3" y="851.0" width="77.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.3" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 6.55%)</title><rect x="86.3" y="835.0" width="77.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.3" y="846.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 6.47%)</title><rect x="87.3" y="819.0" width="76.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.3" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 6.39%)</title><rect x="87.3" y="803.0" width="75.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.3" y="814.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 6.24%)</title><rect x="89.1" y="787.0" width="73.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.1" y="798.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="90.0" y="771.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="93.0" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 5.38%)</title><rect x="91.9" y="771.0" width="63.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="94.9" y="782.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="94.6" y="755.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="97.6" y="766.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="97.4" y="755.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="99.2" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="102.2" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 2.96%)</title><rect x="101.1" y="755.0" width="34.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="104.1" y="766.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.39%)</title><rect x="136.0" y="755.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="139.0" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.25%)</title><rect x="140.6" y="755.0" width="14.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="143.6" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.47%)</title><rect x="155.3" y="771.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="158.3" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="160.8" y="771.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="163.8" y="782.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="162.7" y="803.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.23%)</title><rect x="163.6" y="867.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.23%)</title><rect x="163.6" y="851.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.23%)</title><rect x="163.6" y="835.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="165.4" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="166.4" y="867.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="166.4" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="166.4" y="835.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (5 samples, 0.39%)</title><rect x="167.3" y="963.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.39%)</title><rect x="167.3" y="947.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (9 samples, 0.70%)</title><rect x="171.9" y="963.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="174.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.70%)</title><rect x="171.9" y="947.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.70%)</title><rect x="171.9" y="931.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.31%)</title><rect x="180.1" y="963.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.31%)</title><rect x="180.1" y="947.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.31%)</title><rect x="180.1" y="931.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.31%)</title><rect x="180.1" y="915.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.31%)</title><rect x="180.1" y="899.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.1" y="910.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="183.8" y="995.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="186.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.47%)</title><rect x="185.7" y="995.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.47%)</title><rect x="185.7" y="979.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.47%)</title><rect x="185.7" y="963.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.47%)</title><rect x="185.7" y="947.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="191.2" y="995.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (79 samples, 6.16%)</title><rect x="192.1" y="1011.0" width="72.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.1" y="1022.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (78 samples, 6.08%)</title><rect x="193.0" y="995.0" width="71.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.0" y="1006.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (47 samples, 3.66%)</title><rect x="193.9" y="979.0" width="43.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.9" y="990.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="193.9" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="193.9" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="193.9" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.08%)</title><rect x="193.9" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (46 samples, 3.59%)</title><rect x="194.9" y="963.0" width="42.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.9" y="974.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="194.9" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="194.9" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="194.9" y="915.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (45 samples, 3.51%)</title><rect x="195.8" y="947.0" width="41.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.8" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (41 samples, 3.20%)</title><rect x="195.8" y="931.0" width="37.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.8" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (41 samples, 3.20%)</title><rect x="195.8" y="915.0" width="37.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.8" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (30 samples, 2.34%)</title><rect x="196.7" y="899.0" width="27.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.7" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (13 samples, 1.01%)</title><rect x="211.4" y="883.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="214.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (12 samples, 0.94%)</title><rect x="212.3" y="867.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (12 samples, 0.94%)</title><rect x="212.3" y="851.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (12 samples, 0.94%)</title><rect x="212.3" y="835.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (12 samples, 0.94%)</title><rect x="212.3" y="819.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (12 samples, 0.94%)</title><rect x="212.3" y="803.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (12 samples, 0.94%)</title><rect x="212.3" y="787.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="223.4" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="223.4" y="867.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="223.4" y="851.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.78%)</title><rect x="224.3" y="899.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.78%)</title><rect x="224.3" y="883.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.39%)</title><rect x="224.3" y="867.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.3" y="878.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.39%)</title><rect x="224.3" y="851.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.3" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="228.0" y="835.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="231.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.39%)</title><rect x="228.9" y="867.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.9" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.39%)</title><rect x="228.9" y="851.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="233.5" y="931.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="233.5" y="915.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="233.5" y="899.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="233.5" y="883.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="233.5" y="867.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="234.4" y="851.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="235.3" y="931.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="235.3" y="915.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.3" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.3" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.3" y="867.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="236.3" y="931.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.08%)</title><rect x="236.3" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="236.3" y="899.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="236.3" y="883.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.78%)</title><rect x="237.2" y="979.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.70%)</title><rect x="237.2" y="963.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.55%)</title><rect x="237.2" y="947.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="237.2" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="237.2" y="915.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="237.2" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="237.2" y="883.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="238.1" y="931.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="238.1" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.1" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="238.1" y="899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="238.1" y="883.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="238.1" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.1" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="238.1" y="851.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="238.1" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.getFence (1 samples, 0.08%)</title><rect x="238.1" y="819.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (4 samples, 0.31%)</title><rect x="239.0" y="931.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (4 samples, 0.31%)</title><rect x="239.0" y="915.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.0" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.23%)</title><rect x="239.0" y="899.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (3 samples, 0.23%)</title><rect x="239.0" y="883.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.0" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.08%)</title><rect x="239.0" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.0" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (2 samples, 0.16%)</title><rect x="239.9" y="867.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.9" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (2 samples, 0.16%)</title><rect x="239.9" y="851.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.9" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.08%)</title><rect x="241.8" y="899.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="242.7" y="931.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="242.7" y="915.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="242.7" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="242.7" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="242.7" y="867.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="242.7" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="242.7" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="242.7" y="819.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="242.7" y="803.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="242.7" y="787.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="242.7" y="771.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.7" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="242.7" y="755.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="245.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="243.6" y="947.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="243.6" y="931.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="243.6" y="915.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="243.6" y="899.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="243.6" y="883.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.6" y="894.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.08%)</title><rect x="244.5" y="867.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="247.5" y="878.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="244.5" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="247.5" y="862.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="244.5" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="247.5" y="846.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.08%)</title><rect x="244.5" y="819.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="247.5" y="830.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.08%)</title><rect x="244.5" y="803.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="247.5" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.08%)</title><rect x="244.5" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="247.5" y="798.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="244.5" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="247.5" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.08%)</title><rect x="244.5" y="755.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="247.5" y="766.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.08%)</title><rect x="244.5" y="739.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="247.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="245.4" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="245.4" y="947.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="245.4" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (12 samples, 0.94%)</title><rect x="246.4" y="979.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (10 samples, 0.78%)</title><rect x="246.4" y="963.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.16%)</title><rect x="247.3" y="947.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.16%)</title><rect x="247.3" y="931.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="247.3" y="915.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="247.3" y="883.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="851.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="247.3" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="819.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="803.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="247.3" y="771.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="247.3" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.08%)</title><rect x="248.2" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.08%)</title><rect x="248.2" y="899.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.08%)</title><rect x="248.2" y="883.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.08%)</title><rect x="248.2" y="867.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.55%)</title><rect x="249.1" y="947.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="249.1" y="931.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="249.1" y="915.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.39%)</title><rect x="251.0" y="931.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.16%)</title><rect x="251.0" y="915.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.16%)</title><rect x="251.0" y="899.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="251.0" y="883.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="254.0" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="251.0" y="867.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="252.8" y="915.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="252.8" y="899.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="252.8" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="252.8" y="867.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.8" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="252.8" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.8" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="252.8" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.8" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="252.8" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.8" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="252.8" y="803.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="253.7" y="915.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="253.7" y="899.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="253.7" y="883.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="253.7" y="867.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="253.7" y="851.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="253.7" y="835.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.7" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="253.7" y="819.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="256.7" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="254.6" y="819.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="257.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.16%)</title><rect x="255.6" y="963.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="255.6" y="947.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="255.6" y="931.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="255.6" y="915.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="255.6" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="255.6" y="883.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="255.6" y="867.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="255.6" y="851.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="255.6" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.08%)</title><rect x="255.6" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.08%)</title><rect x="255.6" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.08%)</title><rect x="255.6" y="787.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.08%)</title><rect x="255.6" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.validate (1 samples, 0.08%)</title><rect x="255.6" y="755.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.08%)</title><rect x="256.5" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="256.5" y="931.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.55%)</title><rect x="257.4" y="979.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.47%)</title><rect x="257.4" y="963.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.4" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="258.3" y="947.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/2112308115.accept (2 samples, 0.16%)</title><rect x="258.3" y="931.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.16%)</title><rect x="258.3" y="915.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="258.3" y="899.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (2 samples, 0.16%)</title><rect x="258.3" y="883.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="258.3" y="867.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="258.3" y="851.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.3" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="260.2" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.2" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="260.2" y="931.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.2" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="260.2" y="915.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.2" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.08%)</title><rect x="261.1" y="947.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="262.0" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="262.0" y="931.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="262.0" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.addListener (1 samples, 0.08%)</title><rect x="262.9" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="262.9" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="263.8" y="979.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="263.8" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="263.8" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="264.8" y="1027.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="264.8" y="1011.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="267.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.08%)</title><rect x="265.7" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (839 samples, 65.39%)</title><rect x="266.6" y="1059.0" width="771.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.6" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (839 samples, 65.39%)</title><rect x="266.6" y="1043.0" width="771.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.6" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (839 samples, 65.39%)</title><rect x="266.6" y="1027.0" width="771.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.6" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1305327612.run (580 samples, 45.21%)</title><rect x="271.2" y="1011.0" width="533.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.2" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (580 samples, 45.21%)</title><rect x="271.2" y="995.0" width="533.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.2" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (578 samples, 45.05%)</title><rect x="273.0" y="979.0" width="531.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.0" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (577 samples, 44.97%)</title><rect x="273.0" y="963.0" width="530.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.0" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="284.1" y="947.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="287.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.08%)</title><rect x="285.0" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.0" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.08%)</title><rect x="285.0" y="931.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="285.0" y="915.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="285.0" y="899.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (58 samples, 4.52%)</title><rect x="285.9" y="947.0" width="53.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.9" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="296.0" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (2 samples, 0.16%)</title><rect x="297.0" y="931.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (2 samples, 0.16%)</title><rect x="297.0" y="915.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/2145318887.get$Lambda (2 samples, 0.16%)</title><rect x="297.0" y="899.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="297.0" y="883.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="297.0" y="867.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="300.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="297.0" y="851.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="297.0" y="835.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="300.0" y="846.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="297.0" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="300.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="297.9" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="300.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (44 samples, 3.43%)</title><rect x="298.8" y="931.0" width="40.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.8" y="942.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (44 samples, 3.43%)</title><rect x="298.8" y="915.0" width="40.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.8" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (44 samples, 3.43%)</title><rect x="298.8" y="899.0" width="40.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.8" y="910.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.31%)</title><rect x="298.8" y="883.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="301.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.16%)</title><rect x="298.8" y="867.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.16%)</title><rect x="298.8" y="851.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/2145318887.accept (2 samples, 0.16%)</title><rect x="298.8" y="835.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.16%)</title><rect x="300.6" y="867.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (40 samples, 3.12%)</title><rect x="302.5" y="883.0" width="36.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.5" y="894.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/2145318887.accept (40 samples, 3.12%)</title><rect x="302.5" y="867.0" width="36.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="305.5" y="878.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (40 samples, 3.12%)</title><rect x="302.5" y="851.0" width="36.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.5" y="862.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (40 samples, 3.12%)</title><rect x="302.5" y="835.0" width="36.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.5" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (40 samples, 3.12%)</title><rect x="302.5" y="819.0" width="36.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.5" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (40 samples, 3.12%)</title><rect x="302.5" y="803.0" width="36.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.5" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (17 samples, 1.33%)</title><rect x="302.5" y="787.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (17 samples, 1.33%)</title><rect x="302.5" y="771.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/500717583.accept (2 samples, 0.16%)</title><rect x="310.7" y="755.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/1020518891.accept (2 samples, 0.16%)</title><rect x="312.6" y="755.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.6" y="766.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.31%)</title><rect x="314.4" y="755.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="317.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 1.79%)</title><rect x="318.1" y="787.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.1" y="798.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/500717583.accept (1 samples, 0.08%)</title><rect x="338.3" y="771.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.08%)</title><rect x="338.3" y="755.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (178 samples, 13.87%)</title><rect x="339.3" y="947.0" width="163.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.3" y="958.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/524241174.extract (178 samples, 13.87%)</title><rect x="339.3" y="931.0" width="163.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.3" y="942.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (178 samples, 13.87%)</title><rect x="339.3" y="915.0" width="163.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.3" y="926.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (178 samples, 13.87%)</title><rect x="339.3" y="899.0" width="163.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.3" y="910.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (178 samples, 13.87%)</title><rect x="339.3" y="883.0" width="163.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="342.3" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (178 samples, 13.87%)</title><rect x="339.3" y="867.0" width="163.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.3" y="878.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (66 samples, 5.14%)</title><rect x="339.3" y="851.0" width="60.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.3" y="862.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (40 samples, 3.12%)</title><rect x="339.3" y="835.0" width="36.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="342.3" y="846.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (39 samples, 3.04%)</title><rect x="339.3" y="819.0" width="35.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.3" y="830.0">com..</text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.86%)</title><rect x="355.8" y="803.0" width="10.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="358.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.47%)</title><rect x="360.4" y="787.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="363.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.70%)</title><rect x="365.9" y="803.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.70%)</title><rect x="365.9" y="787.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.70%)</title><rect x="365.9" y="771.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.70%)</title><rect x="365.9" y="755.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.70%)</title><rect x="365.9" y="739.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.9" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="374.2" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="377.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="375.1" y="819.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="375.1" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.1" y="814.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="375.1" y="787.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="378.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.03%)</title><rect x="376.0" y="835.0" width="24.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.0" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.16%)</title><rect x="376.0" y="819.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="377.0" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 1.87%)</title><rect x="377.9" y="819.0" width="22.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.9" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.31%)</title><rect x="381.6" y="803.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.70%)</title><rect x="385.2" y="803.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.70%)</title><rect x="385.2" y="787.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.70%)</title><rect x="385.2" y="771.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.55%)</title><rect x="393.5" y="803.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 7.72%)</title><rect x="400.0" y="851.0" width="91.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.0" y="862.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (7 samples, 0.55%)</title><rect x="400.0" y="835.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (7 samples, 0.55%)</title><rect x="400.0" y="819.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.39%)</title><rect x="400.0" y="803.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.23%)</title><rect x="401.8" y="787.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.16%)</title><rect x="404.6" y="803.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (15 samples, 1.17%)</title><rect x="406.4" y="835.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 1.17%)</title><rect x="406.4" y="819.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.4" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="414.7" y="803.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="417.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="414.7" y="787.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="417.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.08%)</title><rect x="416.5" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.16%)</title><rect x="417.4" y="803.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.4" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="419.3" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="422.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.39%)</title><rect x="420.2" y="835.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.39%)</title><rect x="420.2" y="819.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.39%)</title><rect x="420.2" y="803.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.23%)</title><rect x="422.0" y="787.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.55%)</title><rect x="424.8" y="835.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.55%)</title><rect x="424.8" y="819.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="425.7" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="428.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="425.7" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="428.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="425.7" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="428.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="425.7" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="428.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="425.7" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="428.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.39%)</title><rect x="426.6" y="803.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="429.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.39%)</title><rect x="426.6" y="787.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (5 samples, 0.39%)</title><rect x="426.6" y="771.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="429.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (65 samples, 5.07%)</title><rect x="431.2" y="835.0" width="59.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="434.2" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.16%)</title><rect x="431.2" y="819.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 4.91%)</title><rect x="433.1" y="819.0" width="57.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.1" y="830.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (2 samples, 0.16%)</title><rect x="433.1" y="803.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.40%)</title><rect x="434.9" y="803.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.39%)</title><rect x="437.7" y="787.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.39%)</title><rect x="437.7" y="771.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.39%)</title><rect x="437.7" y="755.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.78%)</title><rect x="442.3" y="787.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 3.35%)</title><rect x="451.5" y="803.0" width="39.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.5" y="814.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.23%)</title><rect x="451.5" y="787.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 3.12%)</title><rect x="454.2" y="787.0" width="36.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.2" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.04%)</title><rect x="455.1" y="771.0" width="35.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.1" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.86%)</title><rect x="460.7" y="755.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="463.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="467.1" y="739.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="470.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="467.1" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="467.1" y="707.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="467.1" y="691.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="467.1" y="675.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.23%)</title><rect x="468.0" y="739.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.55%)</title><rect x="470.8" y="755.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.31%)</title><rect x="473.5" y="739.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="473.5" y="723.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="476.5" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="473.5" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="476.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.23%)</title><rect x="474.5" y="723.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.23%)</title><rect x="474.5" y="707.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="477.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.23%)</title><rect x="474.5" y="691.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.70%)</title><rect x="477.2" y="755.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.70%)</title><rect x="477.2" y="739.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.70%)</title><rect x="477.2" y="723.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.70%)</title><rect x="477.2" y="707.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.2" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.70%)</title><rect x="477.2" y="691.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="477.2" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="480.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="477.2" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="477.2" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.2" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="477.2" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="480.2" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="477.2" y="611.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="480.2" y="622.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.62%)</title><rect x="478.1" y="675.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.31%)</title><rect x="485.5" y="755.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.31%)</title><rect x="485.5" y="739.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="488.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.31%)</title><rect x="485.5" y="723.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.16%)</title><rect x="489.2" y="755.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.01%)</title><rect x="491.0" y="851.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.01%)</title><rect x="491.0" y="835.0" width="12.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="494.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.01%)</title><rect x="491.0" y="819.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (5 samples, 0.39%)</title><rect x="493.8" y="803.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.16%)</title><rect x="498.4" y="803.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.23%)</title><rect x="500.2" y="803.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.23%)</title><rect x="500.2" y="787.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (322 samples, 25.10%)</title><rect x="503.0" y="947.0" width="296.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="506.0" y="958.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="508.5" y="931.0" width="2.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="511.5" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="508.5" y="915.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="511.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (60 samples, 4.68%)</title><rect x="511.2" y="931.0" width="55.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.2" y="942.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="512.2" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.2" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (58 samples, 4.52%)</title><rect x="513.1" y="915.0" width="53.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.1" y="926.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 4.29%)</title><rect x="515.8" y="899.0" width="50.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.8" y="910.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.70%)</title><rect x="516.8" y="883.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.70%)</title><rect x="516.8" y="867.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.70%)</title><rect x="516.8" y="851.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.70%)</title><rect x="516.8" y="835.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="525.0" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="525.0" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="528.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="525.0" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="528.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="525.0" y="835.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (44 samples, 3.43%)</title><rect x="526.0" y="883.0" width="40.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.0" y="894.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.56%)</title><rect x="548.0" y="867.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.55%)</title><rect x="551.7" y="851.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="554.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.62%)</title><rect x="558.2" y="851.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.2" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="565.5" y="851.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="568.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.39%)</title><rect x="566.4" y="931.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.31%)</title><rect x="567.3" y="915.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="570.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (154 samples, 12.00%)</title><rect x="571.0" y="931.0" width="141.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.0" y="942.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (139 samples, 10.83%)</title><rect x="578.4" y="915.0" width="127.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.4" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (26 samples, 2.03%)</title><rect x="588.5" y="899.0" width="23.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.5" y="910.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="588.5" y="883.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="588.5" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="588.5" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="591.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="588.5" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="591.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="588.5" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="588.5" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="591.5" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="588.5" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="588.5" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 1.95%)</title><rect x="589.4" y="883.0" width="23.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="592.4" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.70%)</title><rect x="596.8" y="867.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.8" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.62%)</title><rect x="597.7" y="851.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="600.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.62%)</title><rect x="597.7" y="835.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.7" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.62%)</title><rect x="597.7" y="819.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="600.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.55%)</title><rect x="598.6" y="803.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="601.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="599.5" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="602.5" y="798.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="599.5" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="602.5" y="782.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="600.5" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="603.5" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.23%)</title><rect x="601.4" y="787.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="601.4" y="771.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.4" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="601.4" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="601.4" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="604.4" y="750.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="601.4" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="604.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="602.3" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="605.3" y="766.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="603.2" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="606.2" y="766.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.08%)</title><rect x="604.1" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="607.1" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="605.1" y="867.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="608.1" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.55%)</title><rect x="606.0" y="867.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="609.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (14 samples, 1.09%)</title><rect x="612.4" y="899.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.23%)</title><rect x="612.4" y="883.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.4" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.23%)</title><rect x="612.4" y="867.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.86%)</title><rect x="615.2" y="883.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="618.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (11 samples, 0.86%)</title><rect x="615.2" y="867.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.2" y="878.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="625.3" y="899.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="628.3" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="627.1" y="899.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="630.1" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (84 samples, 6.55%)</title><rect x="629.0" y="899.0" width="77.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.0" y="910.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 6.55%)</title><rect x="629.0" y="883.0" width="77.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="632.0" y="894.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.70%)</title><rect x="629.0" y="867.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.70%)</title><rect x="629.0" y="851.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.70%)</title><rect x="629.0" y="835.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.70%)</title><rect x="629.0" y="819.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="632.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.31%)</title><rect x="637.2" y="867.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.31%)</title><rect x="637.2" y="851.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.31%)</title><rect x="637.2" y="835.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.31%)</title><rect x="637.2" y="819.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.23%)</title><rect x="638.2" y="803.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.2" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (71 samples, 5.53%)</title><rect x="640.9" y="867.0" width="65.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.9" y="878.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (65 samples, 5.07%)</title><rect x="646.4" y="851.0" width="59.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.4" y="862.0">java/u..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="676.8" y="835.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="679.8" y="846.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.08%)</title><rect x="676.8" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="679.8" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="676.8" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="679.8" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="676.8" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="679.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.42%)</title><rect x="677.7" y="835.0" width="28.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.7" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.39%)</title><rect x="686.9" y="819.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.70%)</title><rect x="691.5" y="819.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.5" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="698.9" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.9" y="814.0"></text>
</g>
<g>
<title>vtable stub (7 samples, 0.55%)</title><rect x="699.8" y="819.0" width="6.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="702.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.39%)</title><rect x="706.2" y="915.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="709.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.39%)</title><rect x="706.2" y="899.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.39%)</title><rect x="706.2" y="883.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.39%)</title><rect x="706.2" y="867.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.2" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="710.8" y="915.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="713.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (73 samples, 5.69%)</title><rect x="712.7" y="931.0" width="67.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="715.7" y="942.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (2 samples, 0.16%)</title><rect x="712.7" y="915.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (71 samples, 5.53%)</title><rect x="714.5" y="915.0" width="65.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.5" y="926.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1477371236.process (23 samples, 1.79%)</title><rect x="718.2" y="899.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.2" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (22 samples, 1.71%)</title><rect x="719.1" y="883.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.56%)</title><rect x="719.1" y="867.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.1" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="720.0" y="851.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.0" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="720.0" y="835.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="723.0" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="720.0" y="819.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.0" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="720.0" y="803.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="723.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="720.9" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.78%)</title><rect x="721.9" y="851.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="724.9" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.70%)</title><rect x="722.8" y="835.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="725.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.62%)</title><rect x="723.7" y="819.0" width="7.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="726.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="731.1" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="734.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.47%)</title><rect x="732.0" y="851.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="735.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="737.5" y="867.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="737.5" y="851.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="737.5" y="835.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="740.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="737.5" y="819.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (9 samples, 0.70%)</title><rect x="739.3" y="899.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="742.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskDataBytes (1 samples, 0.08%)</title><rect x="747.6" y="899.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="750.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.39%)</title><rect x="748.5" y="899.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="748.5" y="883.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.16%)</title><rect x="751.3" y="883.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.16%)</title><rect x="751.3" y="867.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.16%)</title><rect x="751.3" y="851.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="754.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="753.1" y="899.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.23%)</title><rect x="753.1" y="883.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (2 samples, 0.16%)</title><rect x="755.9" y="899.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1881470562.get (2 samples, 0.16%)</title><rect x="755.9" y="883.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (2 samples, 0.16%)</title><rect x="755.9" y="867.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.9" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1259652483.linkToTargetMethod (1 samples, 0.08%)</title><rect x="757.7" y="899.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.7" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/438135304.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="757.7" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1881470562.get$Lambda (1 samples, 0.08%)</title><rect x="757.7" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.7" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="758.7" y="899.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="761.7" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.47%)</title><rect x="759.6" y="899.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.31%)</title><rect x="761.4" y="883.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.4" y="894.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="761.4" y="867.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="764.4" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="763.3" y="867.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="765.1" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="765.1" y="883.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.1" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.08%)</title><rect x="765.1" y="867.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.1" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.08%)</title><rect x="765.1" y="851.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="768.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.55%)</title><rect x="766.0" y="899.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.47%)</title><rect x="766.9" y="883.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.08%)</title><rect x="772.4" y="899.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="775.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.55%)</title><rect x="773.4" y="899.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.55%)</title><rect x="773.4" y="883.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.55%)</title><rect x="773.4" y="867.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="776.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.39%)</title><rect x="773.4" y="851.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="776.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.39%)</title><rect x="773.4" y="835.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.39%)</title><rect x="773.4" y="819.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/1719780155.accept (2 samples, 0.16%)</title><rect x="775.2" y="803.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="778.2" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="777.0" y="803.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="780.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.16%)</title><rect x="778.0" y="851.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/1719780155.accept (1 samples, 0.08%)</title><rect x="778.9" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="781.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.08%)</title><rect x="778.9" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="781.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="779.8" y="931.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.8" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="779.8" y="915.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.8" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="779.8" y="899.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.8" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="779.8" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="782.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="780.7" y="883.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="780.7" y="867.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="783.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="780.7" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="781.6" y="931.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="781.6" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="784.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="781.6" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="781.6" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="781.6" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="784.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.33%)</title><rect x="782.6" y="931.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.33%)</title><rect x="782.6" y="915.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="785.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.33%)</title><rect x="782.6" y="899.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.31%)</title><rect x="782.6" y="883.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="785.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.31%)</title><rect x="782.6" y="867.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.31%)</title><rect x="782.6" y="851.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$302/37648632.accept (3 samples, 0.23%)</title><rect x="782.6" y="835.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.6" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="785.3" y="835.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.01%)</title><rect x="786.2" y="883.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$302/37648632.accept (11 samples, 0.86%)</title><rect x="788.1" y="867.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (11 samples, 0.86%)</title><rect x="788.1" y="851.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (11 samples, 0.86%)</title><rect x="788.1" y="835.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.1" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 0.86%)</title><rect x="788.1" y="819.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.1" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 0.86%)</title><rect x="788.1" y="803.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.1" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.62%)</title><rect x="789.9" y="787.0" width="7.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="792.9" y="798.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.62%)</title><rect x="789.9" y="771.0" width="7.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="792.9" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="797.3" y="787.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="800.3" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="798.2" y="931.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.2" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.39%)</title><rect x="799.1" y="947.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="802.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.39%)</title><rect x="799.1" y="931.0" width="4.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="802.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="803.7" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.7" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="803.7" y="947.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.7" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="803.7" y="931.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="803.7" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="806.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="803.7" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="803.7" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="806.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.70%)</title><rect x="804.6" y="1011.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.70%)</title><rect x="804.6" y="995.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="807.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.70%)</title><rect x="804.6" y="979.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.70%)</title><rect x="804.6" y="963.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (2 samples, 0.16%)</title><rect x="811.1" y="947.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (245 samples, 19.10%)</title><rect x="812.9" y="1011.0" width="225.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="815.9" y="1022.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (245 samples, 19.10%)</title><rect x="812.9" y="995.0" width="225.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.9" y="1006.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (214 samples, 16.68%)</title><rect x="817.5" y="979.0" width="196.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="820.5" y="990.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (13 samples, 1.01%)</title><rect x="824.0" y="963.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.08%)</title><rect x="835.9" y="963.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="835.9" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="838.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.33%)</title><rect x="836.8" y="963.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.23%)</title><rect x="852.5" y="963.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.23%)</title><rect x="852.5" y="947.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.23%)</title><rect x="852.5" y="931.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.23%)</title><rect x="852.5" y="915.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.23%)</title><rect x="855.2" y="963.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.23%)</title><rect x="855.2" y="947.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (170 samples, 13.25%)</title><rect x="858.0" y="963.0" width="156.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="861.0" y="974.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (170 samples, 13.25%)</title><rect x="858.0" y="947.0" width="156.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.0" y="958.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="861.7" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.7" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="862.6" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.6" y="942.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.23%)</title><rect x="863.5" y="931.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.5" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.16%)</title><rect x="866.3" y="931.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.3" y="942.0"></text>
</g>
<g>
<title>Unsafe_Park (154 samples, 12.00%)</title><rect x="868.1" y="931.0" width="141.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="871.1" y="942.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="874.5" y="915.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.5" y="926.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="877.3" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.3" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.79%)</title><rect x="878.2" y="915.0" width="21.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.2" y="926.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.47%)</title><rect x="889.3" y="899.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="892.3" y="910.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="891.1" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.1" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="892.0" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="895.0" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="892.0" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="895.0" y="878.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="892.9" y="883.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="895.9" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="894.8" y="899.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.8" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.23%)</title><rect x="896.6" y="899.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="899.6" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.39%)</title><rect x="899.4" y="915.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.4" y="926.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 0.94%)</title><rect x="904.0" y="915.0" width="11.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="907.0" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.42%)</title><rect x="915.0" y="915.0" width="28.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="918.0" y="926.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.05%)</title><rect x="943.5" y="915.0" width="47.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="946.5" y="926.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="991.3" y="915.0" width="1.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="994.3" y="926.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="993.2" y="915.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="996.2" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.39%)</title><rect x="994.1" y="915.0" width="4.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="997.1" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="998.7" y="915.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1001.7" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="999.6" y="915.0" width="3.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1002.6" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="1003.3" y="915.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1006.3" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="1005.1" y="915.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.1" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1008.8" y="915.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1011.8" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.31%)</title><rect x="1009.7" y="931.0" width="3.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1012.7" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1013.4" y="931.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (26 samples, 2.03%)</title><rect x="1014.3" y="979.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1017.3" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 2.03%)</title><rect x="1014.3" y="963.0" width="23.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.3" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 2.03%)</title><rect x="1014.3" y="947.0" width="23.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1017.3" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 2.03%)</title><rect x="1014.3" y="931.0" width="23.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.3" y="942.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1038.2" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1038.2" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1038.2" y="1027.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1041.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="1038.2" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1041.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="1038.2" y="995.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.2" y="1006.0"></text>
</g>
<g>
<title>start_thread (164 samples, 12.78%)</title><rect x="1039.2" y="1059.0" width="150.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1042.2" y="1070.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (164 samples, 12.78%)</title><rect x="1039.2" y="1043.0" width="150.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1042.2" y="1054.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 2.03%)</title><rect x="1039.2" y="1027.0" width="23.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.2" y="1038.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (2 samples, 0.16%)</title><rect x="1039.2" y="1011.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.2" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1040.1" y="995.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1043.1" y="1006.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.70%)</title><rect x="1041.0" y="1011.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.0" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.70%)</title><rect x="1041.0" y="995.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1044.0" y="1006.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.23%)</title><rect x="1041.0" y="979.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.0" y="990.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.47%)</title><rect x="1043.8" y="979.0" width="5.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1046.8" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.09%)</title><rect x="1049.3" y="1011.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.3" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.62%)</title><rect x="1049.3" y="995.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.3" y="1006.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1049.3" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.3" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1050.2" y="979.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.2" y="990.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1050.2" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.2" y="974.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1051.1" y="963.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1051.1" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.1" y="958.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.08%)</title><rect x="1051.1" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.1" y="942.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.08%)</title><rect x="1051.1" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.1" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.39%)</title><rect x="1052.0" y="979.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.0" y="990.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.31%)</title><rect x="1052.0" y="963.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.0" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1055.7" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.7" y="974.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1055.7" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.7" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.47%)</title><rect x="1056.6" y="995.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.6" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.47%)</title><rect x="1056.6" y="979.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.39%)</title><rect x="1056.6" y="963.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.6" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.39%)</title><rect x="1056.6" y="947.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.6" y="958.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.39%)</title><rect x="1056.6" y="931.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.6" y="942.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.31%)</title><rect x="1057.6" y="915.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.6" y="926.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.08%)</title><rect x="1060.3" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.3" y="910.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1061.2" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.2" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1061.2" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.2" y="958.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1061.2" y="931.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="1061.2" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.2" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1062.2" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.2" y="1022.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1062.2" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.2" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="1062.2" y="979.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1065.2" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (136 samples, 10.60%)</title><rect x="1063.1" y="1027.0" width="125.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.1" y="1038.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (136 samples, 10.60%)</title><rect x="1063.1" y="1011.0" width="125.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.1" y="1022.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (135 samples, 10.52%)</title><rect x="1063.1" y="995.0" width="124.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.1" y="1006.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (134 samples, 10.44%)</title><rect x="1063.1" y="979.0" width="123.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.1" y="990.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (134 samples, 10.44%)</title><rect x="1063.1" y="963.0" width="123.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.1" y="974.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (134 samples, 10.44%)</title><rect x="1063.1" y="947.0" width="123.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.1" y="958.0">Compile::Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="1063.1" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.1" y="942.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="1063.1" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.1" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1063.1" y="899.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.1" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1063.1" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1063.1" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.1" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1063.1" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.1" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1063.1" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1063.1" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.1" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1063.1" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.1" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1063.1" y="787.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.1" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1063.1" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.1" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1063.1" y="755.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.1" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1063.1" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.1" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1063.1" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.1" y="734.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1063.1" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.1" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1063.1" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.1" y="702.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (84 samples, 6.55%)</title><rect x="1064.0" y="931.0" width="77.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.0" y="942.0">Compile::..</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.08%)</title><rect x="1064.0" y="915.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.0" y="926.0"></text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.31%)</title><rect x="1064.9" y="915.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.9" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="1064.9" y="899.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.9" y="910.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.16%)</title><rect x="1066.8" y="899.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.8" y="910.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.08%)</title><rect x="1066.8" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.8" y="894.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1067.7" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.7" y="894.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1067.7" y="867.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.7" y="878.0"></text>
</g>
<g>
<title>MacroAssembler::testl(RegisterImpl*, AddressLiteral) (1 samples, 0.08%)</title><rect x="1067.7" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.7" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.23%)</title><rect x="1068.6" y="915.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.6" y="926.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.08%)</title><rect x="1068.6" y="899.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.6" y="910.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1069.5" y="899.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.5" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1070.4" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.4" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1070.4" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.4" y="894.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1071.4" y="915.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.4" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.47%)</title><rect x="1072.3" y="915.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.3" y="926.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1072.3" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.3" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.39%)</title><rect x="1073.2" y="899.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.2" y="910.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1073.2" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.31%)</title><rect x="1074.1" y="883.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.1" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.23%)</title><rect x="1074.1" y="867.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.1" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.16%)</title><rect x="1075.0" y="851.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.0" y="862.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.16%)</title><rect x="1075.0" y="835.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.0" y="846.0"></text>
</g>
<g>
<title>State::_sub_Op_AddI(Node const*) (1 samples, 0.08%)</title><rect x="1075.0" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.0" y="830.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.08%)</title><rect x="1076.0" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.0" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1076.9" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.9" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1076.9" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.9" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.08%)</title><rect x="1076.9" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.9" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.08%)</title><rect x="1076.9" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.9" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.08%)</title><rect x="1076.9" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.9" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1077.8" y="915.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.8" y="926.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.08%)</title><rect x="1077.8" y="899.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.8" y="910.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1077.8" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.8" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.39%)</title><rect x="1078.7" y="915.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.39%)</title><rect x="1078.7" y="899.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.7" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1078.7" y="883.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.7" y="894.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1078.7" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1079.6" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.6" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1080.6" y="883.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.6" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1081.5" y="867.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.5" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1082.4" y="883.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1082.4" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (63 samples, 4.91%)</title><rect x="1083.3" y="915.0" width="58.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.3" y="926.0">PhaseC..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.08%)</title><rect x="1083.3" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.3" y="910.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1084.2" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.2" y="910.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.23%)</title><rect x="1085.2" y="899.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.39%)</title><rect x="1087.9" y="899.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1089.8" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.8" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.16%)</title><rect x="1090.7" y="883.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.7" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1091.6" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.31%)</title><rect x="1092.5" y="899.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.5" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="1094.3" y="883.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1094.3" y="867.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.62%)</title><rect x="1096.2" y="899.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.2" y="910.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1101.7" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1102.6" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.6" y="894.0"></text>
</g>
<g>
<title>MachSpillCopyNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1102.6" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 1.09%)</title><rect x="1103.5" y="899.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.5" y="910.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1105.4" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.4" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1106.3" y="883.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.3" y="894.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1108.1" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.1" y="894.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1109.1" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.1" y="894.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1109.1" y="867.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.31%)</title><rect x="1110.0" y="883.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.0" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.23%)</title><rect x="1110.9" y="867.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.9" y="878.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.23%)</title><rect x="1113.7" y="883.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="1116.4" y="899.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1117.3" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.62%)</title><rect x="1118.3" y="899.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.3" y="910.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1121.9" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.9" y="894.0"></text>
</g>
<g>
<title>PhiNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1122.9" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.9" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="1123.8" y="883.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1125.6" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.23%)</title><rect x="1126.5" y="899.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1128.4" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.4" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1129.3" y="899.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.3" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1129.3" y="883.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.3" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1129.3" y="867.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.3" y="878.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.08%)</title><rect x="1129.3" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.3" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1130.2" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.2" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.23%)</title><rect x="1131.1" y="899.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.1" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1133.0" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.0" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1133.9" y="899.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.9" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1133.9" y="883.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.9" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.47%)</title><rect x="1134.8" y="899.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.8" y="910.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.16%)</title><rect x="1137.6" y="883.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.6" y="894.0"></text>
</g>
<g>
<title>free (1 samples, 0.08%)</title><rect x="1139.4" y="883.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1142.4" y="894.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1140.3" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.3" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 3.12%)</title><rect x="1141.3" y="931.0" width="36.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="942.0">Com..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1141.3" y="915.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.3" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1141.3" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.3" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1141.3" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.3" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1141.3" y="867.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.3" y="878.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1141.3" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1141.3" y="835.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.3" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1141.3" y="819.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1141.3" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1141.3" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1142.2" y="915.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (30 samples, 2.34%)</title><rect x="1143.1" y="915.0" width="27.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="926.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.31%)</title><rect x="1143.1" y="899.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="910.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1145.9" y="883.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.23%)</title><rect x="1146.8" y="899.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 1.17%)</title><rect x="1149.5" y="899.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 1.09%)</title><rect x="1150.5" y="883.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1152.3" y="867.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1154.1" y="867.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.70%)</title><rect x="1155.1" y="867.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1162.4" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1163.3" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1163.3" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.31%)</title><rect x="1164.2" y="899.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1167.9" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="883.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="867.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.9" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="862.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1168.8" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.8" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1169.8" y="899.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.62%)</title><rect x="1170.7" y="915.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.62%)</title><rect x="1170.7" y="899.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1170.7" y="883.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="894.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.16%)</title><rect x="1170.7" y="867.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.16%)</title><rect x="1170.7" y="851.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1170.7" y="835.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1172.5" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="894.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1172.5" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.4" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="894.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1174.4" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1174.4" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.3" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="894.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1175.3" y="867.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="787.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="755.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.3" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1175.3" y="723.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1176.2" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1177.1" y="883.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.62%)</title><rect x="1178.0" y="931.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.62%)</title><rect x="1178.0" y="915.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.62%)</title><rect x="1178.0" y="899.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.62%)</title><rect x="1178.0" y="883.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.62%)</title><rect x="1178.0" y="867.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.62%)</title><rect x="1178.0" y="851.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.47%)</title><rect x="1178.0" y="835.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.47%)</title><rect x="1178.0" y="819.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.47%)</title><rect x="1178.0" y="803.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.08%)</title><rect x="1178.0" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1178.0" y="755.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="766.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="739.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1178.0" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1179.0" y="787.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1179.0" y="771.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.31%)</title><rect x="1179.0" y="755.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1179.0" y="739.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1179.0" y="723.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1179.0" y="707.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1179.0" y="691.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1179.0" y="675.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.31%)</title><rect x="1179.0" y="659.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1179.0" y="643.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1179.0" y="627.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1179.0" y="611.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1179.0" y="595.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1179.0" y="579.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="590.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1179.0" y="563.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.0" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1179.9" y="563.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1179.9" y="547.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1179.9" y="531.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1179.9" y="515.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1179.9" y="499.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1179.9" y="483.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1179.9" y="467.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>GraphKit::sync_jvms() const (1 samples, 0.08%)</title><rect x="1179.9" y="451.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.8" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.8" y="435.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.8" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.8" y="403.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.8" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.8" y="371.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.8" y="355.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.8" y="339.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.8" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.8" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.8" y="291.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.8" y="275.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1180.8" y="259.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="270.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1180.8" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="435.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="419.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.7" y="403.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.7" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.7" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.7" y="355.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.7" y="339.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="323.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.7" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.7" y="291.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.7" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.7" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.7" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="227.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.7" y="211.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.7" y="195.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.7" y="179.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.7" y="163.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.7" y="147.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="131.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_currentThread() (1 samples, 0.08%)</title><rect x="1181.7" y="115.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_current_thread(Node*&amp;) (1 samples, 0.08%)</title><rect x="1181.7" y="99.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1181.7" y="83.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.7" y="67.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="78.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1181.7" y="51.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="62.0"></text>
</g>
<g>
<title>PhaseValues::is_IterGVN() (1 samples, 0.08%)</title><rect x="1181.7" y="35.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.6" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.6" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1182.6" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="734.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1182.6" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.6" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1182.6" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="686.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1182.6" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1182.6" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1182.6" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1182.6" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.6" y="835.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.6" y="819.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1183.6" y="803.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1183.6" y="787.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1183.6" y="771.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1183.6" y="755.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1183.6" y="739.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1183.6" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="734.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1183.6" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.6" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1183.6" y="675.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1186.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="691.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="643.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1184.5" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1184.5" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1184.5" y="595.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1184.5" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1184.5" y="563.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1184.5" y="547.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1184.5" y="531.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.08%)</title><rect x="1184.5" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1185.4" y="931.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="942.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.4" y="915.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="926.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1186.3" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1186.3" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1186.3" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="958.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.08%)</title><rect x="1186.3" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="942.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.08%)</title><rect x="1186.3" y="915.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="926.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.2" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="1006.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.2" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="990.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.2" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1187.2" y="947.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.2" y="958.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1187.2" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.2" y="942.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1187.2" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="926.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.2" y="1027.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.2" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.2" y="1011.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.2" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.16%)</title><rect x="1188.2" y="995.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.2" y="1006.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1189.1" y="963.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.1" y="974.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1189.1" y="947.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="958.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1189.1" y="931.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1189.1" y="915.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="926.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1189.1" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="910.0"></text>
</g>
</g>
</svg>
