<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1509"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1509"> </text>
<g id="frames">
<g>
<title>all (381 samples, 100.00%)</title><rect x="10.0" y="1475.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 7.09%)</title><rect x="10.0" y="1459.0" width="83.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1470.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (27 samples, 7.09%)</title><rect x="10.0" y="1443.0" width="83.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1454.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (27 samples, 7.09%)</title><rect x="10.0" y="1427.0" width="83.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1438.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.52%)</title><rect x="10.0" y="1411.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.52%)</title><rect x="10.0" y="1395.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.52%)</title><rect x="10.0" y="1379.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.52%)</title><rect x="10.0" y="1363.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.52%)</title><rect x="10.0" y="1347.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.52%)</title><rect x="10.0" y="1331.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.52%)</title><rect x="10.0" y="1315.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="10.0" y="1299.0" width="3.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.26%)</title><rect x="13.1" y="1299.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.26%)</title><rect x="13.1" y="1283.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.26%)</title><rect x="13.1" y="1267.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/328404128.test (1 samples, 0.26%)</title><rect x="13.1" y="1251.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.26%)</title><rect x="16.2" y="1411.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.26%)</title><rect x="16.2" y="1395.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.2" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="16.2" y="1379.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/872341906.accept (1 samples, 0.26%)</title><rect x="16.2" y="1363.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.26%)</title><rect x="16.2" y="1347.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.26%)</title><rect x="16.2" y="1331.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.2" y="1342.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.26%)</title><rect x="16.2" y="1315.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1326.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.26%)</title><rect x="16.2" y="1299.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.2" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.26%)</title><rect x="16.2" y="1283.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.26%)</title><rect x="16.2" y="1267.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.26%)</title><rect x="16.2" y="1251.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 1.84%)</title><rect x="19.3" y="1411.0" width="21.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.3" y="1422.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/1700784850.accept (6 samples, 1.57%)</title><rect x="19.3" y="1395.0" width="18.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.57%)</title><rect x="19.3" y="1379.0" width="18.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.3" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 0.79%)</title><rect x="19.3" y="1363.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.79%)</title><rect x="19.3" y="1347.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.79%)</title><rect x="19.3" y="1331.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.79%)</title><rect x="19.3" y="1315.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.79%)</title><rect x="19.3" y="1299.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.79%)</title><rect x="19.3" y="1283.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.52%)</title><rect x="28.6" y="1363.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.6" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.52%)</title><rect x="28.6" y="1347.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.52%)</title><rect x="28.6" y="1331.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.6" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="34.8" y="1363.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="34.8" y="1347.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.26%)</title><rect x="34.8" y="1331.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.26%)</title><rect x="34.8" y="1315.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.26%)</title><rect x="34.8" y="1299.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.26%)</title><rect x="37.9" y="1395.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.26%)</title><rect x="37.9" y="1379.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="37.9" y="1363.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="37.9" y="1347.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.9" y="1358.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.26%)</title><rect x="37.9" y="1331.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.46%)</title><rect x="41.0" y="1411.0" width="52.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.0" y="1422.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.46%)</title><rect x="41.0" y="1395.0" width="52.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.0" y="1406.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (13 samples, 3.41%)</title><rect x="41.0" y="1379.0" width="40.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.0" y="1390.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.05%)</title><rect x="44.1" y="1363.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.05%)</title><rect x="44.1" y="1347.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.79%)</title><rect x="44.1" y="1331.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="44.1" y="1315.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="44.1" y="1299.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.26%)</title><rect x="44.1" y="1283.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="44.1" y="1267.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.26%)</title><rect x="44.1" y="1251.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.52%)</title><rect x="47.2" y="1315.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="47.2" y="1299.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.26%)</title><rect x="47.2" y="1283.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.26%)</title><rect x="47.2" y="1267.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.26%)</title><rect x="47.2" y="1251.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.26%)</title><rect x="47.2" y="1235.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.26%)</title><rect x="47.2" y="1219.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.2" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.26%)</title><rect x="47.2" y="1203.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.26%)</title><rect x="50.3" y="1299.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.3" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.26%)</title><rect x="50.3" y="1283.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.3" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.26%)</title><rect x="50.3" y="1267.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.3" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.26%)</title><rect x="50.3" y="1251.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.3" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.26%)</title><rect x="50.3" y="1235.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="50.3" y="1219.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="50.3" y="1203.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.26%)</title><rect x="53.4" y="1331.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.26%)</title><rect x="53.4" y="1315.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 2.10%)</title><rect x="56.5" y="1363.0" width="24.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.5" y="1374.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.26%)</title><rect x="56.5" y="1347.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.31%)</title><rect x="59.6" y="1347.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.31%)</title><rect x="59.6" y="1331.0" width="15.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.31%)</title><rect x="59.6" y="1315.0" width="15.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.52%)</title><rect x="59.6" y="1299.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.79%)</title><rect x="65.7" y="1299.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.52%)</title><rect x="68.8" y="1283.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.52%)</title><rect x="68.8" y="1267.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.8" y="1278.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.52%)</title><rect x="68.8" y="1251.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (2 samples, 0.52%)</title><rect x="75.0" y="1347.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$283/362372894.iterator (1 samples, 0.26%)</title><rect x="78.1" y="1331.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batchIterator (1 samples, 0.26%)</title><rect x="78.1" y="1315.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.1" y="1326.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.26%)</title><rect x="78.1" y="1299.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.26%)</title><rect x="81.2" y="1379.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.26%)</title><rect x="81.2" y="1363.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.26%)</title><rect x="81.2" y="1347.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.26%)</title><rect x="81.2" y="1331.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.2" y="1342.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.26%)</title><rect x="81.2" y="1315.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.2" y="1326.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.26%)</title><rect x="81.2" y="1299.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.26%)</title><rect x="81.2" y="1283.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.26%)</title><rect x="81.2" y="1267.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="84.2" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="81.2" y="1251.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.52%)</title><rect x="84.3" y="1379.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="84.3" y="1363.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="84.3" y="1347.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.26%)</title><rect x="84.3" y="1331.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="1342.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollLast (1 samples, 0.26%)</title><rect x="84.3" y="1315.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.26%)</title><rect x="87.4" y="1363.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.26%)</title><rect x="87.4" y="1347.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="87.4" y="1331.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.26%)</title><rect x="87.4" y="1315.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="90.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.26%)</title><rect x="87.4" y="1299.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.26%)</title><rect x="87.4" y="1283.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.26%)</title><rect x="90.5" y="1379.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.26%)</title><rect x="90.5" y="1363.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.26%)</title><rect x="90.5" y="1347.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$PartitionData.equals (1 samples, 0.26%)</title><rect x="90.5" y="1331.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.5" y="1342.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.26%)</title><rect x="90.5" y="1315.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.run (227 samples, 59.58%)</title><rect x="93.6" y="1459.0" width="703.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.6" y="1470.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (227 samples, 59.58%)</title><rect x="93.6" y="1443.0" width="703.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.6" y="1454.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (227 samples, 59.58%)</title><rect x="93.6" y="1427.0" width="703.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.6" y="1438.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/565486760.run (212 samples, 55.64%)</title><rect x="106.0" y="1411.0" width="656.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.0" y="1422.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/565486760.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (212 samples, 55.64%)</title><rect x="106.0" y="1395.0" width="656.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.0" y="1406.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (212 samples, 55.64%)</title><rect x="106.0" y="1379.0" width="656.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.0" y="1390.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (211 samples, 55.38%)</title><rect x="106.0" y="1363.0" width="653.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.0" y="1374.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.26%)</title><rect x="115.3" y="1347.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.05%)</title><rect x="118.4" y="1347.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.4" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.05%)</title><rect x="118.4" y="1331.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.4" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.05%)</title><rect x="118.4" y="1315.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 1.05%)</title><rect x="118.4" y="1299.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="121.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (19 samples, 4.99%)</title><rect x="130.8" y="1347.0" width="58.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.8" y="1358.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.26%)</title><rect x="152.5" y="1331.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 2.89%)</title><rect x="155.6" y="1331.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="158.6" y="1342.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 2.89%)</title><rect x="155.6" y="1315.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.6" y="1326.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 2.89%)</title><rect x="155.6" y="1299.0" width="34.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.6" y="1310.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="155.6" y="1283.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="158.6" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="155.6" y="1267.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="158.6" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="155.6" y="1251.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.26%)</title><rect x="158.7" y="1283.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.26%)</title><rect x="158.7" y="1267.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.26%)</title><rect x="158.7" y="1251.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/818651732.accept (1 samples, 0.26%)</title><rect x="158.7" y="1235.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.36%)</title><rect x="161.8" y="1283.0" width="27.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.8" y="1294.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/818651732.accept (9 samples, 2.36%)</title><rect x="161.8" y="1267.0" width="27.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="164.8" y="1278.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (9 samples, 2.36%)</title><rect x="161.8" y="1251.0" width="27.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.8" y="1262.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 2.36%)</title><rect x="161.8" y="1235.0" width="27.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.8" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 2.36%)</title><rect x="161.8" y="1219.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="164.8" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 2.36%)</title><rect x="161.8" y="1203.0" width="27.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.8" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.31%)</title><rect x="161.8" y="1187.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.31%)</title><rect x="161.8" y="1171.0" width="15.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/988372257.accept (1 samples, 0.26%)</title><rect x="164.9" y="1155.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="167.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/1949423768.accept (1 samples, 0.26%)</title><rect x="168.0" y="1155.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.0" y="1166.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.52%)</title><rect x="171.0" y="1155.0" width="6.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="174.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.05%)</title><rect x="177.2" y="1187.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (44 samples, 11.55%)</title><rect x="189.6" y="1347.0" width="136.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.6" y="1358.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/524241174.extract (44 samples, 11.55%)</title><rect x="189.6" y="1331.0" width="136.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.6" y="1342.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (44 samples, 11.55%)</title><rect x="189.6" y="1315.0" width="136.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.6" y="1326.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (44 samples, 11.55%)</title><rect x="189.6" y="1299.0" width="136.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.6" y="1310.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (44 samples, 11.55%)</title><rect x="189.6" y="1283.0" width="136.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.6" y="1294.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (44 samples, 11.55%)</title><rect x="189.6" y="1267.0" width="136.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.6" y="1278.0">com/fasterxml/jac..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="189.6" y="1251.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="192.6" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="189.6" y="1235.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="192.6" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="189.6" y="1219.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="192.6" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="189.6" y="1203.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="192.6" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.26%)</title><rect x="189.6" y="1187.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="192.6" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.26%)</title><rect x="189.6" y="1171.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="192.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.46%)</title><rect x="192.7" y="1251.0" width="52.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.7" y="1262.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.52%)</title><rect x="198.9" y="1235.0" width="6.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="201.9" y="1246.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.52%)</title><rect x="198.9" y="1219.0" width="6.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="201.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.79%)</title><rect x="205.1" y="1235.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.79%)</title><rect x="205.1" y="1219.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.79%)</title><rect x="205.1" y="1203.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.79%)</title><rect x="205.1" y="1187.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.79%)</title><rect x="205.1" y="1171.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.79%)</title><rect x="205.1" y="1155.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.79%)</title><rect x="205.1" y="1139.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (10 samples, 2.62%)</title><rect x="214.4" y="1235.0" width="31.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.4" y="1246.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.79%)</title><rect x="236.1" y="1219.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.1" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="236.1" y="1203.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="239.1" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="236.1" y="1187.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="239.1" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="236.1" y="1171.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="239.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.26%)</title><rect x="239.2" y="1203.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.26%)</title><rect x="239.2" y="1187.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.26%)</title><rect x="242.3" y="1203.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.26%)</title><rect x="242.3" y="1187.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.26%)</title><rect x="242.3" y="1171.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.3" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="242.3" y="1155.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="245.3" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="242.3" y="1139.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="245.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="242.3" y="1123.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="245.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="242.3" y="1107.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="245.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 6.04%)</title><rect x="245.4" y="1251.0" width="71.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.4" y="1262.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.26%)</title><rect x="245.4" y="1235.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.52%)</title><rect x="248.5" y="1235.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.26%)</title><rect x="251.6" y="1219.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.05%)</title><rect x="254.7" y="1235.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.79%)</title><rect x="257.8" y="1219.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.26%)</title><rect x="260.9" y="1203.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.26%)</title><rect x="260.9" y="1187.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.26%)</title><rect x="264.0" y="1203.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.26%)</title><rect x="264.0" y="1187.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.26%)</title><rect x="267.1" y="1235.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.26%)</title><rect x="267.1" y="1219.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (13 samples, 3.41%)</title><rect x="270.2" y="1235.0" width="40.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.2" y="1246.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 3.41%)</title><rect x="270.2" y="1219.0" width="40.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.2" y="1230.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 2.10%)</title><rect x="270.2" y="1203.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.2" y="1214.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="273.3" y="1187.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="273.3" y="1171.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="273.3" y="1155.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.26%)</title><rect x="273.3" y="1139.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 1.57%)</title><rect x="276.4" y="1187.0" width="18.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.26%)</title><rect x="276.4" y="1171.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 1.31%)</title><rect x="279.4" y="1171.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 1.31%)</title><rect x="279.4" y="1155.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.79%)</title><rect x="285.6" y="1139.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.79%)</title><rect x="285.6" y="1123.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.31%)</title><rect x="294.9" y="1203.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.31%)</title><rect x="294.9" y="1187.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.31%)</title><rect x="294.9" y="1171.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.05%)</title><rect x="294.9" y="1155.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.05%)</title><rect x="294.9" y="1139.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="294.9" y="1123.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="297.9" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="294.9" y="1107.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="297.9" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="294.9" y="1091.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.79%)</title><rect x="298.0" y="1123.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.79%)</title><rect x="298.0" y="1107.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.79%)</title><rect x="298.0" y="1091.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.26%)</title><rect x="307.3" y="1155.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="307.3" y="1139.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="307.3" y="1123.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.52%)</title><rect x="310.4" y="1235.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.79%)</title><rect x="316.6" y="1251.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.79%)</title><rect x="316.6" y="1235.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.79%)</title><rect x="316.6" y="1219.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.79%)</title><rect x="316.6" y="1203.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.79%)</title><rect x="316.6" y="1187.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (140 samples, 36.75%)</title><rect x="325.9" y="1347.0" width="433.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.9" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="344.5" y="1331.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="347.5" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="344.5" y="1315.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="347.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (20 samples, 5.25%)</title><rect x="347.6" y="1331.0" width="61.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.6" y="1342.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 4.99%)</title><rect x="350.7" y="1315.0" width="58.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.7" y="1326.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 4.72%)</title><rect x="353.8" y="1299.0" width="55.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.8" y="1310.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (18 samples, 4.72%)</title><rect x="353.8" y="1283.0" width="55.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.8" y="1294.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (18 samples, 4.72%)</title><rect x="353.8" y="1267.0" width="55.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.8" y="1278.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (18 samples, 4.72%)</title><rect x="353.8" y="1251.0" width="55.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.8" y="1262.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (18 samples, 4.72%)</title><rect x="353.8" y="1235.0" width="55.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.8" y="1246.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (29 samples, 7.61%)</title><rect x="409.5" y="1331.0" width="89.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.5" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (28 samples, 7.35%)</title><rect x="409.5" y="1315.0" width="86.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.5" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 3.67%)</title><rect x="415.7" y="1299.0" width="43.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.7" y="1310.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.84%)</title><rect x="421.9" y="1283.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.9" y="1294.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.84%)</title><rect x="421.9" y="1267.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="424.9" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.31%)</title><rect x="421.9" y="1251.0" width="15.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="424.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.31%)</title><rect x="421.9" y="1235.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.31%)</title><rect x="421.9" y="1219.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.9" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.31%)</title><rect x="421.9" y="1203.0" width="15.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="424.9" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.79%)</title><rect x="421.9" y="1187.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="424.9" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.79%)</title><rect x="421.9" y="1171.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="424.9" y="1182.0"></text>
</g>
<g>
<title>RuntimeStub::caller_must_gc_arguments(JavaThread*) const (1 samples, 0.26%)</title><rect x="421.9" y="1155.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="424.9" y="1166.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.52%)</title><rect x="425.0" y="1155.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="428.0" y="1166.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.26%)</title><rect x="425.0" y="1139.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="428.0" y="1150.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.26%)</title><rect x="428.1" y="1139.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="431.1" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.52%)</title><rect x="431.2" y="1187.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.2" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.52%)</title><rect x="431.2" y="1171.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.2" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="431.2" y="1155.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="434.2" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.26%)</title><rect x="431.2" y="1139.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.2" y="1150.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.26%)</title><rect x="431.2" y="1123.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="434.2" y="1134.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.26%)</title><rect x="434.3" y="1155.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="437.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="437.4" y="1251.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.4" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="440.5" y="1251.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="443.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.26%)</title><rect x="443.6" y="1283.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="446.6" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.26%)</title><rect x="443.6" y="1267.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="446.6" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.26%)</title><rect x="443.6" y="1251.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="446.6" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="443.6" y="1235.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="446.6" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.26%)</title><rect x="443.6" y="1219.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="446.6" y="1230.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 1.05%)</title><rect x="446.7" y="1283.0" width="12.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="449.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.26%)</title><rect x="459.1" y="1299.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.26%)</title><rect x="459.1" y="1283.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="459.1" y="1267.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.1" y="1278.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 2.89%)</title><rect x="462.2" y="1299.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.2" y="1310.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 2.89%)</title><rect x="462.2" y="1283.0" width="34.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.2" y="1294.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="462.2" y="1267.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="462.2" y="1251.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="462.2" y="1235.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.26%)</title><rect x="462.2" y="1219.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="462.2" y="1203.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 2.62%)</title><rect x="465.3" y="1267.0" width="30.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.3" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 2.36%)</title><rect x="468.4" y="1251.0" width="27.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.4" y="1262.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.57%)</title><rect x="477.7" y="1235.0" width="18.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.7" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 1.57%)</title><rect x="477.7" y="1219.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.7" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="493.1" y="1203.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="496.1" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="493.1" y="1187.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.26%)</title><rect x="496.2" y="1315.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.2" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.26%)</title><rect x="496.2" y="1299.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.2" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="496.2" y="1283.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="496.2" y="1267.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (82 samples, 21.52%)</title><rect x="499.3" y="1331.0" width="254.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.3" y="1342.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (81 samples, 21.26%)</title><rect x="499.3" y="1315.0" width="250.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.3" y="1326.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/475430199.process (66 samples, 17.32%)</title><rect x="505.5" y="1299.0" width="204.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.5" y="1310.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (66 samples, 17.32%)</title><rect x="505.5" y="1283.0" width="204.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.5" y="1294.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (66 samples, 17.32%)</title><rect x="505.5" y="1267.0" width="204.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.5" y="1278.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.79%)</title><rect x="514.8" y="1251.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.8" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.79%)</title><rect x="514.8" y="1235.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.8" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.79%)</title><rect x="514.8" y="1219.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="517.8" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.52%)</title><rect x="517.9" y="1203.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.52%)</title><rect x="517.9" y="1187.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.26%)</title><rect x="521.0" y="1171.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (59 samples, 15.49%)</title><rect x="524.1" y="1251.0" width="182.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="527.1" y="1262.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (59 samples, 15.49%)</title><rect x="524.1" y="1235.0" width="182.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.1" y="1246.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 12.60%)</title><rect x="552.0" y="1219.0" width="148.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="555.0" y="1230.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (7 samples, 1.84%)</title><rect x="558.2" y="1203.0" width="21.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="561.2" y="1214.0">H..</text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.26%)</title><rect x="579.9" y="1203.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="582.9" y="1214.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.26%)</title><rect x="579.9" y="1187.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="582.9" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="579.9" y="1171.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="582.9" y="1182.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.26%)</title><rect x="579.9" y="1155.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="582.9" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.26%)</title><rect x="579.9" y="1139.0" width="3.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="582.9" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="583.0" y="1203.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="586.1" y="1203.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="589.1" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.52%)</title><rect x="589.2" y="1203.0" width="6.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="592.2" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="592.3" y="1187.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="595.3" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.26%)</title><rect x="595.4" y="1203.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="598.4" y="1214.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 8.66%)</title><rect x="598.5" y="1203.0" width="102.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="601.5" y="1214.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="610.8" y="1187.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.8" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.26%)</title><rect x="610.8" y="1171.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="613.8" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.52%)</title><rect x="613.9" y="1187.0" width="6.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="616.9" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (19 samples, 4.99%)</title><rect x="620.1" y="1187.0" width="58.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="623.1" y="1198.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.79%)</title><rect x="679.0" y="1187.0" width="9.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="682.0" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.26%)</title><rect x="688.3" y="1187.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="691.3" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.52%)</title><rect x="691.4" y="1187.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="694.4" y="1198.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.26%)</title><rect x="697.6" y="1187.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="700.6" y="1198.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.26%)</title><rect x="700.7" y="1219.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.7" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.26%)</title><rect x="703.8" y="1219.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="706.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="706.9" y="1251.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="706.9" y="1235.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="706.9" y="1219.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.26%)</title><rect x="709.9" y="1299.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.9" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.79%)</title><rect x="713.0" y="1299.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="716.0" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.79%)</title><rect x="713.0" y="1283.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.0" y="1294.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="713.0" y="1267.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="716.0" y="1278.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.52%)</title><rect x="716.1" y="1267.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.36%)</title><rect x="722.3" y="1299.0" width="27.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.3" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.05%)</title><rect x="737.8" y="1283.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.05%)</title><rect x="737.8" y="1267.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.05%)</title><rect x="737.8" y="1251.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.52%)</title><rect x="737.8" y="1235.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.52%)</title><rect x="737.8" y="1219.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="740.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.52%)</title><rect x="744.0" y="1235.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.0" y="1246.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.26%)</title><rect x="750.2" y="1315.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="753.3" y="1331.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="753.3" y="1315.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="756.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.26%)</title><rect x="753.3" y="1299.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.26%)</title><rect x="753.3" y="1283.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.26%)</title><rect x="753.3" y="1267.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="756.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.26%)</title><rect x="753.3" y="1251.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="756.3" y="1262.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.26%)</title><rect x="756.4" y="1331.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.26%)</title><rect x="759.5" y="1363.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.5" y="1374.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.26%)</title><rect x="759.5" y="1347.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.5" y="1358.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.26%)</title><rect x="759.5" y="1331.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="762.5" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="759.5" y="1315.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="762.5" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="759.5" y="1299.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="762.5" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="759.5" y="1283.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="762.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.52%)</title><rect x="762.6" y="1411.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.52%)</title><rect x="762.6" y="1395.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.52%)</title><rect x="762.6" y="1379.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.52%)</title><rect x="762.6" y="1363.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.26%)</title><rect x="765.7" y="1347.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 2.36%)</title><rect x="768.8" y="1411.0" width="27.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.8" y="1422.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.10%)</title><rect x="771.9" y="1395.0" width="24.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="774.9" y="1406.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 1.84%)</title><rect x="775.0" y="1379.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.0" y="1390.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 1.84%)</title><rect x="775.0" y="1363.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.0" y="1374.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 1.84%)</title><rect x="775.0" y="1347.0" width="21.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.0" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 1.84%)</title><rect x="775.0" y="1331.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.0" y="1342.0">j..</text>
</g>
<g>
<title>malloc (1 samples, 0.26%)</title><rect x="796.7" y="1459.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="799.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.26%)</title><rect x="799.8" y="1459.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="802.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.26%)</title><rect x="799.8" y="1443.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.8" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.compose (1 samples, 0.26%)</title><rect x="799.8" y="1427.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.8" y="1438.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.26%)</title><rect x="799.8" y="1411.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.8" y="1422.0"></text>
</g>
<g>
<title>start_thread (125 samples, 32.81%)</title><rect x="802.9" y="1459.0" width="387.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="805.9" y="1470.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (125 samples, 32.81%)</title><rect x="802.9" y="1443.0" width="387.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="805.9" y="1454.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 3.94%)</title><rect x="802.9" y="1427.0" width="46.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.9" y="1438.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 3.94%)</title><rect x="802.9" y="1411.0" width="46.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.9" y="1422.0">G1Pa..</text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.26%)</title><rect x="802.9" y="1395.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.9" y="1406.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 2.89%)</title><rect x="806.0" y="1395.0" width="34.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="809.0" y="1406.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 2.89%)</title><rect x="806.0" y="1379.0" width="34.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.0" y="1390.0">G1..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.26%)</title><rect x="815.2" y="1363.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="818.2" y="1374.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.84%)</title><rect x="818.3" y="1363.0" width="21.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="821.3" y="1374.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.79%)</title><rect x="830.7" y="1347.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.7" y="1358.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="836.9" y="1331.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.9" y="1342.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.79%)</title><rect x="840.0" y="1395.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="843.0" y="1406.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.52%)</title><rect x="840.0" y="1379.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="843.0" y="1390.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.26%)</title><rect x="840.0" y="1363.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="843.0" y="1374.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.26%)</title><rect x="840.0" y="1347.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="843.0" y="1358.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.26%)</title><rect x="840.0" y="1331.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="843.0" y="1342.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.26%)</title><rect x="843.1" y="1363.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="846.1" y="1374.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.26%)</title><rect x="843.1" y="1347.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.1" y="1358.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.26%)</title><rect x="843.1" y="1331.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.1" y="1342.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.26%)</title><rect x="843.1" y="1315.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.1" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.26%)</title><rect x="846.2" y="1379.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="849.2" y="1390.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.26%)</title><rect x="846.2" y="1363.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.2" y="1374.0"></text>
</g>
<g>
<title>JavaThread::run() (108 samples, 28.35%)</title><rect x="849.3" y="1427.0" width="334.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="852.3" y="1438.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (108 samples, 28.35%)</title><rect x="849.3" y="1411.0" width="334.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.3" y="1422.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (108 samples, 28.35%)</title><rect x="849.3" y="1395.0" width="334.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="852.3" y="1406.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (107 samples, 28.08%)</title><rect x="849.3" y="1379.0" width="331.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="852.3" y="1390.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (104 samples, 27.30%)</title><rect x="849.3" y="1363.0" width="322.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.3" y="1374.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (104 samples, 27.30%)</title><rect x="849.3" y="1347.0" width="322.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="852.3" y="1358.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 12.86%)</title><rect x="849.3" y="1331.0" width="151.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.3" y="1342.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.26%)</title><rect x="849.3" y="1315.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.3" y="1326.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.26%)</title><rect x="849.3" y="1299.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.3" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 1.31%)</title><rect x="852.4" y="1315.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.4" y="1326.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.79%)</title><rect x="855.5" y="1299.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="858.5" y="1310.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.26%)</title><rect x="855.5" y="1283.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="858.5" y="1294.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.26%)</title><rect x="855.5" y="1267.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="858.5" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.52%)</title><rect x="858.6" y="1283.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.6" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="858.6" y="1267.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.6" y="1278.0"></text>
</g>
<g>
<title>Location::write_on(DebugInfoWriteStream*) (1 samples, 0.26%)</title><rect x="861.7" y="1267.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.7" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="864.8" y="1299.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="867.8" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="864.8" y="1283.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.8" y="1294.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.79%)</title><rect x="867.9" y="1315.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.9" y="1326.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.79%)</title><rect x="867.9" y="1299.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.9" y="1310.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.79%)</title><rect x="867.9" y="1283.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.9" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.05%)</title><rect x="877.2" y="1315.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.2" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.05%)</title><rect x="877.2" y="1299.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.2" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.79%)</title><rect x="877.2" y="1283.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="880.2" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.52%)</title><rect x="880.3" y="1267.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.3" y="1278.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.26%)</title><rect x="883.4" y="1251.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="886.4" y="1262.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.26%)</title><rect x="883.4" y="1235.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.4" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="883.4" y="1219.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="886.4" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="883.4" y="1203.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="886.4" y="1214.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="883.4" y="1187.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.4" y="1198.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.26%)</title><rect x="883.4" y="1171.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="886.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.26%)</title><rect x="886.5" y="1283.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 9.19%)</title><rect x="889.6" y="1315.0" width="108.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.6" y="1326.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.52%)</title><rect x="889.6" y="1299.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.52%)</title><rect x="895.8" y="1299.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.8" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.26%)</title><rect x="895.8" y="1283.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.8" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="898.9" y="1283.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="901.9" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.05%)</title><rect x="902.0" y="1299.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.0" y="1310.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.26%)</title><rect x="908.2" y="1283.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.2" y="1294.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.26%)</title><rect x="911.3" y="1283.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.3" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.10%)</title><rect x="914.4" y="1299.0" width="24.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.4" y="1310.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.31%)</title><rect x="920.6" y="1283.0" width="15.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.6" y="1294.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.26%)</title><rect x="923.6" y="1267.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.6" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.79%)</title><rect x="926.7" y="1267.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="929.7" y="1278.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="936.0" y="1283.0" width="3.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="939.0" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.52%)</title><rect x="939.1" y="1299.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.52%)</title><rect x="939.1" y="1283.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.1" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.79%)</title><rect x="945.3" y="1299.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.3" y="1310.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.26%)</title><rect x="951.5" y="1283.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.52%)</title><rect x="954.6" y="1299.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.26%)</title><rect x="957.7" y="1283.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.7" y="1294.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.31%)</title><rect x="960.8" y="1299.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.8" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.31%)</title><rect x="960.8" y="1283.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="963.8" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.26%)</title><rect x="960.8" y="1267.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.8" y="1278.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.05%)</title><rect x="963.9" y="1267.0" width="12.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.9" y="1278.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.52%)</title><rect x="963.9" y="1251.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.9" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.52%)</title><rect x="970.1" y="1251.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.26%)</title><rect x="976.3" y="1299.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.3" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="976.3" y="1283.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.26%)</title><rect x="979.4" y="1299.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.4" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="979.4" y="1283.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.4" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.52%)</title><rect x="982.5" y="1299.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.5" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.26%)</title><rect x="988.7" y="1299.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="991.7" y="1310.0"></text>
</g>
<g>
<title>addP_rReg_immNode::oper_input_base() const (1 samples, 0.26%)</title><rect x="991.8" y="1299.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.8" y="1310.0"></text>
</g>
<g>
<title>testL_reg_immNode::out_RegMask() const (1 samples, 0.26%)</title><rect x="994.9" y="1299.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.9" y="1310.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="998.0" y="1315.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1001.0" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 12.86%)</title><rect x="1001.1" y="1331.0" width="151.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.1" y="1342.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.26%)</title><rect x="1001.1" y="1315.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.1" y="1326.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.26%)</title><rect x="1001.1" y="1299.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.1" y="1310.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="1004.2" y="1315.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.52%)</title><rect x="1007.3" y="1315.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.3" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.52%)</title><rect x="1007.3" y="1299.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.3" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.52%)</title><rect x="1007.3" y="1283.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1010.3" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.52%)</title><rect x="1007.3" y="1267.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.3" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.52%)</title><rect x="1007.3" y="1251.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.3" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="1007.3" y="1235.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.3" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1235.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1219.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1203.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1187.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1171.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1155.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1139.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1123.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1107.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1091.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1075.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1059.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1043.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1027.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="1011.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="995.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="979.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="963.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="947.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="931.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="915.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="899.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="883.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="867.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="851.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="835.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="819.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="803.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="787.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1013.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="771.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="755.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="739.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="723.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="707.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="691.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="675.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="659.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="643.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="627.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="611.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="595.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="579.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="563.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="547.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="531.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="515.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="499.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="483.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="467.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="451.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="435.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="419.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="403.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="387.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="371.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="355.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="1010.4" y="339.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.4" y="350.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.26%)</title><rect x="1010.4" y="323.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.4" y="334.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.26%)</title><rect x="1010.4" y="307.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (37 samples, 9.71%)</title><rect x="1013.5" y="1315.0" width="114.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.5" y="1326.0">PhaseIdealLoop..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.26%)</title><rect x="1013.5" y="1299.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.79%)</title><rect x="1016.6" y="1299.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1019.6" y="1310.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.26%)</title><rect x="1019.7" y="1283.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.7" y="1294.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.26%)</title><rect x="1022.8" y="1283.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.8" y="1294.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.26%)</title><rect x="1022.8" y="1267.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1025.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.26%)</title><rect x="1025.9" y="1299.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (31 samples, 8.14%)</title><rect x="1029.0" y="1299.0" width="96.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.0" y="1310.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (28 samples, 7.35%)</title><rect x="1038.2" y="1283.0" width="86.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1041.2" y="1294.0">PhaseIdeal..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.26%)</title><rect x="1041.3" y="1267.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1044.3" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.52%)</title><rect x="1044.4" y="1267.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (24 samples, 6.30%)</title><rect x="1050.6" y="1267.0" width="74.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.6" y="1278.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.79%)</title><rect x="1115.7" y="1251.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.26%)</title><rect x="1125.0" y="1299.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.0" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.26%)</title><rect x="1125.0" y="1283.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.0" y="1294.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.26%)</title><rect x="1125.0" y="1267.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.0" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.10%)</title><rect x="1128.1" y="1315.0" width="24.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.1" y="1326.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 2.10%)</title><rect x="1128.1" y="1299.0" width="24.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.1" y="1310.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1131.2" y="1283.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.2" y="1294.0"></text>
</g>
<g>
<title>IfFalseNode::IfFalseNode(IfNode*) (1 samples, 0.26%)</title><rect x="1131.2" y="1267.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.2" y="1278.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.26%)</title><rect x="1131.2" y="1251.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.2" y="1262.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.26%)</title><rect x="1134.3" y="1283.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.3" y="1294.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.26%)</title><rect x="1134.3" y="1267.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.3" y="1278.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.26%)</title><rect x="1134.3" y="1251.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.3" y="1262.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.26%)</title><rect x="1134.3" y="1235.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.3" y="1246.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.26%)</title><rect x="1134.3" y="1219.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (3 samples, 0.79%)</title><rect x="1137.3" y="1283.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1146.6" y="1283.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="1294.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1149.7" y="1283.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.26%)</title><rect x="1149.7" y="1267.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.7" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1251.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.7" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1235.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.7" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1219.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.7" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1203.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.7" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1187.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.7" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1171.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.7" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1155.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.7" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1139.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.7" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1123.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.7" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1107.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.7" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1091.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1075.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.7" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1059.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.7" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1043.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.7" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1027.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="1011.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="995.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.7" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="979.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.7" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="963.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.7" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1149.7" y="947.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.7" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1149.7" y="931.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.57%)</title><rect x="1152.8" y="1331.0" width="18.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.8" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.57%)</title><rect x="1152.8" y="1315.0" width="18.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.57%)</title><rect x="1152.8" y="1299.0" width="18.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.57%)</title><rect x="1152.8" y="1283.0" width="18.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.57%)</title><rect x="1152.8" y="1267.0" width="18.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.57%)</title><rect x="1152.8" y="1251.0" width="18.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.57%)</title><rect x="1152.8" y="1235.0" width="18.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.57%)</title><rect x="1152.8" y="1219.0" width="18.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.57%)</title><rect x="1152.8" y="1203.0" width="18.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.57%)</title><rect x="1152.8" y="1187.0" width="18.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.57%)</title><rect x="1152.8" y="1171.0" width="18.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.57%)</title><rect x="1152.8" y="1155.0" width="18.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.8" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1152.8" y="1139.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.8" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1152.8" y="1123.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1152.8" y="1107.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1152.8" y="1091.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1152.8" y="1075.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1152.8" y="1059.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1152.8" y="1043.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.8" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1152.8" y="1027.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1152.8" y="1011.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1152.8" y="995.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1152.8" y="979.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1152.8" y="963.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1152.8" y="947.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1152.8" y="931.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1152.8" y="915.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1152.8" y="899.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1152.8" y="883.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1152.8" y="867.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1152.8" y="851.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1152.8" y="835.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1152.8" y="819.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1152.8" y="803.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1152.8" y="787.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1152.8" y="771.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1152.8" y="755.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1152.8" y="739.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1152.8" y="723.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1152.8" y="707.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1152.8" y="691.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1152.8" y="675.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.8" y="686.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1152.8" y="659.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="670.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.26%)</title><rect x="1152.8" y="643.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="654.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.26%)</title><rect x="1152.8" y="627.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.26%)</title><rect x="1152.8" y="611.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.26%)</title><rect x="1152.8" y="595.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1155.9" y="659.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1155.9" y="643.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1155.9" y="627.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1155.9" y="611.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1155.9" y="595.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1155.9" y="579.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.9" y="590.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.26%)</title><rect x="1155.9" y="563.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.9" y="574.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.26%)</title><rect x="1155.9" y="547.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.26%)</title><rect x="1155.9" y="531.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.26%)</title><rect x="1155.9" y="515.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.26%)</title><rect x="1159.0" y="867.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="878.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.26%)</title><rect x="1159.0" y="851.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.0" y="862.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.26%)</title><rect x="1159.0" y="835.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="846.0"></text>
</g>
<g>
<title>__GI___qsort_r (1 samples, 0.26%)</title><rect x="1159.0" y="819.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1162.0" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1162.1" y="1139.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1162.1" y="1123.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1162.1" y="1107.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1162.1" y="1091.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1162.1" y="1075.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1162.1" y="1059.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1162.1" y="1043.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1162.1" y="1027.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1162.1" y="1011.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1162.1" y="995.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1162.1" y="979.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1162.1" y="963.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1162.1" y="947.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1162.1" y="931.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1162.1" y="915.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1162.1" y="899.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1162.1" y="883.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1162.1" y="867.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1162.1" y="851.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.1" y="835.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.1" y="819.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.1" y="803.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.1" y="787.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.1" y="771.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.1" y="755.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.1" y="739.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.1" y="723.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.1" y="707.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.1" y="691.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.1" y="675.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.1" y="659.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.1" y="643.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.1" y="627.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.1" y="611.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.1" y="595.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.1" y="579.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.1" y="563.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.1" y="547.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.1" y="531.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.1" y="515.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.1" y="499.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.1" y="483.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.1" y="467.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.1" y="451.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.1" y="435.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.1" y="419.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.1" y="403.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.1" y="387.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.1" y="371.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.1" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1162.1" y="355.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.1" y="366.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.26%)</title><rect x="1162.1" y="339.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="350.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.26%)</title><rect x="1162.1" y="323.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1162.1" y="307.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1162.1" y="291.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.1" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1162.1" y="275.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1162.1" y="259.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.26%)</title><rect x="1162.1" y="243.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.1" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.2" y="547.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.2" y="531.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.2" y="515.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.2" y="499.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.2" y="483.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.2" y="467.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.2" y="451.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.2" y="435.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.2" y="419.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.2" y="403.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.2" y="387.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.2" y="371.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.2" y="355.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.2" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.2" y="339.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.2" y="323.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.2" y="307.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.2" y="291.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.2" y="275.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.2" y="259.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.2" y="243.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1165.2" y="227.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.2" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1165.2" y="211.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1165.2" y="195.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1165.2" y="179.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1165.2" y="163.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1165.2" y="147.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1165.2" y="131.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.2" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1165.2" y="115.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.2" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1165.2" y="99.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.26%)</title><rect x="1165.2" y="83.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.2" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1165.2" y="67.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.2" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1165.2" y="51.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.2" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.26%)</title><rect x="1165.2" y="35.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="835.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="819.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.3" y="803.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.3" y="787.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.3" y="771.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.3" y="755.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.3" y="739.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="723.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.3" y="707.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.3" y="691.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.3" y="675.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.3" y="659.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.3" y="643.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="627.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.3" y="611.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.3" y="595.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.3" y="579.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.3" y="563.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.3" y="547.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="531.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="515.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.3" y="499.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.3" y="483.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.3" y="467.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.3" y="451.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.3" y="435.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.79%)</title><rect x="1171.4" y="1363.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="1374.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.79%)</title><rect x="1171.4" y="1347.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.79%)</title><rect x="1171.4" y="1331.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.4" y="1342.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.79%)</title><rect x="1171.4" y="1315.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1326.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.52%)</title><rect x="1171.4" y="1299.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="1310.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.52%)</title><rect x="1171.4" y="1283.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.4" y="1294.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.52%)</title><rect x="1171.4" y="1267.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.52%)</title><rect x="1171.4" y="1251.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.4" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.52%)</title><rect x="1171.4" y="1235.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.52%)</title><rect x="1171.4" y="1219.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.52%)</title><rect x="1171.4" y="1203.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1171.4" y="1187.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1171.4" y="1171.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1171.4" y="1155.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1171.4" y="1139.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.26%)</title><rect x="1171.4" y="1123.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="1134.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.26%)</title><rect x="1171.4" y="1107.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="1118.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.26%)</title><rect x="1171.4" y="1091.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.4" y="1102.0"></text>
</g>
<g>
<title>ciInstanceKlass::exact_klass() (1 samples, 0.26%)</title><rect x="1174.5" y="1187.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.26%)</title><rect x="1177.6" y="1299.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="1310.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.26%)</title><rect x="1177.6" y="1283.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1294.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.26%)</title><rect x="1177.6" y="1267.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="1278.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.26%)</title><rect x="1177.6" y="1251.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="1262.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.26%)</title><rect x="1180.7" y="1379.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1390.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.26%)</title><rect x="1180.7" y="1363.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1374.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.26%)</title><rect x="1180.7" y="1347.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1358.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.26%)</title><rect x="1180.7" y="1331.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1342.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.26%)</title><rect x="1180.7" y="1315.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1326.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.26%)</title><rect x="1183.8" y="1427.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1438.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.26%)</title><rect x="1183.8" y="1411.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="1422.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.26%)</title><rect x="1183.8" y="1395.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="1406.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.26%)</title><rect x="1183.8" y="1379.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="1390.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.26%)</title><rect x="1183.8" y="1363.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.26%)</title><rect x="1183.8" y="1347.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.26%)</title><rect x="1183.8" y="1331.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="1342.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.26%)</title><rect x="1183.8" y="1315.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="1326.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.26%)</title><rect x="1186.9" y="1427.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="1438.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.26%)</title><rect x="1186.9" y="1411.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="1422.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.26%)</title><rect x="1186.9" y="1395.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="1406.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.26%)</title><rect x="1186.9" y="1379.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.9" y="1390.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.26%)</title><rect x="1186.9" y="1363.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1189.9" y="1374.0"></text>
</g>
</g>
</svg>
