<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (1,106 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (235 samples, 21.25%)</title><rect x="10.0" y="1203.0" width="250.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (235 samples, 21.25%)</title><rect x="10.0" y="1187.0" width="250.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="10.0" y="1171.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="1155.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="1139.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="10.0" y="1107.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="1091.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="10.0" y="1075.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="10.0" y="1059.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="10.0" y="1043.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="10.0" y="1027.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="10.0" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="10.0" y="995.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="10.0" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="10.0" y="963.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="10.0" y="947.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.validate (1 samples, 0.09%)</title><rect x="10.0" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.validate (1 samples, 0.09%)</title><rect x="10.0" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>JavaThread::last_frame() (1 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (232 samples, 20.98%)</title><rect x="11.1" y="1171.0" width="247.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.1" y="1182.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="11.1" y="1155.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.27%)</title><rect x="12.1" y="1155.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.27%)</title><rect x="12.1" y="1139.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="12.1" y="1123.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="12.1" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="12.1" y="1091.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="13.2" y="1123.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="13.2" y="1107.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.2" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="13.2" y="1091.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="13.2" y="1075.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="13.2" y="1059.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="13.2" y="1043.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="14.3" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="14.3" y="1027.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="14.3" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="15.3" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="15.3" y="1139.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.45%)</title><rect x="16.4" y="1155.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.45%)</title><rect x="16.4" y="1139.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.45%)</title><rect x="16.4" y="1123.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/353143925.accept (3 samples, 0.27%)</title><rect x="18.5" y="1107.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.27%)</title><rect x="18.5" y="1091.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.27%)</title><rect x="18.5" y="1075.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.5" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="19.6" y="1059.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (178 samples, 16.09%)</title><rect x="21.7" y="1155.0" width="189.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.7" y="1166.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/261844746.accept (168 samples, 15.19%)</title><rect x="22.8" y="1139.0" width="179.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.8" y="1150.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (168 samples, 15.19%)</title><rect x="22.8" y="1123.0" width="179.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.8" y="1134.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (145 samples, 13.11%)</title><rect x="23.9" y="1107.0" width="154.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.9" y="1118.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (145 samples, 13.11%)</title><rect x="23.9" y="1091.0" width="154.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="1102.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (145 samples, 13.11%)</title><rect x="23.9" y="1075.0" width="154.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.9" y="1086.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (145 samples, 13.11%)</title><rect x="23.9" y="1059.0" width="154.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.9" y="1070.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (145 samples, 13.11%)</title><rect x="23.9" y="1043.0" width="154.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.9" y="1054.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (145 samples, 13.11%)</title><rect x="23.9" y="1027.0" width="154.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.9" y="1038.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (106 samples, 9.58%)</title><rect x="61.2" y="1011.0" width="113.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.2" y="1022.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 2.17%)</title><rect x="61.2" y="995.0" width="25.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.2" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 2.17%)</title><rect x="61.2" y="979.0" width="25.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.2" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (24 samples, 2.17%)</title><rect x="61.2" y="963.0" width="25.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.2" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.63%)</title><rect x="86.8" y="995.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.63%)</title><rect x="86.8" y="979.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="89.0" y="963.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.0" y="974.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="90.0" y="947.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.27%)</title><rect x="91.1" y="963.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.78%)</title><rect x="94.3" y="995.0" width="80.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="1006.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.78%)</title><rect x="94.3" y="979.0" width="80.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.3" y="990.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 6.78%)</title><rect x="94.3" y="963.0" width="80.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.3" y="974.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 6.78%)</title><rect x="94.3" y="947.0" width="80.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.3" y="958.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (74 samples, 6.69%)</title><rect x="95.4" y="931.0" width="78.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.4" y="942.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.79%)</title><rect x="97.5" y="915.0" width="68.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="100.5" y="926.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.36%)</title><rect x="99.6" y="899.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="102.6" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 4.25%)</title><rect x="103.9" y="899.0" width="50.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="106.9" y="910.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="154.0" y="899.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="157.0" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.81%)</title><rect x="156.2" y="899.0" width="9.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="159.2" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="165.8" y="915.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="168.8" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.54%)</title><rect x="166.8" y="915.0" width="6.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="169.8" y="926.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="173.2" y="915.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="176.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.18%)</title><rect x="174.3" y="1011.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.18%)</title><rect x="174.3" y="995.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.18%)</title><rect x="174.3" y="979.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="177.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="176.4" y="1011.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="176.4" y="995.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="176.4" y="979.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="176.4" y="963.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="177.5" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (17 samples, 1.54%)</title><rect x="178.6" y="1107.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (17 samples, 1.54%)</title><rect x="178.6" y="1091.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.36%)</title><rect x="192.4" y="1075.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.36%)</title><rect x="192.4" y="1059.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.36%)</title><rect x="192.4" y="1043.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="192.4" y="1027.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.27%)</title><rect x="192.4" y="1011.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.27%)</title><rect x="192.4" y="995.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="195.6" y="1027.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.27%)</title><rect x="196.7" y="1107.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="196.7" y="1091.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="196.7" y="1075.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="199.9" y="1107.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="199.9" y="1091.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="199.9" y="1075.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="199.9" y="1059.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="199.9" y="1043.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.18%)</title><rect x="199.9" y="1027.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="202.0" y="1139.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="202.0" y="1123.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.54%)</title><rect x="203.1" y="1139.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.54%)</title><rect x="203.1" y="1123.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.54%)</title><rect x="203.1" y="1107.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="206.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.54%)</title><rect x="203.1" y="1091.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.1" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.27%)</title><rect x="205.2" y="1075.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="208.4" y="1075.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="208.4" y="1059.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.18%)</title><rect x="209.5" y="1139.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="209.5" y="1123.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="210.6" y="1107.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="210.6" y="1091.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="210.6" y="1075.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (44 samples, 3.98%)</title><rect x="211.6" y="1155.0" width="47.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="1166.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (43 samples, 3.89%)</title><rect x="211.6" y="1139.0" width="45.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.6" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 2.44%)</title><rect x="211.6" y="1123.0" width="28.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.6" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (27 samples, 2.44%)</title><rect x="211.6" y="1107.0" width="28.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.6" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 2.44%)</title><rect x="211.6" y="1091.0" width="28.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.6" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (21 samples, 1.90%)</title><rect x="211.6" y="1075.0" width="22.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.6" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 1.90%)</title><rect x="211.6" y="1059.0" width="22.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.6" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.08%)</title><rect x="211.6" y="1043.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.27%)</title><rect x="220.2" y="1027.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.27%)</title><rect x="220.2" y="1011.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.27%)</title><rect x="220.2" y="995.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.27%)</title><rect x="220.2" y="979.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.27%)</title><rect x="220.2" y="963.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.27%)</title><rect x="220.2" y="947.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.18%)</title><rect x="221.2" y="931.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.09%)</title><rect x="223.4" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.09%)</title><rect x="223.4" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.09%)</title><rect x="223.4" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.81%)</title><rect x="224.4" y="1043.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.81%)</title><rect x="224.4" y="1027.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.63%)</title><rect x="224.4" y="1011.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.63%)</title><rect x="224.4" y="995.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.18%)</title><rect x="231.9" y="1011.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.9" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.18%)</title><rect x="231.9" y="995.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="234.1" y="1075.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="234.1" y="1059.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="234.1" y="1043.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="234.1" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="235.1" y="1043.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="235.1" y="1027.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="235.1" y="1011.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.27%)</title><rect x="236.2" y="1075.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.27%)</title><rect x="236.2" y="1059.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="236.2" y="1043.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="236.2" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="236.2" y="1011.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="236.2" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.09%)</title><rect x="236.2" y="979.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="237.3" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="237.3" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="238.3" y="1043.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="238.3" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="238.3" y="1011.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="239.4" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.09%)</title><rect x="239.4" y="1059.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.81%)</title><rect x="240.5" y="1123.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.63%)</title><rect x="240.5" y="1107.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.63%)</title><rect x="240.5" y="1091.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.36%)</title><rect x="240.5" y="1075.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/1143908672.accept (4 samples, 0.36%)</title><rect x="240.5" y="1059.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.27%)</title><rect x="241.5" y="1043.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="241.5" y="1027.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="241.5" y="1011.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="241.5" y="995.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="241.5" y="979.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="242.6" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="242.6" y="995.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="242.6" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="242.6" y="963.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="243.7" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="243.7" y="1011.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="243.7" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="243.7" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="244.7" y="1075.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="244.7" y="1059.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="244.7" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="245.8" y="1075.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="245.8" y="1059.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="245.8" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="245.8" y="1027.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="245.8" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="245.8" y="995.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="245.8" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.8" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="245.8" y="963.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.8" y="974.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="245.8" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="245.8" y="931.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$241/750889796.apply (1 samples, 0.09%)</title><rect x="245.8" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="245.8" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.09%)</title><rect x="246.9" y="1043.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.9" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="246.9" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="249.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="246.9" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="249.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="246.9" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="249.9" y="1006.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="246.9" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="249.9" y="990.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="246.9" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="249.9" y="974.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="246.9" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="249.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.18%)</title><rect x="247.9" y="1107.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="249.0" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="249.0" y="1075.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.45%)</title><rect x="250.1" y="1123.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.27%)</title><rect x="250.1" y="1107.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.27%)</title><rect x="250.1" y="1091.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="250.1" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="250.1" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="251.1" y="1075.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="251.1" y="1059.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.18%)</title><rect x="251.1" y="1043.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.1" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="251.1" y="1027.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="254.1" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="251.1" y="1011.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="252.2" y="1027.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="252.2" y="1011.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="252.2" y="995.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.2" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="252.2" y="979.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.2" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="252.2" y="963.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="255.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.18%)</title><rect x="253.3" y="1107.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.18%)</title><rect x="253.3" y="1091.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="253.3" y="1075.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="253.3" y="1059.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.18%)</title><rect x="253.3" y="1043.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.09%)</title><rect x="253.3" y="1027.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.09%)</title><rect x="253.3" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.09%)</title><rect x="253.3" y="995.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (1 samples, 0.09%)</title><rect x="253.3" y="979.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.3" y="990.0"></text>
</g>
<g>
<title>java/nio/Bits.putIntB (1 samples, 0.09%)</title><rect x="253.3" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="254.3" y="1027.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="254.3" y="1011.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="254.3" y="995.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="254.3" y="979.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.18%)</title><rect x="255.4" y="1123.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.18%)</title><rect x="255.4" y="1107.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.09%)</title><rect x="255.4" y="1091.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.4" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.09%)</title><rect x="255.4" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.09%)</title><rect x="255.4" y="1059.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.4" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="255.4" y="1043.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="256.5" y="1091.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="256.5" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="257.5" y="1139.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.18%)</title><rect x="258.6" y="1171.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (807 samples, 72.97%)</title><rect x="260.7" y="1203.0" width="861.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.7" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (807 samples, 72.97%)</title><rect x="260.7" y="1187.0" width="861.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.7" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (807 samples, 72.97%)</title><rect x="260.7" y="1171.0" width="861.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.7" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1216268820.run (545 samples, 49.28%)</title><rect x="262.9" y="1155.0" width="581.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.9" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1216268..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (545 samples, 49.28%)</title><rect x="262.9" y="1139.0" width="581.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.9" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (545 samples, 49.28%)</title><rect x="262.9" y="1123.0" width="581.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.9" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (545 samples, 49.28%)</title><rect x="262.9" y="1107.0" width="581.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.9" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 0.90%)</title><rect x="268.2" y="1091.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 0.90%)</title><rect x="268.2" y="1075.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.90%)</title><rect x="268.2" y="1059.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="268.2" y="1043.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.63%)</title><rect x="271.4" y="1043.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.4" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="274.6" y="1027.0" width="4.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="277.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="274.6" y="1011.0" width="4.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="277.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (51 samples, 4.61%)</title><rect x="278.9" y="1091.0" width="54.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.9" y="1102.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (39 samples, 3.53%)</title><rect x="291.7" y="1075.0" width="41.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.7" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (39 samples, 3.53%)</title><rect x="291.7" y="1059.0" width="41.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.7" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (39 samples, 3.53%)</title><rect x="291.7" y="1043.0" width="41.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.7" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="291.7" y="1027.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.27%)</title><rect x="291.7" y="1011.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.27%)</title><rect x="291.7" y="995.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1893542463.accept (2 samples, 0.18%)</title><rect x="292.7" y="979.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (36 samples, 3.25%)</title><rect x="294.9" y="1027.0" width="38.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.9" y="1038.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1893542463.accept (36 samples, 3.25%)</title><rect x="294.9" y="1011.0" width="38.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.9" y="1022.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (36 samples, 3.25%)</title><rect x="294.9" y="995.0" width="38.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.9" y="1006.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (36 samples, 3.25%)</title><rect x="294.9" y="979.0" width="38.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.9" y="990.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (32 samples, 2.89%)</title><rect x="299.1" y="963.0" width="34.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.1" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (30 samples, 2.71%)</title><rect x="301.3" y="947.0" width="32.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.3" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (13 samples, 1.18%)</title><rect x="301.3" y="931.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (13 samples, 1.18%)</title><rect x="301.3" y="915.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/217153351.accept (1 samples, 0.09%)</title><rect x="313.0" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.0" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="314.1" y="899.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="317.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.54%)</title><rect x="315.1" y="931.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (17 samples, 1.54%)</title><rect x="315.1" y="915.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (8 samples, 0.72%)</title><rect x="324.7" y="899.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (162 samples, 14.65%)</title><rect x="333.3" y="1091.0" width="172.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.3" y="1102.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (162 samples, 14.65%)</title><rect x="333.3" y="1075.0" width="172.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.3" y="1086.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (162 samples, 14.65%)</title><rect x="333.3" y="1059.0" width="172.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="336.3" y="1070.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 14.65%)</title><rect x="333.3" y="1043.0" width="172.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.3" y="1054.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 14.65%)</title><rect x="333.3" y="1027.0" width="172.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.3" y="1038.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (162 samples, 14.65%)</title><rect x="333.3" y="1011.0" width="172.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.3" y="1022.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.70%)</title><rect x="333.3" y="995.0" width="55.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.3" y="1006.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (24 samples, 2.17%)</title><rect x="333.3" y="979.0" width="25.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.3" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (19 samples, 1.72%)</title><rect x="333.3" y="963.0" width="20.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="345.0" y="947.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="348.0" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="345.0" y="931.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="348.0" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="346.1" y="947.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="349.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="348.2" y="931.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="351.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.27%)</title><rect x="350.3" y="947.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="350.3" y="931.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.27%)</title><rect x="350.3" y="915.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.27%)</title><rect x="350.3" y="899.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.27%)</title><rect x="350.3" y="883.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (5 samples, 0.45%)</title><rect x="353.5" y="963.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.36%)</title><rect x="353.5" y="947.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="357.8" y="947.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.8" y="958.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="357.8" y="931.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="360.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.53%)</title><rect x="358.9" y="979.0" width="29.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.9" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.27%)</title><rect x="358.9" y="963.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 2.26%)</title><rect x="362.1" y="963.0" width="26.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.1" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="367.4" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.18%)</title><rect x="368.5" y="947.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="369.5" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.81%)</title><rect x="370.6" y="947.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.81%)</title><rect x="370.6" y="931.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 0.72%)</title><rect x="370.6" y="915.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="379.2" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="379.2" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="379.2" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="382.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="379.2" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="382.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="379.2" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="382.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="379.2" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.72%)</title><rect x="380.2" y="947.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 8.95%)</title><rect x="388.8" y="995.0" width="105.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.8" y="1006.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.54%)</title><rect x="388.8" y="979.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.54%)</title><rect x="388.8" y="963.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.18%)</title><rect x="389.8" y="947.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="390.9" y="931.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.09%)</title><rect x="392.0" y="947.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.18%)</title><rect x="393.0" y="947.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.90%)</title><rect x="395.2" y="979.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.90%)</title><rect x="395.2" y="963.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="400.5" y="947.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.18%)</title><rect x="401.6" y="947.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.18%)</title><rect x="403.7" y="947.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.72%)</title><rect x="405.8" y="979.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.72%)</title><rect x="405.8" y="963.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.63%)</title><rect x="406.9" y="947.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="413.3" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.54%)</title><rect x="414.4" y="979.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.54%)</title><rect x="414.4" y="963.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="415.4" y="947.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="418.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="416.5" y="947.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="416.5" y="931.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="416.5" y="915.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="419.7" y="947.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (69 samples, 6.24%)</title><rect x="420.8" y="979.0" width="73.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.8" y="990.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 6.24%)</title><rect x="420.8" y="963.0" width="73.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.8" y="974.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (1 samples, 0.09%)</title><rect x="421.8" y="947.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 2.08%)</title><rect x="422.9" y="947.0" width="24.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.9" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.90%)</title><rect x="426.1" y="931.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.90%)</title><rect x="426.1" y="915.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.90%)</title><rect x="426.1" y="899.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.90%)</title><rect x="436.8" y="931.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="439.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.18%)</title><rect x="447.4" y="947.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 3.80%)</title><rect x="449.6" y="947.0" width="44.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="452.6" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 3.80%)</title><rect x="449.6" y="931.0" width="44.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.6" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.80%)</title><rect x="449.6" y="915.0" width="44.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.6" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.08%)</title><rect x="456.0" y="899.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.18%)</title><rect x="458.1" y="883.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.45%)</title><rect x="460.2" y="883.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.45%)</title><rect x="460.2" y="867.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.45%)</title><rect x="460.2" y="851.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.27%)</title><rect x="462.4" y="835.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="465.6" y="883.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="466.6" y="883.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="466.6" y="867.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="467.7" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.27%)</title><rect x="468.8" y="899.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.18%)</title><rect x="469.8" y="883.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.18%)</title><rect x="469.8" y="867.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.18%)</title><rect x="469.8" y="851.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.18%)</title><rect x="469.8" y="835.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="472.0" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.90%)</title><rect x="473.0" y="899.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.90%)</title><rect x="473.0" y="883.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.90%)</title><rect x="473.0" y="867.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.90%)</title><rect x="473.0" y="851.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.0" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.90%)</title><rect x="473.0" y="835.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.0" y="846.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.81%)</title><rect x="474.1" y="819.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.1" y="830.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (4 samples, 0.36%)</title><rect x="479.4" y="803.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.27%)</title><rect x="483.7" y="899.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="483.7" y="883.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="483.7" y="867.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.63%)</title><rect x="486.9" y="899.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="492.2" y="883.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="495.2" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="492.2" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="495.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 0.09%)</title><rect x="492.2" y="851.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.2" y="862.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="493.3" y="867.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="496.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.99%)</title><rect x="494.4" y="995.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.99%)</title><rect x="494.4" y="979.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="497.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.99%)</title><rect x="494.4" y="963.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.18%)</title><rect x="494.4" y="947.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (5 samples, 0.45%)</title><rect x="496.5" y="947.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.36%)</title><rect x="501.8" y="947.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.36%)</title><rect x="501.8" y="931.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (311 samples, 28.12%)</title><rect x="506.1" y="1091.0" width="331.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.1" y="1102.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.63%)</title><rect x="514.6" y="1075.0" width="7.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="517.6" y="1086.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="515.7" y="1059.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="518.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (58 samples, 5.24%)</title><rect x="522.1" y="1075.0" width="61.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="525.1" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="522.1" y="1059.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="525.1" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (57 samples, 5.15%)</title><rect x="523.2" y="1059.0" width="60.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.2" y="1070.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (56 samples, 5.06%)</title><rect x="524.2" y="1043.0" width="59.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.2" y="1054.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.45%)</title><rect x="531.7" y="1027.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="534.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 1.45%)</title><rect x="531.7" y="1011.0" width="17.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 1.45%)</title><rect x="531.7" y="995.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="534.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 1.45%)</title><rect x="531.7" y="979.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (16 samples, 1.45%)</title><rect x="531.7" y="963.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.36%)</title><rect x="548.8" y="1027.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.36%)</title><rect x="548.8" y="1011.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.36%)</title><rect x="548.8" y="995.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.36%)</title><rect x="548.8" y="979.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.36%)</title><rect x="548.8" y="963.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (29 samples, 2.62%)</title><rect x="553.1" y="1027.0" width="30.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.1" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.63%)</title><rect x="564.8" y="1011.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.8" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.09%)</title><rect x="566.9" y="995.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.45%)</title><rect x="568.0" y="995.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.45%)</title><rect x="568.0" y="979.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="571.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.90%)</title><rect x="573.3" y="995.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="576.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.36%)</title><rect x="584.0" y="1075.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.36%)</title><rect x="584.0" y="1059.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (156 samples, 14.10%)</title><rect x="588.3" y="1075.0" width="166.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.3" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (151 samples, 13.65%)</title><rect x="588.3" y="1059.0" width="161.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="591.3" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 4.88%)</title><rect x="602.1" y="1043.0" width="57.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="605.1" y="1054.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="619.2" y="1027.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="619.2" y="1011.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="619.2" y="995.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.71%)</title><rect x="620.3" y="1027.0" width="32.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.3" y="1038.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.44%)</title><rect x="623.5" y="1011.0" width="28.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.5" y="1022.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.81%)</title><rect x="630.9" y="995.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.81%)</title><rect x="630.9" y="979.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.9" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.81%)</title><rect x="630.9" y="963.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="630.9" y="947.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.9" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.72%)</title><rect x="632.0" y="947.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="635.0" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.18%)</title><rect x="632.0" y="931.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="635.0" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="632.0" y="915.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.0" y="926.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="633.1" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="636.1" y="910.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="633.1" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="636.1" y="894.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.18%)</title><rect x="634.1" y="931.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.1" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.36%)</title><rect x="636.3" y="931.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="639.3" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="638.4" y="915.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="641.4" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="639.5" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="642.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="639.5" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="642.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="639.5" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="642.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.45%)</title><rect x="640.5" y="995.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.5" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="645.9" y="995.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="648.9" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.45%)</title><rect x="646.9" y="995.0" width="5.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="649.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="652.3" y="1027.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="655.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="652.3" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="655.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="652.3" y="995.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="655.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="652.3" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="655.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="652.3" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="655.3" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="652.3" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.3" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="653.3" y="1027.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="656.3" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="655.5" y="1027.0" width="4.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="658.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.63%)</title><rect x="659.7" y="1043.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="659.7" y="1027.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="662.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="659.7" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="662.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.54%)</title><rect x="660.8" y="1027.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.54%)</title><rect x="660.8" y="1011.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.8" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="666.1" y="995.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="667.2" y="1043.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="667.2" y="1027.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="667.2" y="1011.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="667.2" y="995.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="667.2" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.2" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 6.87%)</title><rect x="668.3" y="1043.0" width="81.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.3" y="1054.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 6.69%)</title><rect x="670.4" y="1027.0" width="79.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.4" y="1038.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.54%)</title><rect x="670.4" y="1011.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.54%)</title><rect x="670.4" y="995.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.54%)</title><rect x="670.4" y="979.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="673.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.54%)</title><rect x="670.4" y="963.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="676.8" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="679.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="676.8" y="995.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="676.8" y="979.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="676.8" y="963.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (67 samples, 6.06%)</title><rect x="677.9" y="1011.0" width="71.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="680.9" y="1022.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (56 samples, 5.06%)</title><rect x="689.6" y="995.0" width="59.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.6" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 2.89%)</title><rect x="715.2" y="979.0" width="34.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="718.2" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.18%)</title><rect x="735.5" y="963.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.90%)</title><rect x="737.6" y="963.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="746.2" y="947.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="746.2" y="931.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="749.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="746.2" y="915.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="749.2" y="926.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="746.2" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="749.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="747.2" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="750.2" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="747.2" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.2" y="894.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="748.3" y="963.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="751.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.45%)</title><rect x="749.4" y="1059.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.45%)</title><rect x="749.4" y="1043.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.45%)</title><rect x="749.4" y="1027.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.45%)</title><rect x="749.4" y="1011.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 5.52%)</title><rect x="754.7" y="1075.0" width="65.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.7" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.09%)</title><rect x="756.8" y="1059.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="759.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (58 samples, 5.24%)</title><rect x="757.9" y="1059.0" width="61.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.9" y="1070.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1433986946.process (24 samples, 2.17%)</title><rect x="759.0" y="1043.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.0" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (24 samples, 2.17%)</title><rect x="759.0" y="1027.0" width="25.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.0" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.99%)</title><rect x="759.0" y="1011.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.0" y="1022.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="761.1" y="995.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="764.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="761.1" y="979.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="761.1" y="963.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="761.1" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="761.1" y="931.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.72%)</title><rect x="762.2" y="995.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="765.4" y="979.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="768.4" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="765.4" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="768.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.36%)</title><rect x="766.4" y="979.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.4" y="990.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="767.5" y="963.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="770.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.27%)</title><rect x="770.7" y="995.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.72%)</title><rect x="773.9" y="995.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="776.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="780.3" y="979.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="783.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="780.3" y="963.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="783.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="781.4" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.4" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="781.4" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="784.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="781.4" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="784.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="781.4" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="784.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="782.4" y="1011.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="782.4" y="995.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="785.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="782.4" y="979.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="785.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="782.4" y="963.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (10 samples, 0.90%)</title><rect x="784.6" y="1043.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.18%)</title><rect x="793.1" y="1027.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.09%)</title><rect x="795.2" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="795.2" y="1027.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="796.3" y="1043.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="796.3" y="1027.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.3" y="1038.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="799.5" y="1043.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="802.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="800.6" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="800.6" y="1027.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="803.6" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="800.6" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.6" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.72%)</title><rect x="801.6" y="1043.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.63%)</title><rect x="802.7" y="1027.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.7" y="1038.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="802.7" y="1011.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="805.7" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.36%)</title><rect x="805.9" y="1011.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="810.2" y="1043.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="813.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="810.2" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="813.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.45%)</title><rect x="811.2" y="1043.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="814.4" y="1027.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.27%)</title><rect x="816.6" y="1043.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.27%)</title><rect x="816.6" y="1027.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.27%)</title><rect x="816.6" y="1011.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="816.6" y="995.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="819.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="816.6" y="979.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.18%)</title><rect x="816.6" y="963.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.6" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="817.6" y="947.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="820.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="818.7" y="995.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="819.8" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.8" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="819.8" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.8" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="819.8" y="1043.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="819.8" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="822.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="819.8" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="819.8" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="822.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="819.8" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.8" y="990.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="819.8" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="822.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="820.8" y="1075.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="820.8" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="820.8" y="1043.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="823.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="820.8" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.18%)</title><rect x="821.9" y="1075.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.18%)</title><rect x="821.9" y="1059.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.18%)</title><rect x="821.9" y="1043.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.72%)</title><rect x="821.9" y="1027.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="824.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.72%)</title><rect x="821.9" y="1011.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (8 samples, 0.72%)</title><rect x="821.9" y="995.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/182425727.accept (1 samples, 0.09%)</title><rect x="824.1" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.1" y="990.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.45%)</title><rect x="825.1" y="979.0" width="5.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="828.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.45%)</title><rect x="830.5" y="1027.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/182425727.accept (5 samples, 0.45%)</title><rect x="830.5" y="1011.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="833.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (5 samples, 0.45%)</title><rect x="830.5" y="995.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.45%)</title><rect x="830.5" y="979.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="833.5" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.45%)</title><rect x="830.5" y="963.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.5" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.45%)</title><rect x="830.5" y="947.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.5" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="833.7" y="931.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="836.7" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="833.7" y="915.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="836.7" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.09%)</title><rect x="835.8" y="1075.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.8" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="836.9" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="839.9" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.54%)</title><rect x="837.9" y="1091.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="837.9" y="1075.0" width="6.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="840.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.36%)</title><rect x="844.3" y="1155.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.36%)</title><rect x="844.3" y="1139.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.36%)</title><rect x="844.3" y="1123.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.36%)</title><rect x="844.3" y="1107.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (256 samples, 23.15%)</title><rect x="848.6" y="1155.0" width="273.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.6" y="1166.0">java/util/concurrent/ThreadPoolExecut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (251 samples, 22.69%)</title><rect x="851.8" y="1139.0" width="267.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.8" y="1150.0">java/util/concurrent/LinkedBlockingQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (228 samples, 20.61%)</title><rect x="872.1" y="1123.0" width="243.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="875.1" y="1134.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (22 samples, 1.99%)</title><rect x="883.8" y="1107.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="886.8" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (17 samples, 1.54%)</title><rect x="907.3" y="1107.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="910.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.54%)</title><rect x="907.3" y="1091.0" width="18.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="910.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.54%)</title><rect x="907.3" y="1075.0" width="18.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="910.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.54%)</title><rect x="907.3" y="1059.0" width="18.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="910.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (178 samples, 16.09%)</title><rect x="925.4" y="1107.0" width="189.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="928.4" y="1118.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (177 samples, 16.00%)</title><rect x="926.5" y="1091.0" width="188.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="929.5" y="1102.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="939.3" y="1075.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.3" y="1086.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="940.3" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="943.3" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="941.4" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.4" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (157 samples, 14.20%)</title><rect x="942.5" y="1075.0" width="167.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="945.5" y="1086.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="948.9" y="1059.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.9" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.81%)</title><rect x="951.0" y="1059.0" width="21.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.0" y="1070.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.54%)</title><rect x="957.4" y="1043.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="958.5" y="1027.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="961.5" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="959.5" y="1027.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.5" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="961.7" y="1027.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="964.7" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="963.8" y="1043.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.8" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.54%)</title><rect x="965.9" y="1043.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="972.4" y="1059.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.4" y="1070.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.99%)</title><rect x="974.5" y="1059.0" width="11.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="977.5" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 3.53%)</title><rect x="986.2" y="1059.0" width="41.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="989.2" y="1070.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (63 samples, 5.70%)</title><rect x="1027.8" y="1059.0" width="67.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1030.8" y="1070.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.27%)</title><rect x="1095.0" y="1059.0" width="3.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1098.0" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.18%)</title><rect x="1098.2" y="1059.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1101.2" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.45%)</title><rect x="1100.4" y="1059.0" width="5.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1103.4" y="1070.0"></text>
</g>
<g>
<title>_init (2 samples, 0.18%)</title><rect x="1105.7" y="1059.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1108.7" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1107.8" y="1059.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.8" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1108.9" y="1059.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1111.9" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.27%)</title><rect x="1110.0" y="1075.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1113.0" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1113.2" y="1075.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.18%)</title><rect x="1115.3" y="1123.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1118.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="1117.5" y="1123.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="1117.5" y="1107.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="1117.5" y="1091.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1120.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="1117.5" y="1075.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1120.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.09%)</title><rect x="1119.6" y="1139.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1122.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.09%)</title><rect x="1120.7" y="1139.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1123.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1121.7" y="1203.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.09%)</title><rect x="1121.7" y="1187.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.7" y="1198.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.09%)</title><rect x="1121.7" y="1171.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1124.7" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.09%)</title><rect x="1121.7" y="1155.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.7" y="1166.0"></text>
</g>
<g>
<title>start_thread (63 samples, 5.70%)</title><rect x="1122.8" y="1203.0" width="67.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1125.8" y="1214.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (63 samples, 5.70%)</title><rect x="1122.8" y="1187.0" width="67.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1125.8" y="1198.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.54%)</title><rect x="1122.8" y="1171.0" width="18.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.8" y="1182.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.27%)</title><rect x="1122.8" y="1155.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.8" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.27%)</title><rect x="1122.8" y="1139.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.8" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1122.8" y="1123.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.8" y="1134.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1123.9" y="1123.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1126.9" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.27%)</title><rect x="1126.0" y="1155.0" width="14.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.0" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.36%)</title><rect x="1126.0" y="1139.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.0" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1126.0" y="1123.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.0" y="1134.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.09%)</title><rect x="1127.1" y="1123.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.1" y="1134.0"></text>
</g>
<g>
<title>Atomic::cmpxchg(signed char, signed char volatile*, signed char) (1 samples, 0.09%)</title><rect x="1127.1" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.1" y="1118.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1128.1" y="1123.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1131.1" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.54%)</title><rect x="1130.3" y="1139.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.3" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.36%)</title><rect x="1130.3" y="1123.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.3" y="1134.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.18%)</title><rect x="1130.3" y="1107.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.3" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1131.3" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.3" y="1102.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1131.3" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.3" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1132.4" y="1107.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.4" y="1118.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1132.4" y="1091.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.4" y="1102.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1132.4" y="1075.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.4" y="1086.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1132.4" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.4" y="1070.0"></text>
</g>
<g>
<title>metadata_Relocation::unpack_data() (1 samples, 0.09%)</title><rect x="1133.5" y="1075.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1134.5" y="1123.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.5" y="1134.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1134.5" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.5" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1135.6" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="1118.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1135.6" y="1091.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.6" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.36%)</title><rect x="1136.7" y="1139.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.7" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.36%)</title><rect x="1136.7" y="1123.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.7" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.36%)</title><rect x="1136.7" y="1107.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.7" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.36%)</title><rect x="1136.7" y="1091.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.7" y="1102.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.27%)</title><rect x="1137.7" y="1075.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.7" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.27%)</title><rect x="1137.7" y="1059.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.7" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.27%)</title><rect x="1137.7" y="1043.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.7" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.18%)</title><rect x="1138.8" y="1027.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (43 samples, 3.89%)</title><rect x="1140.9" y="1171.0" width="45.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.9" y="1182.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (43 samples, 3.89%)</title><rect x="1140.9" y="1155.0" width="45.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.9" y="1166.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (43 samples, 3.89%)</title><rect x="1140.9" y="1139.0" width="45.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.9" y="1150.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (43 samples, 3.89%)</title><rect x="1140.9" y="1123.0" width="45.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.9" y="1134.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (41 samples, 3.71%)</title><rect x="1140.9" y="1107.0" width="43.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.9" y="1118.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (41 samples, 3.71%)</title><rect x="1140.9" y="1091.0" width="43.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.9" y="1102.0">Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1140.9" y="1075.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.9" y="1086.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1140.9" y="1059.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.9" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1140.9" y="1043.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.9" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1140.9" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.9" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1140.9" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.9" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1140.9" y="995.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.9" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1140.9" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.9" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1140.9" y="963.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.9" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1140.9" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.9" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.09%)</title><rect x="1140.9" y="931.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.9" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1140.9" y="915.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.9" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1140.9" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.9" y="910.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.09%)</title><rect x="1140.9" y="883.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.9" y="894.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.09%)</title><rect x="1140.9" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.9" y="878.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 1.81%)</title><rect x="1142.0" y="1075.0" width="21.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.0" y="1086.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1142.0" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.0" y="1070.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1142.0" y="1043.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.0" y="1054.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;) (1 samples, 0.09%)</title><rect x="1142.0" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="1038.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.09%)</title><rect x="1142.0" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.0" y="1022.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.09%)</title><rect x="1142.0" y="995.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.0" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.09%)</title><rect x="1143.1" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.09%)</title><rect x="1143.1" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1143.1" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1144.1" y="1059.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="1144.1" y="1043.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="1054.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1144.1" y="1027.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.1" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1145.2" y="1059.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1145.2" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1145.2" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 1.45%)</title><rect x="1146.3" y="1059.0" width="17.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="1070.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1146.3" y="1043.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.18%)</title><rect x="1147.3" y="1043.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.36%)</title><rect x="1149.5" y="1043.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1151.6" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.6" y="1038.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1152.7" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1153.7" y="1043.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1154.8" y="1043.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.8" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1154.8" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1155.9" y="1043.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.18%)</title><rect x="1155.9" y="1027.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.27%)</title><rect x="1158.0" y="1043.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.0" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.18%)</title><rect x="1158.0" y="1027.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (2 samples, 0.18%)</title><rect x="1158.0" y="1011.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.09%)</title><rect x="1158.0" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.0" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1158.0" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.09%)</title><rect x="1159.1" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1160.1" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.1" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1160.1" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.1" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1160.1" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.1" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1161.2" y="1043.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="1054.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1162.3" y="1043.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1165.3" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.18%)</title><rect x="1163.3" y="1075.0" width="13.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1163.3" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1163.3" y="1043.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1164.4" y="1059.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1164.4" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1165.5" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="1070.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1165.5" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1165.5" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1165.5" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1165.5" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1166.5" y="1059.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1166.5" y="1043.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.63%)</title><rect x="1167.6" y="1059.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.6" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1167.6" y="1043.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1168.7" y="1043.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1170.8" y="1043.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1171.9" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.18%)</title><rect x="1172.9" y="1043.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1175.1" y="1059.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1175.1" y="1043.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="1054.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1175.1" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.1" y="1027.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="1038.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.09%)</title><rect x="1176.1" y="1011.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.63%)</title><rect x="1177.2" y="1075.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.63%)</title><rect x="1177.2" y="1059.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.63%)</title><rect x="1177.2" y="1043.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.63%)</title><rect x="1177.2" y="1027.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.63%)</title><rect x="1177.2" y="1011.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.63%)</title><rect x="1177.2" y="995.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="1006.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.2" y="979.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="990.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.2" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="974.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1177.2" y="947.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.2" y="958.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1177.2" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1177.2" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1177.2" y="899.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1177.2" y="883.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1177.2" y="867.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.45%)</title><rect x="1178.3" y="979.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.45%)</title><rect x="1178.3" y="963.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.45%)</title><rect x="1178.3" y="947.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.45%)</title><rect x="1178.3" y="931.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.45%)</title><rect x="1178.3" y="915.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.45%)</title><rect x="1178.3" y="899.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.3" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.3" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1178.3" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1179.3" y="883.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1179.3" y="867.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1179.3" y="851.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1179.3" y="835.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1179.3" y="819.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1179.3" y="803.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.3" y="787.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1179.3" y="771.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1179.3" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1179.3" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.3" y="723.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1179.3" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.09%)</title><rect x="1179.3" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="659.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="611.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="499.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="419.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="403.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="387.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="371.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="323.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="307.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="291.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="275.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="259.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="243.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="227.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="211.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="195.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="163.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.4" y="131.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.4" y="115.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.4" y="99.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.4" y="83.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.4" y="67.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.4" y="51.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="62.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.4" y="35.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="707.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.5" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="627.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.5" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="563.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="531.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.5" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="435.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="419.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>SafePointNode::set_local(JVMState*, unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1181.5" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.5" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.09%)</title><rect x="1182.5" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.6" y="979.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="990.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1183.6" y="963.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1183.6" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1183.6" y="931.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1183.6" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1183.6" y="899.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.09%)</title><rect x="1184.7" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1184.7" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1184.7" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="1086.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.7" y="1059.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="1070.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1184.7" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1184.7" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.09%)</title><rect x="1185.7" y="1107.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="1118.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.09%)</title><rect x="1185.7" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="1102.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.27%)</title><rect x="1186.8" y="1171.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.8" y="1182.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.27%)</title><rect x="1186.8" y="1155.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="1166.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.18%)</title><rect x="1186.8" y="1139.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="1150.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="1123.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.9" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="1107.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="1102.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="1086.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="1054.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="1139.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="1150.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="1123.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="1134.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="1107.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="1091.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="1086.0"></text>
</g>
</g>
</svg>
