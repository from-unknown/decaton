<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (335 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 6.57%)</title><rect x="10.0" y="1283.0" width="77.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (22 samples, 6.57%)</title><rect x="10.0" y="1267.0" width="77.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (22 samples, 6.57%)</title><rect x="10.0" y="1251.0" width="77.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.30%)</title><rect x="10.0" y="1235.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.30%)</title><rect x="10.0" y="1219.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.30%)</title><rect x="10.0" y="1203.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2500 (1 samples, 0.30%)</title><rect x="10.0" y="1187.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.pause (1 samples, 0.30%)</title><rect x="10.0" y="1171.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.30%)</title><rect x="13.5" y="1235.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.30%)</title><rect x="13.5" y="1219.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.39%)</title><rect x="17.0" y="1235.0" width="28.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="1246.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/2084875528.accept (8 samples, 2.39%)</title><rect x="17.0" y="1219.0" width="28.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="1230.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (8 samples, 2.39%)</title><rect x="17.0" y="1203.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 0.90%)</title><rect x="17.0" y="1187.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.90%)</title><rect x="17.0" y="1171.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.90%)</title><rect x="17.0" y="1155.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.90%)</title><rect x="17.0" y="1139.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.90%)</title><rect x="17.0" y="1123.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.90%)</title><rect x="17.0" y="1107.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.60%)</title><rect x="27.6" y="1187.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.60%)</title><rect x="27.6" y="1171.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.30%)</title><rect x="34.7" y="1187.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="34.7" y="1171.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="34.7" y="1155.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.60%)</title><rect x="38.2" y="1187.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.60%)</title><rect x="38.2" y="1171.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.60%)</title><rect x="38.2" y="1155.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.60%)</title><rect x="38.2" y="1139.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.60%)</title><rect x="38.2" y="1123.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.58%)</title><rect x="45.2" y="1235.0" width="42.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.2" y="1246.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.58%)</title><rect x="45.2" y="1219.0" width="42.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.2" y="1230.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.69%)</title><rect x="45.2" y="1203.0" width="31.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.2" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.90%)</title><rect x="45.2" y="1187.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.90%)</title><rect x="45.2" y="1171.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.60%)</title><rect x="45.2" y="1155.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.30%)</title><rect x="45.2" y="1139.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.30%)</title><rect x="45.2" y="1123.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.30%)</title><rect x="45.2" y="1107.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.30%)</title><rect x="45.2" y="1091.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.30%)</title><rect x="45.2" y="1075.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.30%)</title><rect x="45.2" y="1059.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.30%)</title><rect x="45.2" y="1043.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.30%)</title><rect x="48.7" y="1139.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.30%)</title><rect x="48.7" y="1123.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.30%)</title><rect x="48.7" y="1107.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.30%)</title><rect x="48.7" y="1091.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="48.7" y="1075.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="48.7" y="1059.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="48.7" y="1043.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.30%)</title><rect x="48.7" y="1027.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/1500606335.shouldBlock (1 samples, 0.30%)</title><rect x="52.3" y="1155.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.30%)</title><rect x="52.3" y="1139.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.30%)</title><rect x="52.3" y="1123.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.3" y="1134.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.30%)</title><rect x="52.3" y="1107.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.30%)</title><rect x="52.3" y="1091.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.79%)</title><rect x="55.8" y="1187.0" width="21.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.8" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.49%)</title><rect x="59.3" y="1171.0" width="17.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.19%)</title><rect x="59.3" y="1155.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.19%)</title><rect x="59.3" y="1139.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.30%)</title><rect x="59.3" y="1123.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.90%)</title><rect x="62.8" y="1123.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.30%)</title><rect x="62.8" y="1107.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.60%)</title><rect x="66.4" y="1107.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.60%)</title><rect x="66.4" y="1091.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.60%)</title><rect x="66.4" y="1075.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.30%)</title><rect x="73.4" y="1155.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.30%)</title><rect x="73.4" y="1139.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="73.4" y="1123.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="73.4" y="1107.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="73.4" y="1091.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.30%)</title><rect x="73.4" y="1075.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.4" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="73.4" y="1059.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="76.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.30%)</title><rect x="76.9" y="1203.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.30%)</title><rect x="76.9" y="1187.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.30%)</title><rect x="76.9" y="1171.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.30%)</title><rect x="76.9" y="1155.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.30%)</title><rect x="76.9" y="1139.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.30%)</title><rect x="76.9" y="1123.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="76.9" y="1107.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.30%)</title><rect x="76.9" y="1091.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.30%)</title><rect x="76.9" y="1075.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.30%)</title><rect x="76.9" y="1059.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.30%)</title><rect x="76.9" y="1043.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.30%)</title><rect x="76.9" y="1027.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.30%)</title><rect x="76.9" y="1011.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.30%)</title><rect x="80.4" y="1203.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.30%)</title><rect x="80.4" y="1187.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.30%)</title><rect x="80.4" y="1171.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.30%)</title><rect x="80.4" y="1155.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.30%)</title><rect x="80.4" y="1139.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.30%)</title><rect x="84.0" y="1203.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="84.0" y="1187.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="84.0" y="1171.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="84.0" y="1155.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.30%)</title><rect x="84.0" y="1139.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (220 samples, 65.67%)</title><rect x="87.5" y="1283.0" width="774.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.5" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (220 samples, 65.67%)</title><rect x="87.5" y="1267.0" width="774.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.5" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (220 samples, 65.67%)</title><rect x="87.5" y="1251.0" width="774.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.5" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/770006613.run (203 samples, 60.60%)</title><rect x="94.5" y="1235.0" width="715.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.5" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/770006613.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (203 samples, 60.60%)</title><rect x="94.5" y="1219.0" width="715.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.5" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (203 samples, 60.60%)</title><rect x="94.5" y="1203.0" width="715.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.5" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (203 samples, 60.60%)</title><rect x="94.5" y="1187.0" width="715.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.5" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 1.79%)</title><rect x="94.5" y="1171.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.5" y="1182.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 1.79%)</title><rect x="94.5" y="1155.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.5" y="1166.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 1.79%)</title><rect x="94.5" y="1139.0" width="21.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.5" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="94.5" y="1123.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 1.49%)</title><rect x="98.1" y="1123.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (14 samples, 4.18%)</title><rect x="115.7" y="1171.0" width="49.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.7" y="1182.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.09%)</title><rect x="140.3" y="1155.0" width="24.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.3" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.09%)</title><rect x="140.3" y="1139.0" width="24.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="143.3" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.09%)</title><rect x="140.3" y="1123.0" width="24.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.3" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.30%)</title><rect x="140.3" y="1107.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.30%)</title><rect x="140.3" y="1091.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.30%)</title><rect x="140.3" y="1075.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/86536918.accept (1 samples, 0.30%)</title><rect x="140.3" y="1059.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.79%)</title><rect x="143.9" y="1107.0" width="21.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.9" y="1118.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/86536918.accept (6 samples, 1.79%)</title><rect x="143.9" y="1091.0" width="21.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.9" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (6 samples, 1.79%)</title><rect x="143.9" y="1075.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.9" y="1086.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 1.79%)</title><rect x="143.9" y="1059.0" width="21.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.9" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.90%)</title><rect x="154.4" y="1043.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="157.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.90%)</title><rect x="154.4" y="1027.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="157.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.90%)</title><rect x="154.4" y="1011.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (34 samples, 10.15%)</title><rect x="165.0" y="1171.0" width="119.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.0" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (34 samples, 10.15%)</title><rect x="165.0" y="1155.0" width="119.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.0" y="1166.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (34 samples, 10.15%)</title><rect x="165.0" y="1139.0" width="119.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.0" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 10.15%)</title><rect x="165.0" y="1123.0" width="119.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.0" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 10.15%)</title><rect x="165.0" y="1107.0" width="119.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.0" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (34 samples, 10.15%)</title><rect x="165.0" y="1091.0" width="119.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.0" y="1102.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 2.99%)</title><rect x="165.0" y="1075.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.0" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.30%)</title><rect x="168.5" y="1059.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.30%)</title><rect x="168.5" y="1043.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.30%)</title><rect x="168.5" y="1027.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.30%)</title><rect x="168.5" y="1011.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.30%)</title><rect x="168.5" y="995.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.30%)</title><rect x="168.5" y="979.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.30%)</title><rect x="168.5" y="963.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.39%)</title><rect x="172.0" y="1059.0" width="28.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.0" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.90%)</title><rect x="189.6" y="1043.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.60%)</title><rect x="189.6" y="1027.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.60%)</title><rect x="189.6" y="1011.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.30%)</title><rect x="196.7" y="1027.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.30%)</title><rect x="196.7" y="1011.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.30%)</title><rect x="196.7" y="995.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="196.7" y="979.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="199.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="196.7" y="963.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="199.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="196.7" y="947.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="199.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="196.7" y="931.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="199.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.30%)</title><rect x="196.7" y="915.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="199.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 6.87%)</title><rect x="200.2" y="1075.0" width="81.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.2" y="1086.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.60%)</title><rect x="200.2" y="1059.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 2.09%)</title><rect x="207.3" y="1059.0" width="24.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.3" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.09%)</title><rect x="207.3" y="1043.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.3" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.90%)</title><rect x="217.8" y="1027.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.90%)</title><rect x="217.8" y="1011.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.60%)</title><rect x="221.3" y="995.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.30%)</title><rect x="228.4" y="1027.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.19%)</title><rect x="231.9" y="1059.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 1.19%)</title><rect x="231.9" y="1043.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (10 samples, 2.99%)</title><rect x="246.0" y="1059.0" width="35.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 2.99%)</title><rect x="246.0" y="1043.0" width="35.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.19%)</title><rect x="246.0" y="1027.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.30%)</title><rect x="246.0" y="1011.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.30%)</title><rect x="246.0" y="995.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.30%)</title><rect x="246.0" y="979.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.90%)</title><rect x="249.5" y="1011.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 1.79%)</title><rect x="260.1" y="1027.0" width="21.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.1" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 1.79%)</title><rect x="260.1" y="1011.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.1" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.49%)</title><rect x="263.6" y="995.0" width="17.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.30%)</title><rect x="263.6" y="979.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.30%)</title><rect x="263.6" y="963.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.30%)</title><rect x="267.1" y="979.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.30%)</title><rect x="267.1" y="963.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.30%)</title><rect x="267.1" y="947.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.30%)</title><rect x="267.1" y="931.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.30%)</title><rect x="267.1" y="915.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.30%)</title><rect x="270.7" y="979.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.30%)</title><rect x="270.7" y="963.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.30%)</title><rect x="270.7" y="947.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.30%)</title><rect x="270.7" y="931.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.7" y="942.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.30%)</title><rect x="270.7" y="915.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.60%)</title><rect x="274.2" y="979.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.60%)</title><rect x="274.2" y="963.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.60%)</title><rect x="274.2" y="947.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.30%)</title><rect x="281.2" y="1075.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.30%)</title><rect x="281.2" y="1059.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.30%)</title><rect x="281.2" y="1043.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.30%)</title><rect x="281.2" y="1027.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="281.2" y="1011.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (148 samples, 44.18%)</title><rect x="284.7" y="1171.0" width="521.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.7" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="323.5" y="1155.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="326.5" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="323.5" y="1139.0" width="3.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="326.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (21 samples, 6.27%)</title><rect x="327.0" y="1155.0" width="74.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.0" y="1166.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 5.97%)</title><rect x="330.5" y="1139.0" width="70.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="333.5" y="1150.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 5.97%)</title><rect x="330.5" y="1123.0" width="70.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.5" y="1134.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="330.5" y="1107.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="330.5" y="1091.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="330.5" y="1075.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="330.5" y="1059.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.30%)</title><rect x="334.1" y="1107.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.30%)</title><rect x="334.1" y="1091.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.30%)</title><rect x="334.1" y="1075.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.30%)</title><rect x="334.1" y="1059.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.1" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 5.37%)</title><rect x="337.6" y="1107.0" width="63.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.6" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 2.99%)</title><rect x="365.8" y="1091.0" width="35.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.8" y="1102.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.60%)</title><rect x="369.3" y="1075.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="376.3" y="1075.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.30%)</title><rect x="376.3" y="1059.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.79%)</title><rect x="379.9" y="1075.0" width="21.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.9" y="1086.0">j..</text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (6 samples, 1.79%)</title><rect x="379.9" y="1059.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.9" y="1070.0">o..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (41 samples, 12.24%)</title><rect x="401.0" y="1155.0" width="144.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.0" y="1166.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (40 samples, 11.94%)</title><rect x="401.0" y="1139.0" width="140.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.0" y="1150.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (19 samples, 5.67%)</title><rect x="415.1" y="1123.0" width="66.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.1" y="1134.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.39%)</title><rect x="436.2" y="1107.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.2" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.39%)</title><rect x="436.2" y="1091.0" width="28.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.2" y="1102.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.79%)</title><rect x="443.3" y="1075.0" width="21.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.3" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.79%)</title><rect x="443.3" y="1059.0" width="21.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.3" y="1070.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.79%)</title><rect x="443.3" y="1043.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.3" y="1054.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 1.79%)</title><rect x="443.3" y="1027.0" width="21.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="446.3" y="1038.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.30%)</title><rect x="443.3" y="1011.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="446.3" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.30%)</title><rect x="443.3" y="995.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="446.3" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.30%)</title><rect x="443.3" y="979.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="446.3" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.30%)</title><rect x="443.3" y="963.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="446.3" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 1.49%)</title><rect x="446.8" y="1011.0" width="17.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="449.8" y="1022.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.30%)</title><rect x="453.8" y="995.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="456.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="457.3" y="995.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="460.3" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.30%)</title><rect x="457.3" y="979.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="460.3" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.30%)</title><rect x="460.9" y="995.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="463.9" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 1.49%)</title><rect x="464.4" y="1107.0" width="17.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="467.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.30%)</title><rect x="482.0" y="1123.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.30%)</title><rect x="482.0" y="1107.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.30%)</title><rect x="482.0" y="1091.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.0" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 4.78%)</title><rect x="485.5" y="1123.0" width="56.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.5" y="1134.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 4.78%)</title><rect x="485.5" y="1107.0" width="56.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.5" y="1118.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="485.5" y="1091.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="485.5" y="1075.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="485.5" y="1059.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="485.5" y="1043.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (15 samples, 4.48%)</title><rect x="489.0" y="1091.0" width="52.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.0" y="1102.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 4.18%)</title><rect x="492.6" y="1075.0" width="49.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.6" y="1086.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.69%)</title><rect x="510.2" y="1059.0" width="31.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.2" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.60%)</title><rect x="513.7" y="1043.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="516.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 1.79%)</title><rect x="520.7" y="1043.0" width="21.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="523.7" y="1054.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="538.4" y="1027.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="541.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.30%)</title><rect x="541.9" y="1139.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.30%)</title><rect x="541.9" y="1123.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="541.9" y="1107.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="541.9" y="1091.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.9" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="541.9" y="1075.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="544.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="541.9" y="1059.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="544.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 20.00%)</title><rect x="545.4" y="1155.0" width="236.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="548.4" y="1166.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (67 samples, 20.00%)</title><rect x="545.4" y="1139.0" width="236.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="548.4" y="1150.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/34722430.process (51 samples, 15.22%)</title><rect x="545.4" y="1123.0" width="179.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.4" y="1134.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (51 samples, 15.22%)</title><rect x="545.4" y="1107.0" width="179.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.4" y="1118.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (50 samples, 14.93%)</title><rect x="548.9" y="1091.0" width="176.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.9" y="1102.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.30%)</title><rect x="570.1" y="1075.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.1" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.30%)</title><rect x="570.1" y="1059.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.1" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.30%)</title><rect x="570.1" y="1043.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.30%)</title><rect x="570.1" y="1027.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="573.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.30%)</title><rect x="570.1" y="1011.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.30%)</title><rect x="570.1" y="995.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.30%)</title><rect x="570.1" y="979.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.30%)</title><rect x="570.1" y="963.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.30%)</title><rect x="570.1" y="947.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.1" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (1 samples, 0.30%)</title><rect x="570.1" y="931.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.1" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.30%)</title><rect x="570.1" y="915.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.1" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.30%)</title><rect x="570.1" y="899.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.1" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (1 samples, 0.30%)</title><rect x="570.1" y="883.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.1" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (1 samples, 0.30%)</title><rect x="570.1" y="867.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.1" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (1 samples, 0.30%)</title><rect x="570.1" y="851.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.1" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (1 samples, 0.30%)</title><rect x="570.1" y="835.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="573.1" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (1 samples, 0.30%)</title><rect x="570.1" y="819.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="573.1" y="830.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.30%)</title><rect x="570.1" y="803.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.30%)</title><rect x="570.1" y="787.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.60%)</title><rect x="573.6" y="1075.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.6" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.60%)</title><rect x="573.6" y="1059.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.6" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.60%)</title><rect x="573.6" y="1043.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.60%)</title><rect x="573.6" y="1027.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.60%)</title><rect x="573.6" y="1011.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (40 samples, 11.94%)</title><rect x="580.6" y="1075.0" width="140.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.6" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/lang/Thread.sleep (39 samples, 11.64%)</title><rect x="584.1" y="1059.0" width="137.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="587.1" y="1070.0">java/lang/Thread...</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 10.45%)</title><rect x="598.2" y="1043.0" width="123.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="601.2" y="1054.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.30%)</title><rect x="605.3" y="1027.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.3" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.60%)</title><rect x="608.8" y="1027.0" width="7.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="611.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="612.3" y="1011.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="615.3" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.30%)</title><rect x="615.9" y="1027.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="618.9" y="1038.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 8.66%)</title><rect x="619.4" y="1027.0" width="102.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="622.4" y="1038.0">os::sleep(Th..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.60%)</title><rect x="640.5" y="1011.0" width="7.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="643.5" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.60%)</title><rect x="640.5" y="995.0" width="7.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="643.5" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.60%)</title><rect x="647.6" y="1011.0" width="7.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="650.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.30%)</title><rect x="654.6" y="1011.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="657.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 2.99%)</title><rect x="658.1" y="1011.0" width="35.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="661.1" y="1022.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.60%)</title><rect x="693.3" y="1011.0" width="7.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="696.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.30%)</title><rect x="700.4" y="1011.0" width="3.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="703.4" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.60%)</title><rect x="703.9" y="1011.0" width="7.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="706.9" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.90%)</title><rect x="711.0" y="1011.0" width="10.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="714.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.30%)</title><rect x="721.5" y="1075.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 1.49%)</title><rect x="725.0" y="1123.0" width="17.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 1.49%)</title><rect x="725.0" y="1107.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="728.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.30%)</title><rect x="742.7" y="1123.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.30%)</title><rect x="742.7" y="1107.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="745.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/1112443825.get$Lambda (1 samples, 0.30%)</title><rect x="742.7" y="1091.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="745.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.90%)</title><rect x="746.2" y="1123.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.60%)</title><rect x="749.7" y="1107.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.7" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.60%)</title><rect x="749.7" y="1091.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.30%)</title><rect x="756.7" y="1123.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.30%)</title><rect x="756.7" y="1107.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="759.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.49%)</title><rect x="760.3" y="1123.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="763.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.49%)</title><rect x="760.3" y="1107.0" width="17.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="763.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.49%)</title><rect x="760.3" y="1091.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.49%)</title><rect x="760.3" y="1075.0" width="17.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="763.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.19%)</title><rect x="760.3" y="1059.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="763.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.19%)</title><rect x="760.3" y="1043.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/1112443825.accept (1 samples, 0.30%)</title><rect x="770.8" y="1027.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.30%)</title><rect x="774.4" y="1059.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.30%)</title><rect x="777.9" y="1123.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.30%)</title><rect x="781.4" y="1155.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.4" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.30%)</title><rect x="781.4" y="1139.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.4" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.30%)</title><rect x="781.4" y="1123.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.4" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="781.4" y="1107.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.4" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="781.4" y="1091.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.4" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="781.4" y="1075.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="781.4" y="1059.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="784.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.30%)</title><rect x="781.4" y="1043.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="784.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.30%)</title><rect x="781.4" y="1027.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.4" y="1038.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.30%)</title><rect x="781.4" y="1011.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="784.4" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.30%)</title><rect x="781.4" y="995.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.4" y="1006.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.30%)</title><rect x="781.4" y="979.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="784.4" y="990.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.30%)</title><rect x="781.4" y="963.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="784.4" y="974.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.30%)</title><rect x="781.4" y="947.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="784.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.49%)</title><rect x="784.9" y="1155.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.49%)</title><rect x="784.9" y="1139.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.49%)</title><rect x="784.9" y="1123.0" width="17.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="787.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.60%)</title><rect x="784.9" y="1107.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.60%)</title><rect x="784.9" y="1091.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.60%)</title><rect x="784.9" y="1075.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2371494.accept (1 samples, 0.30%)</title><rect x="784.9" y="1059.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.9" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="788.4" y="1059.0" width="3.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="791.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.90%)</title><rect x="792.0" y="1107.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2371494.accept (3 samples, 0.90%)</title><rect x="792.0" y="1091.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (3 samples, 0.90%)</title><rect x="792.0" y="1075.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.90%)</title><rect x="792.0" y="1059.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="795.0" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.90%)</title><rect x="792.0" y="1043.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="795.0" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.90%)</title><rect x="792.0" y="1027.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.0" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.60%)</title><rect x="792.0" y="1011.0" width="7.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="795.0" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.60%)</title><rect x="792.0" y="995.0" width="7.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="795.0" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.30%)</title><rect x="799.0" y="1011.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="802.0" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.30%)</title><rect x="802.5" y="1155.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.5" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="806.1" y="1171.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="809.1" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="806.1" y="1155.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="809.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 1.49%)</title><rect x="809.6" y="1235.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.49%)</title><rect x="809.6" y="1219.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.49%)</title><rect x="809.6" y="1203.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.49%)</title><rect x="809.6" y="1187.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="812.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/770006613.run (1 samples, 0.30%)</title><rect x="823.7" y="1171.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 2.99%)</title><rect x="827.2" y="1235.0" width="35.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="830.2" y="1246.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 2.99%)</title><rect x="827.2" y="1219.0" width="35.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="830.2" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.60%)</title><rect x="827.2" y="1203.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.60%)</title><rect x="827.2" y="1187.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="830.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.60%)</title><rect x="827.2" y="1171.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.60%)</title><rect x="827.2" y="1155.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.60%)</title><rect x="827.2" y="1139.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.39%)</title><rect x="834.2" y="1203.0" width="28.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.2" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.39%)</title><rect x="834.2" y="1187.0" width="28.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.2" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.39%)</title><rect x="834.2" y="1171.0" width="28.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="837.2" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.39%)</title><rect x="834.2" y="1155.0" width="28.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.2" y="1166.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.30%)</title><rect x="862.4" y="1283.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="865.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.30%)</title><rect x="862.4" y="1267.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="862.4" y="1251.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="865.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.30%)</title><rect x="862.4" y="1235.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="865.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.30%)</title><rect x="862.4" y="1219.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="865.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.30%)</title><rect x="862.4" y="1203.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="865.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.30%)</title><rect x="862.4" y="1187.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="865.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.30%)</title><rect x="862.4" y="1171.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="865.4" y="1182.0"></text>
</g>
<g>
<title>start_thread (92 samples, 27.46%)</title><rect x="865.9" y="1283.0" width="324.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="868.9" y="1294.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (92 samples, 27.46%)</title><rect x="865.9" y="1267.0" width="324.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="868.9" y="1278.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 4.18%)</title><rect x="865.9" y="1251.0" width="49.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="868.9" y="1262.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.18%)</title><rect x="865.9" y="1235.0" width="49.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.9" y="1246.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 3.58%)</title><rect x="865.9" y="1219.0" width="42.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.9" y="1230.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 3.58%)</title><rect x="865.9" y="1203.0" width="42.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.9" y="1214.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 2.39%)</title><rect x="876.5" y="1187.0" width="28.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="879.5" y="1198.0">G1..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (2 samples, 0.60%)</title><rect x="883.6" y="1171.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="886.6" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (2 samples, 0.60%)</title><rect x="883.6" y="1155.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="886.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.90%)</title><rect x="890.6" y="1171.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="893.6" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.30%)</title><rect x="901.2" y="1171.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="904.2" y="1182.0"></text>
</g>
<g>
<title>_init (1 samples, 0.30%)</title><rect x="904.7" y="1187.0" width="3.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="907.7" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.60%)</title><rect x="908.2" y="1219.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.2" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.60%)</title><rect x="908.2" y="1203.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.2" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.60%)</title><rect x="908.2" y="1187.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.2" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.60%)</title><rect x="908.2" y="1171.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.2" y="1182.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.60%)</title><rect x="908.2" y="1155.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.2" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.60%)</title><rect x="908.2" y="1139.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.2" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.60%)</title><rect x="908.2" y="1123.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.2" y="1134.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.60%)</title><rect x="908.2" y="1107.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.2" y="1118.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.30%)</title><rect x="908.2" y="1091.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.2" y="1102.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.30%)</title><rect x="911.7" y="1091.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (78 samples, 23.28%)</title><rect x="915.3" y="1251.0" width="274.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.3" y="1262.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (78 samples, 23.28%)</title><rect x="915.3" y="1235.0" width="274.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="918.3" y="1246.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (78 samples, 23.28%)</title><rect x="915.3" y="1219.0" width="274.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.3" y="1230.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (77 samples, 22.99%)</title><rect x="915.3" y="1203.0" width="271.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.3" y="1214.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (74 samples, 22.09%)</title><rect x="915.3" y="1187.0" width="260.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.3" y="1198.0">C2Compiler::compile_method(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (74 samples, 22.09%)</title><rect x="915.3" y="1171.0" width="260.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.3" y="1182.0">Compile::Compile(ciEnv*, C2Compiler..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.30%)</title><rect x="915.3" y="1155.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.3" y="1166.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.30%)</title><rect x="915.3" y="1139.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.3" y="1150.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.30%)</title><rect x="915.3" y="1123.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.3" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.30%)</title><rect x="915.3" y="1107.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="918.3" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.30%)</title><rect x="915.3" y="1091.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="918.3" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="915.3" y="1075.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.3" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="915.3" y="1059.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.3" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="915.3" y="1043.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.3" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="915.3" y="1027.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.3" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="915.3" y="1011.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.3" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="915.3" y="995.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.3" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="915.3" y="979.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.3" y="990.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="915.3" y="963.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.3" y="974.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.30%)</title><rect x="915.3" y="947.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.3" y="958.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 13.13%)</title><rect x="918.8" y="1155.0" width="155.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.8" y="1166.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.60%)</title><rect x="918.8" y="1139.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.8" y="1150.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.30%)</title><rect x="918.8" y="1123.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.8" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.30%)</title><rect x="922.3" y="1123.0" width="3.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="925.3" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.60%)</title><rect x="925.8" y="1139.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.8" y="1150.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.30%)</title><rect x="925.8" y="1123.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.8" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.30%)</title><rect x="925.8" y="1107.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.8" y="1118.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.30%)</title><rect x="925.8" y="1091.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="928.8" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.30%)</title><rect x="929.3" y="1123.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.3" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.30%)</title><rect x="929.3" y="1107.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.3" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.49%)</title><rect x="932.9" y="1139.0" width="17.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="935.9" y="1150.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.30%)</title><rect x="932.9" y="1123.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.19%)</title><rect x="936.4" y="1123.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.4" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.60%)</title><rect x="939.9" y="1107.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.30%)</title><rect x="947.0" y="1107.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.0" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.30%)</title><rect x="947.0" y="1091.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.0" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.30%)</title><rect x="947.0" y="1075.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.0" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.30%)</title><rect x="947.0" y="1059.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="950.0" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.30%)</title><rect x="947.0" y="1043.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.0" y="1054.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.30%)</title><rect x="947.0" y="1027.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.0" y="1038.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.30%)</title><rect x="947.0" y="1011.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.0" y="1022.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.30%)</title><rect x="950.5" y="1139.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="953.5" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.30%)</title><rect x="950.5" y="1123.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.5" y="1134.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.30%)</title><rect x="950.5" y="1107.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="953.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.30%)</title><rect x="954.0" y="1139.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.30%)</title><rect x="954.0" y="1123.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.30%)</title><rect x="954.0" y="1107.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.30%)</title><rect x="957.5" y="1139.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 9.55%)</title><rect x="961.0" y="1139.0" width="112.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.0" y="1150.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.60%)</title><rect x="964.6" y="1123.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.6" y="1134.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.30%)</title><rect x="968.1" y="1107.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.30%)</title><rect x="971.6" y="1123.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="974.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.30%)</title><rect x="971.6" y="1107.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.6" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="971.6" y="1091.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.19%)</title><rect x="975.1" y="1123.0" width="14.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.30%)</title><rect x="978.7" y="1107.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="982.2" y="1107.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.30%)</title><rect x="985.7" y="1107.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.49%)</title><rect x="989.2" y="1123.0" width="17.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.49%)</title><rect x="1006.8" y="1123.0" width="17.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.30%)</title><rect x="1020.9" y="1107.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1023.9" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1020.9" y="1091.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.30%)</title><rect x="1024.4" y="1123.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.30%)</title><rect x="1024.4" y="1107.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.30%)</title><rect x="1028.0" y="1123.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.60%)</title><rect x="1031.5" y="1123.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.60%)</title><rect x="1031.5" y="1107.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.19%)</title><rect x="1038.5" y="1123.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.5" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.19%)</title><rect x="1038.5" y="1107.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.5" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.19%)</title><rect x="1038.5" y="1091.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.5" y="1102.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.30%)</title><rect x="1038.5" y="1075.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1041.5" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.90%)</title><rect x="1042.1" y="1075.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.1" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1049.1" y="1059.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.30%)</title><rect x="1052.6" y="1123.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.30%)</title><rect x="1056.1" y="1123.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1059.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1056.1" y="1107.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.1" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.19%)</title><rect x="1059.7" y="1123.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.7" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.90%)</title><rect x="1063.2" y="1107.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.2" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1070.2" y="1091.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.2" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 7.16%)</title><rect x="1073.8" y="1155.0" width="84.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.8" y="1166.0">Compile::O..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.60%)</title><rect x="1073.8" y="1139.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.60%)</title><rect x="1073.8" y="1123.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.8" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::PhaseCCP(PhaseIterGVN*) (1 samples, 0.30%)</title><rect x="1080.8" y="1139.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.30%)</title><rect x="1084.3" y="1139.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.30%)</title><rect x="1084.3" y="1123.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.30%)</title><rect x="1084.3" y="1107.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.3" y="1118.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1084.3" y="1091.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.30%)</title><rect x="1087.9" y="1139.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.9" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.30%)</title><rect x="1087.9" y="1123.0" width="3.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1090.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 4.48%)</title><rect x="1091.4" y="1139.0" width="52.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.4" y="1150.0">Phase..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.30%)</title><rect x="1091.4" y="1123.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.30%)</title><rect x="1094.9" y="1123.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1098.4" y="1123.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.30%)</title><rect x="1098.4" y="1107.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.30%)</title><rect x="1098.4" y="1091.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 2.69%)</title><rect x="1101.9" y="1123.0" width="31.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.9" y="1134.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 2.09%)</title><rect x="1109.0" y="1107.0" width="24.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.0" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 1.79%)</title><rect x="1112.5" y="1091.0" width="21.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.5" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.30%)</title><rect x="1130.1" y="1075.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.30%)</title><rect x="1133.6" y="1123.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1137.2" y="1123.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.30%)</title><rect x="1137.2" y="1107.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.30%)</title><rect x="1137.2" y="1091.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.2" y="1102.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.30%)</title><rect x="1137.2" y="1075.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.30%)</title><rect x="1140.7" y="1123.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1140.7" y="1107.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.7" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1140.7" y="1091.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.7" y="1102.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.30%)</title><rect x="1140.7" y="1075.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.30%)</title><rect x="1144.2" y="1139.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.30%)</title><rect x="1144.2" y="1123.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.60%)</title><rect x="1147.7" y="1139.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.60%)</title><rect x="1147.7" y="1123.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1147.7" y="1107.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.7" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1151.3" y="1107.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1151.3" y="1091.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.30%)</title><rect x="1151.3" y="1075.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.3" y="1086.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.30%)</title><rect x="1151.3" y="1059.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.3" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.30%)</title><rect x="1154.8" y="1139.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.8" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.30%)</title><rect x="1154.8" y="1123.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.30%)</title><rect x="1154.8" y="1107.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1154.8" y="1091.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.8" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.19%)</title><rect x="1158.3" y="1155.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.19%)</title><rect x="1158.3" y="1139.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.19%)</title><rect x="1158.3" y="1123.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.19%)</title><rect x="1158.3" y="1107.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.19%)</title><rect x="1158.3" y="1091.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.19%)</title><rect x="1158.3" y="1075.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.3" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.19%)</title><rect x="1158.3" y="1059.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.19%)</title><rect x="1158.3" y="1043.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.19%)</title><rect x="1158.3" y="1027.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.19%)</title><rect x="1158.3" y="1011.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.19%)</title><rect x="1158.3" y="995.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.19%)</title><rect x="1158.3" y="979.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1158.3" y="963.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1158.3" y="947.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1158.3" y="931.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1158.3" y="915.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1158.3" y="899.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1158.3" y="883.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1158.3" y="867.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1158.3" y="851.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1158.3" y="835.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1158.3" y="819.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_monitor_enter() (1 samples, 0.30%)</title><rect x="1158.3" y="803.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.90%)</title><rect x="1161.8" y="963.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.90%)</title><rect x="1161.8" y="947.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.90%)</title><rect x="1161.8" y="931.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.90%)</title><rect x="1161.8" y="915.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.90%)</title><rect x="1161.8" y="899.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.90%)</title><rect x="1161.8" y="883.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.90%)</title><rect x="1161.8" y="867.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.90%)</title><rect x="1161.8" y="851.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.90%)</title><rect x="1161.8" y="835.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.90%)</title><rect x="1161.8" y="819.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.90%)</title><rect x="1161.8" y="803.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.90%)</title><rect x="1161.8" y="787.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.90%)</title><rect x="1161.8" y="771.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="782.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.8" y="755.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.8" y="766.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.30%)</title><rect x="1161.8" y="739.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.30%)</title><rect x="1161.8" y="723.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.60%)</title><rect x="1165.3" y="755.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.60%)</title><rect x="1165.3" y="739.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.60%)</title><rect x="1165.3" y="723.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.60%)</title><rect x="1165.3" y="707.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.60%)</title><rect x="1165.3" y="691.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.60%)</title><rect x="1165.3" y="675.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.60%)</title><rect x="1165.3" y="659.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.60%)</title><rect x="1165.3" y="643.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.60%)</title><rect x="1165.3" y="627.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.60%)</title><rect x="1165.3" y="611.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.60%)</title><rect x="1165.3" y="595.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.60%)</title><rect x="1165.3" y="579.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.60%)</title><rect x="1165.3" y="563.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.60%)</title><rect x="1165.3" y="547.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.60%)</title><rect x="1165.3" y="531.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.60%)</title><rect x="1165.3" y="515.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.60%)</title><rect x="1165.3" y="499.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.60%)</title><rect x="1165.3" y="483.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.60%)</title><rect x="1165.3" y="467.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.60%)</title><rect x="1165.3" y="451.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.60%)</title><rect x="1165.3" y="435.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.60%)</title><rect x="1165.3" y="419.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.60%)</title><rect x="1165.3" y="403.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.60%)</title><rect x="1165.3" y="387.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.3" y="371.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1165.3" y="355.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1165.3" y="339.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="350.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.30%)</title><rect x="1165.3" y="323.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1165.3" y="307.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.3" y="318.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1165.3" y="291.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="302.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.30%)</title><rect x="1165.3" y="275.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.3" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1168.9" y="371.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1168.9" y="355.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1168.9" y="339.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1168.9" y="323.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1168.9" y="307.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1168.9" y="291.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1168.9" y="275.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1168.9" y="259.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1168.9" y="243.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1168.9" y="227.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1168.9" y="211.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1168.9" y="195.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1168.9" y="179.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1168.9" y="163.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1168.9" y="147.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1168.9" y="131.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1168.9" y="115.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.30%)</title><rect x="1168.9" y="99.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1168.9" y="83.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.30%)</title><rect x="1168.9" y="67.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="78.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.30%)</title><rect x="1168.9" y="51.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.30%)</title><rect x="1168.9" y="35.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="46.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.30%)</title><rect x="1172.4" y="1155.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.4" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.30%)</title><rect x="1172.4" y="1139.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="1150.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.30%)</title><rect x="1172.4" y="1123.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.4" y="1134.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.30%)</title><rect x="1172.4" y="1107.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="1118.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.60%)</title><rect x="1175.9" y="1187.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.60%)</title><rect x="1175.9" y="1171.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.60%)</title><rect x="1175.9" y="1155.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.60%)</title><rect x="1175.9" y="1139.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.30%)</title><rect x="1175.9" y="1123.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1134.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.30%)</title><rect x="1175.9" y="1107.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="1118.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.30%)</title><rect x="1175.9" y="1091.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.30%)</title><rect x="1175.9" y="1075.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.30%)</title><rect x="1175.9" y="1059.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.30%)</title><rect x="1175.9" y="1043.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.30%)</title><rect x="1175.9" y="1027.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.30%)</title><rect x="1175.9" y="1011.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1175.9" y="995.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1175.9" y="979.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="990.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.30%)</title><rect x="1175.9" y="963.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.30%)</title><rect x="1175.9" y="947.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.30%)</title><rect x="1175.9" y="931.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="942.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, bool, Thread*) (1 samples, 0.30%)</title><rect x="1175.9" y="915.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="926.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.30%)</title><rect x="1175.9" y="899.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.30%)</title><rect x="1175.9" y="883.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="894.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.30%)</title><rect x="1175.9" y="867.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="878.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.30%)</title><rect x="1175.9" y="851.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>AbstractInterpreter::can_be_compiled(methodHandle) (1 samples, 0.30%)</title><rect x="1175.9" y="835.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>AbstractInterpreter::method_kind(methodHandle) (1 samples, 0.30%)</title><rect x="1175.9" y="819.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.30%)</title><rect x="1179.4" y="1123.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.30%)</title><rect x="1179.4" y="1107.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.30%)</title><rect x="1179.4" y="1091.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="1102.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.30%)</title><rect x="1179.4" y="1075.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::init_vars_for_alloc(Interval*) (1 samples, 0.30%)</title><rect x="1179.4" y="1059.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.30%)</title><rect x="1183.0" y="1187.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1183.0" y="1171.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1183.0" y="1155.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1183.0" y="1139.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.30%)</title><rect x="1183.0" y="1123.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="1134.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.30%)</title><rect x="1186.5" y="1203.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.30%)</title><rect x="1186.5" y="1187.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.5" y="1198.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.30%)</title><rect x="1186.5" y="1171.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.30%)</title><rect x="1186.5" y="1155.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.5" y="1166.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.30%)</title><rect x="1186.5" y="1139.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.30%)</title><rect x="1186.5" y="1123.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="1134.0"></text>
</g>
</g>
</svg>
