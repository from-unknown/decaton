<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (1,133 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (243 samples, 21.45%)</title><rect x="10.0" y="579.0" width="253.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="590.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (243 samples, 21.45%)</title><rect x="10.0" y="563.0" width="253.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="574.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame(JavaThread*, long*) (1 samples, 0.09%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame_internal(JavaThread*, long*) (1 samples, 0.09%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize(JavaThread*, frame, RegisterMap*) (1 samples, 0.09%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>collect_monitors(compiledVFrame*, GrowableArray&lt;Handle&gt;*) (1 samples, 0.09%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (241 samples, 21.27%)</title><rect x="11.0" y="547.0" width="251.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="558.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="11.0" y="531.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="14.0" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="11.0" y="515.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="12.1" y="531.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="12.1" y="515.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="12.1" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="12.1" y="483.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="12.1" y="467.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="12.1" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="12.1" y="435.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="12.1" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="12.1" y="403.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="12.1" y="387.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.1" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/544260150.test (1 samples, 0.09%)</title><rect x="12.1" y="371.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="13.1" y="531.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="13.1" y="515.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="13.1" y="499.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="13.1" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="13.1" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="13.1" y="451.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="13.1" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="13.1" y="419.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="13.1" y="403.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="13.1" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.1" y="398.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="13.1" y="371.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="16.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.44%)</title><rect x="14.2" y="531.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.44%)</title><rect x="14.2" y="515.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.44%)</title><rect x="14.2" y="499.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/989845867.accept (5 samples, 0.44%)</title><rect x="14.2" y="483.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.44%)</title><rect x="14.2" y="467.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.44%)</title><rect x="14.2" y="451.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.35%)</title><rect x="14.2" y="435.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetStateReaper.maybeReapOffset (1 samples, 0.09%)</title><rect x="18.3" y="435.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="18.3" y="419.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (175 samples, 15.45%)</title><rect x="19.4" y="531.0" width="182.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.4" y="542.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1464761203.accept (166 samples, 14.65%)</title><rect x="19.4" y="515.0" width="172.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.4" y="526.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (166 samples, 14.65%)</title><rect x="19.4" y="499.0" width="172.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="510.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (151 samples, 13.33%)</title><rect x="20.4" y="483.0" width="157.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.4" y="494.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (151 samples, 13.33%)</title><rect x="20.4" y="467.0" width="157.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.4" y="478.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (151 samples, 13.33%)</title><rect x="20.4" y="451.0" width="157.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.4" y="462.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (151 samples, 13.33%)</title><rect x="20.4" y="435.0" width="157.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.4" y="446.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 13.33%)</title><rect x="20.4" y="419.0" width="157.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.4" y="430.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (151 samples, 13.33%)</title><rect x="20.4" y="403.0" width="157.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="414.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (110 samples, 9.71%)</title><rect x="58.9" y="387.0" width="114.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.9" y="398.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.85%)</title><rect x="58.9" y="371.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.9" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.85%)</title><rect x="58.9" y="355.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.9" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.85%)</title><rect x="58.9" y="339.0" width="21.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.9" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 1.24%)</title><rect x="80.8" y="371.0" width="14.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (14 samples, 1.24%)</title><rect x="80.8" y="355.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.35%)</title><rect x="85.0" y="339.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.0" y="350.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.35%)</title><rect x="85.0" y="323.0" width="4.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="88.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.53%)</title><rect x="89.2" y="339.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.62%)</title><rect x="95.4" y="371.0" width="78.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.4" y="382.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.62%)</title><rect x="95.4" y="355.0" width="78.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.4" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 6.53%)</title><rect x="95.4" y="339.0" width="77.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.4" y="350.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (73 samples, 6.44%)</title><rect x="95.4" y="323.0" width="76.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.4" y="334.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (71 samples, 6.27%)</title><rect x="97.5" y="307.0" width="73.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.5" y="318.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="98.5" y="291.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="101.5" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.83%)</title><rect x="99.6" y="291.0" width="68.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="102.6" y="302.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="99.6" y="275.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="102.6" y="286.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.35%)</title><rect x="102.7" y="275.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="105.7" y="286.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.09%)</title><rect x="106.9" y="275.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="109.9" y="286.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.09%)</title><rect x="106.9" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="109.9" y="270.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.09%)</title><rect x="106.9" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="109.9" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 3.97%)</title><rect x="107.9" y="275.0" width="46.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="110.9" y="286.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="154.8" y="275.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.8" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.97%)</title><rect x="156.8" y="275.0" width="11.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="159.8" y="286.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.18%)</title><rect x="168.3" y="291.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="171.3" y="302.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="170.4" y="291.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="173.4" y="302.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="171.4" y="323.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="172.5" y="339.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.18%)</title><rect x="173.5" y="387.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.18%)</title><rect x="173.5" y="371.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.18%)</title><rect x="173.5" y="355.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="173.5" y="339.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="175.6" y="387.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="175.6" y="371.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="175.6" y="355.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="176.6" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="176.6" y="339.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.6" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 0.88%)</title><rect x="177.7" y="483.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 0.88%)</title><rect x="177.7" y="467.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="187.1" y="451.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="187.1" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="187.1" y="419.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="187.1" y="403.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="187.1" y="387.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.09%)</title><rect x="187.1" y="371.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.26%)</title><rect x="188.1" y="483.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.26%)</title><rect x="188.1" y="467.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="188.1" y="451.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="191.2" y="483.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="191.2" y="467.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="191.2" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="191.2" y="435.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="191.2" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.09%)</title><rect x="191.2" y="403.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.2" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="192.3" y="515.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="195.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.62%)</title><rect x="193.3" y="515.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.62%)</title><rect x="193.3" y="499.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.62%)</title><rect x="193.3" y="483.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.62%)</title><rect x="193.3" y="467.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (7 samples, 0.62%)</title><rect x="193.3" y="451.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="200.6" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="200.6" y="499.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.12%)</title><rect x="201.6" y="531.0" width="60.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.6" y="542.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.12%)</title><rect x="201.6" y="515.0" width="60.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.6" y="526.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 2.38%)</title><rect x="201.6" y="499.0" width="28.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.6" y="510.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (26 samples, 2.29%)</title><rect x="202.7" y="483.0" width="27.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.7" y="494.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="202.7" y="467.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.21%)</title><rect x="203.7" y="467.0" width="26.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.7" y="478.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (19 samples, 1.68%)</title><rect x="203.7" y="451.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 1.68%)</title><rect x="203.7" y="435.0" width="19.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.88%)</title><rect x="203.7" y="419.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.35%)</title><rect x="210.0" y="403.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.35%)</title><rect x="210.0" y="387.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.35%)</title><rect x="210.0" y="371.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.35%)</title><rect x="210.0" y="355.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.35%)</title><rect x="210.0" y="339.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.35%)</title><rect x="210.0" y="323.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.35%)</title><rect x="210.0" y="307.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.0" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.79%)</title><rect x="214.1" y="419.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.71%)</title><rect x="215.2" y="403.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.71%)</title><rect x="215.2" y="387.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.2" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.71%)</title><rect x="215.2" y="371.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.2" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.53%)</title><rect x="216.2" y="355.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.53%)</title><rect x="216.2" y="339.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.53%)</title><rect x="216.2" y="323.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.53%)</title><rect x="216.2" y="307.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.2" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="221.4" y="291.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="224.4" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="222.5" y="355.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="225.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.35%)</title><rect x="223.5" y="451.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.35%)</title><rect x="223.5" y="435.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.18%)</title><rect x="223.5" y="419.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="223.5" y="403.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.5" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="224.5" y="387.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="227.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="225.6" y="419.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="225.6" y="403.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="225.6" y="387.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="225.6" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.6" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="225.6" y="355.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.6" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="225.6" y="339.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.6" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="226.6" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="229.6" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="226.6" y="371.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="229.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="227.7" y="451.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="227.7" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="227.7" y="419.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="227.7" y="403.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.7" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="227.7" y="387.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="230.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="228.7" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="228.7" y="435.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="228.7" y="419.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.7" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="228.7" y="403.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="228.7" y="387.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 1.06%)</title><rect x="229.8" y="499.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.79%)</title><rect x="230.8" y="483.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.71%)</title><rect x="230.8" y="467.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="231.8" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/129780753.accept (1 samples, 0.09%)</title><rect x="231.8" y="435.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="231.8" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="231.8" y="403.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="231.8" y="387.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="231.8" y="371.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="231.8" y="355.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.8" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="232.9" y="451.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.9" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="232.9" y="435.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="232.9" y="419.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="232.9" y="403.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="232.9" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.9" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="233.9" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.9" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="233.9" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="233.9" y="403.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.9" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="233.9" y="387.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.9" y="398.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="233.9" y="371.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.09%)</title><rect x="233.9" y="355.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="235.0" y="451.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="235.0" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="235.0" y="419.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="235.0" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="235.0" y="387.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="235.0" y="371.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="235.0" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="235.0" y="339.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.0" y="350.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$248/782702600.get (1 samples, 0.09%)</title><rect x="235.0" y="323.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="236.0" y="451.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="236.0" y="435.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.0" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="236.0" y="419.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.0" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="236.0" y="403.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="236.0" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="237.0" y="451.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="237.0" y="435.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="237.0" y="419.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="237.0" y="403.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="237.0" y="387.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="237.0" y="371.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="237.0" y="355.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.18%)</title><rect x="237.0" y="339.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.0" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.18%)</title><rect x="237.0" y="323.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="238.1" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.1" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="238.1" y="291.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$59/514455215.get (1 samples, 0.09%)</title><rect x="238.1" y="275.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="239.1" y="467.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="239.1" y="451.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="239.1" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="239.1" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="239.1" y="403.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.18%)</title><rect x="240.2" y="483.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="240.2" y="467.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="240.2" y="451.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="241.2" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="241.2" y="451.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.62%)</title><rect x="242.3" y="499.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.62%)</title><rect x="242.3" y="483.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.62%)</title><rect x="242.3" y="467.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="242.3" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="242.3" y="435.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="242.3" y="419.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.3" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="242.3" y="403.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="242.3" y="387.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="242.3" y="371.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.3" y="382.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="242.3" y="355.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="245.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.44%)</title><rect x="243.3" y="451.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.3" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/202204364.linkToTargetMethod (1 samples, 0.09%)</title><rect x="243.3" y="435.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/541980262.invokeStatic_JJ_L (1 samples, 0.09%)</title><rect x="243.3" y="419.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.18%)</title><rect x="244.3" y="435.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.18%)</title><rect x="244.3" y="419.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.3" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.18%)</title><rect x="244.3" y="403.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="247.3" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="244.3" y="387.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="247.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.maybeBeginClientReauthentication (1 samples, 0.09%)</title><rect x="246.4" y="435.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.ready (1 samples, 0.09%)</title><rect x="246.4" y="419.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="247.5" y="435.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="247.5" y="419.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="247.5" y="403.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="247.5" y="387.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="247.5" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="247.5" y="355.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="247.5" y="339.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="247.5" y="323.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="247.5" y="307.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.5" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.09%)</title><rect x="247.5" y="291.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.09%)</title><rect x="247.5" y="275.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="248.5" y="451.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="248.5" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="248.5" y="419.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="248.5" y="403.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="248.5" y="387.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.09%)</title><rect x="248.5" y="371.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.5" y="382.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.09%)</title><rect x="248.5" y="355.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="251.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (10 samples, 0.88%)</title><rect x="249.5" y="499.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (10 samples, 0.88%)</title><rect x="249.5" y="483.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="250.6" y="467.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/157073659.accept (1 samples, 0.09%)</title><rect x="250.6" y="451.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="250.6" y="435.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="250.6" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.6" y="430.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.09%)</title><rect x="250.6" y="403.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$239/65546699.apply (1 samples, 0.09%)</title><rect x="250.6" y="387.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.09%)</title><rect x="250.6" y="371.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.44%)</title><rect x="251.6" y="467.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="251.6" y="451.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (4 samples, 0.35%)</title><rect x="252.7" y="451.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="252.7" y="435.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="252.7" y="419.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.7" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="252.7" y="403.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.7" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="252.7" y="387.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.7" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="252.7" y="371.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.7" y="382.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="252.7" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.7" y="366.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="252.7" y="339.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.7" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="252.7" y="323.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.7" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="253.7" y="355.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.7" y="366.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.18%)</title><rect x="253.7" y="339.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.18%)</title><rect x="253.7" y="323.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="253.7" y="307.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="253.7" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="253.7" y="275.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$186/2081728107.accept (1 samples, 0.09%)</title><rect x="253.7" y="259.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.7" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="253.7" y="243.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.7" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="253.7" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="256.7" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="253.7" y="211.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="256.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="253.7" y="195.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="256.7" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="253.7" y="179.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="256.7" y="190.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="253.7" y="163.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="256.7" y="174.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$241/819796203.apply (1 samples, 0.09%)</title><rect x="254.7" y="307.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.7" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="254.7" y="291.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.7" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="255.8" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.8" y="446.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="255.8" y="419.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="255.8" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="255.8" y="387.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="256.8" y="467.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.26%)</title><rect x="256.8" y="451.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.8" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.26%)</title><rect x="256.8" y="435.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.8" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.26%)</title><rect x="256.8" y="419.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.8" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.26%)</title><rect x="256.8" y="403.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="258.9" y="387.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="258.9" y="371.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.18%)</title><rect x="260.0" y="499.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="260.0" y="483.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="260.0" y="467.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.0" y="451.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="260.0" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="260.0" y="419.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.0" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="261.0" y="451.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="264.0" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="261.0" y="435.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="264.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="262.0" y="547.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.0" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="262.0" y="531.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="265.0" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="262.0" y="515.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="265.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (821 samples, 72.46%)</title><rect x="263.1" y="579.0" width="855.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.1" y="590.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (821 samples, 72.46%)</title><rect x="263.1" y="563.0" width="855.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.1" y="574.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (821 samples, 72.46%)</title><rect x="263.1" y="547.0" width="855.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.1" y="558.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/399290885.run (582 samples, 51.37%)</title><rect x="265.2" y="531.0" width="606.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.2" y="542.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/399290885...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (582 samples, 51.37%)</title><rect x="265.2" y="515.0" width="606.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.2" y="526.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (582 samples, 51.37%)</title><rect x="265.2" y="499.0" width="606.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.2" y="510.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (582 samples, 51.37%)</title><rect x="265.2" y="483.0" width="606.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.2" y="494.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="270.4" y="467.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="273.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (1 samples, 0.09%)</title><rect x="271.4" y="467.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (15 samples, 1.32%)</title><rect x="272.5" y="467.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.5" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (15 samples, 1.32%)</title><rect x="272.5" y="451.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 1.24%)</title><rect x="272.5" y="435.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="272.5" y="419.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 1.15%)</title><rect x="273.5" y="419.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.5" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.71%)</title><rect x="276.6" y="403.0" width="8.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="279.6" y="414.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.71%)</title><rect x="276.6" y="387.0" width="8.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="279.6" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.18%)</title><rect x="285.0" y="403.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="288.0" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="287.0" y="435.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="287.0" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.0" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="287.0" y="403.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="290.0" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="287.0" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="290.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="287.0" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="290.0" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="287.0" y="355.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="290.0" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="287.0" y="339.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="290.0" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (52 samples, 4.59%)</title><rect x="288.1" y="467.0" width="54.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.1" y="478.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (43 samples, 3.80%)</title><rect x="297.4" y="451.0" width="44.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.4" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (43 samples, 3.80%)</title><rect x="297.4" y="435.0" width="44.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.4" y="446.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (43 samples, 3.80%)</title><rect x="297.4" y="419.0" width="44.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.4" y="430.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.26%)</title><rect x="297.4" y="403.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.26%)</title><rect x="297.4" y="387.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.4" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1289374120.accept (2 samples, 0.18%)</title><rect x="298.5" y="371.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (40 samples, 3.53%)</title><rect x="300.6" y="403.0" width="41.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.6" y="414.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1289374120.accept (40 samples, 3.53%)</title><rect x="300.6" y="387.0" width="41.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.6" y="398.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (40 samples, 3.53%)</title><rect x="300.6" y="371.0" width="41.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.6" y="382.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (40 samples, 3.53%)</title><rect x="300.6" y="355.0" width="41.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.6" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (36 samples, 3.18%)</title><rect x="304.7" y="339.0" width="37.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.7" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (36 samples, 3.18%)</title><rect x="304.7" y="323.0" width="37.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.7" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.35%)</title><rect x="304.7" y="307.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.35%)</title><rect x="304.7" y="291.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.7" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/171813384.accept (1 samples, 0.09%)</title><rect x="306.8" y="275.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.8" y="286.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="307.9" y="275.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="310.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (32 samples, 2.82%)</title><rect x="308.9" y="307.0" width="33.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.9" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (31 samples, 2.74%)</title><rect x="309.9" y="291.0" width="32.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.9" y="302.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (11 samples, 0.97%)</title><rect x="330.8" y="275.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.8" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (176 samples, 15.53%)</title><rect x="342.2" y="467.0" width="183.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.2" y="478.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="349.5" y="451.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="352.5" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="349.5" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="352.5" y="446.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="350.6" y="451.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="353.6" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.79%)</title><rect x="351.6" y="451.0" width="9.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="354.6" y="462.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="354.7" y="435.0" width="6.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="357.7" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (157 samples, 13.86%)</title><rect x="361.0" y="451.0" width="163.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="364.0" y="462.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (157 samples, 13.86%)</title><rect x="361.0" y="435.0" width="163.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.0" y="446.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (157 samples, 13.86%)</title><rect x="361.0" y="419.0" width="163.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.0" y="430.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (157 samples, 13.86%)</title><rect x="361.0" y="403.0" width="163.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.0" y="414.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (157 samples, 13.86%)</title><rect x="361.0" y="387.0" width="163.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.0" y="398.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (38 samples, 3.35%)</title><rect x="361.0" y="371.0" width="39.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.0" y="382.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 0.79%)</title><rect x="361.0" y="355.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.79%)</title><rect x="361.0" y="339.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.79%)</title><rect x="361.0" y="323.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.79%)</title><rect x="361.0" y="307.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="364.0" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.79%)</title><rect x="361.0" y="291.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.0" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="368.3" y="275.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.3" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="368.3" y="259.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 2.56%)</title><rect x="370.4" y="355.0" width="30.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.4" y="366.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="370.4" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="373.4" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="370.4" y="323.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="373.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="370.4" y="307.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (28 samples, 2.47%)</title><rect x="371.4" y="339.0" width="29.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.4" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.44%)</title><rect x="371.4" y="323.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="374.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.44%)</title><rect x="371.4" y="307.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.09%)</title><rect x="375.6" y="291.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (22 samples, 1.94%)</title><rect x="376.6" y="323.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.6" y="334.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (22 samples, 1.94%)</title><rect x="376.6" y="307.0" width="22.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.6" y="318.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (12 samples, 1.06%)</title><rect x="376.6" y="291.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.53%)</title><rect x="389.1" y="291.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.1" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="393.3" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="396.3" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="393.3" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="396.3" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="393.3" y="243.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="396.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="394.3" y="275.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.35%)</title><rect x="395.3" y="291.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.3" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="395.3" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="398.3" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="395.3" y="259.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="398.3" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="395.3" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="398.3" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="395.3" y="227.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="398.3" y="238.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="395.3" y="211.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="398.3" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="396.4" y="275.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="398.5" y="275.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.5" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="399.5" y="323.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.5" y="334.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="399.5" y="307.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="402.5" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="399.5" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="402.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (108 samples, 9.53%)</title><rect x="400.6" y="371.0" width="112.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.6" y="382.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="400.6" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.09%)</title><rect x="400.6" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.09%)</title><rect x="400.6" y="323.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="400.6" y="307.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="400.6" y="291.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="400.6" y="275.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.62%)</title><rect x="401.6" y="355.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.62%)</title><rect x="401.6" y="339.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="407.8" y="323.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.53%)</title><rect x="408.9" y="355.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.53%)</title><rect x="408.9" y="339.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.26%)</title><rect x="408.9" y="323.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="408.9" y="307.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="411.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.26%)</title><rect x="412.0" y="323.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.88%)</title><rect x="415.1" y="355.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.53%)</title><rect x="419.3" y="339.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="422.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (84 samples, 7.41%)</title><rect x="425.6" y="355.0" width="87.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.6" y="366.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (84 samples, 7.41%)</title><rect x="425.6" y="339.0" width="87.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.6" y="350.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 2.21%)</title><rect x="426.6" y="323.0" width="26.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.6" y="334.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.62%)</title><rect x="427.6" y="307.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.62%)</title><rect x="427.6" y="291.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.62%)</title><rect x="427.6" y="275.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (15 samples, 1.32%)</title><rect x="434.9" y="307.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="450.5" y="307.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="450.5" y="291.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (58 samples, 5.12%)</title><rect x="452.6" y="323.0" width="60.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.6" y="334.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (58 samples, 5.12%)</title><rect x="452.6" y="307.0" width="60.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.6" y="318.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (57 samples, 5.03%)</title><rect x="453.7" y="291.0" width="59.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.7" y="302.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.85%)</title><rect x="454.7" y="275.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.7" y="286.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.79%)</title><rect x="459.9" y="259.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.79%)</title><rect x="459.9" y="243.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.79%)</title><rect x="459.9" y="227.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.71%)</title><rect x="461.0" y="211.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="464.0" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.44%)</title><rect x="464.1" y="195.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.18%)</title><rect x="467.2" y="179.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.2" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.18%)</title><rect x="467.2" y="163.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.2" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="469.3" y="259.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.53%)</title><rect x="470.3" y="259.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.53%)</title><rect x="470.3" y="243.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="473.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="474.5" y="227.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.88%)</title><rect x="476.6" y="275.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.44%)</title><rect x="481.8" y="259.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="481.8" y="243.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="481.8" y="227.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="484.8" y="238.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.44%)</title><rect x="481.8" y="211.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.18%)</title><rect x="487.0" y="275.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.62%)</title><rect x="489.1" y="275.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.62%)</title><rect x="489.1" y="259.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.62%)</title><rect x="489.1" y="243.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.1" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.62%)</title><rect x="489.1" y="227.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.1" y="238.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.62%)</title><rect x="489.1" y="211.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="492.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (10 samples, 0.88%)</title><rect x="496.4" y="275.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.88%)</title><rect x="496.4" y="259.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="499.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.88%)</title><rect x="496.4" y="243.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.4" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="504.7" y="227.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.09%)</title><rect x="505.7" y="227.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.53%)</title><rect x="506.8" y="275.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="511.0" y="259.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.0" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="511.0" y="243.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="514.0" y="254.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.09%)</title><rect x="511.0" y="227.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.0" y="238.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="512.0" y="243.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="515.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.97%)</title><rect x="513.0" y="371.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.97%)</title><rect x="513.0" y="355.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="516.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.97%)</title><rect x="513.0" y="339.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="516.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.97%)</title><rect x="513.0" y="323.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.97%)</title><rect x="513.0" y="307.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="516.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="522.4" y="291.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.4" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="524.5" y="451.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="527.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (326 samples, 28.77%)</title><rect x="525.5" y="467.0" width="339.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.5" y="478.0">com/linecorp/decaton/processor/runtime/interna..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="527.6" y="451.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="530.6" y="462.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="527.6" y="435.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="530.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (44 samples, 3.88%)</title><rect x="532.8" y="451.0" width="45.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.8" y="462.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="532.8" y="435.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="535.8" y="446.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.80%)</title><rect x="533.9" y="435.0" width="44.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="536.9" y="446.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 3.80%)</title><rect x="533.9" y="419.0" width="44.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="536.9" y="430.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.26%)</title><rect x="535.9" y="403.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="538.9" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.26%)</title><rect x="535.9" y="387.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="538.9" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.26%)</title><rect x="535.9" y="371.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.9" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.26%)</title><rect x="535.9" y="355.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.9" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (38 samples, 3.35%)</title><rect x="539.1" y="403.0" width="39.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.1" y="414.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.79%)</title><rect x="569.3" y="387.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="572.4" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="573.4" y="371.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="573.4" y="355.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.26%)</title><rect x="574.5" y="371.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="577.5" y="382.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="577.6" y="371.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="580.6" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.62%)</title><rect x="578.6" y="451.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.6" y="462.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.62%)</title><rect x="578.6" y="435.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (160 samples, 14.12%)</title><rect x="585.9" y="451.0" width="166.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.9" y="462.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (154 samples, 13.59%)</title><rect x="585.9" y="435.0" width="160.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.9" y="446.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 4.77%)</title><rect x="589.1" y="419.0" width="56.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.1" y="430.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.91%)</title><rect x="599.5" y="403.0" width="34.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="602.5" y="414.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.91%)</title><rect x="599.5" y="387.0" width="34.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.5" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.79%)</title><rect x="607.8" y="371.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.8" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.79%)</title><rect x="607.8" y="355.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.8" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.79%)</title><rect x="607.8" y="339.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.8" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="608.9" y="323.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="611.9" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.62%)</title><rect x="609.9" y="323.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.9" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.26%)</title><rect x="609.9" y="307.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="612.9" y="318.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="609.9" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.9" y="302.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="610.9" y="291.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="613.9" y="302.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="610.9" y="275.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.9" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="610.9" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="613.9" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="610.9" y="243.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="613.9" y="254.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="612.0" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="615.0" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.35%)</title><rect x="613.0" y="307.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="616.0" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="614.1" y="291.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="617.1" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="614.1" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="617.1" y="286.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.18%)</title><rect x="615.1" y="275.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="618.1" y="286.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="616.1" y="259.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="619.1" y="270.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.71%)</title><rect x="617.2" y="371.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.2" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="625.5" y="371.0" width="4.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="628.5" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="629.7" y="371.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="632.7" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.97%)</title><rect x="633.8" y="403.0" width="11.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="636.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.44%)</title><rect x="645.3" y="419.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="645.3" y="403.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="645.3" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.3" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.09%)</title><rect x="645.3" y="371.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="648.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.35%)</title><rect x="646.3" y="403.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.35%)</title><rect x="646.3" y="387.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="649.3" y="398.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (92 samples, 8.12%)</title><rect x="650.5" y="419.0" width="95.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.5" y="430.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (77 samples, 6.80%)</title><rect x="666.1" y="403.0" width="80.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.1" y="414.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.97%)</title><rect x="668.2" y="387.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.2" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.97%)</title><rect x="668.2" y="371.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.2" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.97%)</title><rect x="668.2" y="355.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="671.2" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.97%)</title><rect x="668.2" y="339.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="671.2" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="679.7" y="387.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="682.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="679.7" y="371.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="679.7" y="355.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="682.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="679.7" y="339.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.18%)</title><rect x="679.7" y="323.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.7" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (62 samples, 5.47%)</title><rect x="681.8" y="387.0" width="64.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.8" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (56 samples, 4.94%)</title><rect x="688.0" y="371.0" width="58.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.0" y="382.0">java/u..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="715.1" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="718.1" y="366.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="715.1" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="718.1" y="350.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="715.1" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="718.1" y="334.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="715.1" y="307.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="718.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.56%)</title><rect x="716.1" y="355.0" width="30.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.1" y="366.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.18%)</title><rect x="731.7" y="339.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="734.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.97%)</title><rect x="733.8" y="339.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.8" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.26%)</title><rect x="742.2" y="323.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="745.2" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.26%)</title><rect x="742.2" y="307.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="745.2" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.26%)</title><rect x="742.2" y="291.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="745.2" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="742.2" y="275.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="745.2" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.18%)</title><rect x="742.2" y="259.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.2" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="742.2" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="745.2" y="254.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="742.2" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="745.2" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="742.2" y="211.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="745.2" y="222.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="742.2" y="195.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="745.2" y="206.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="743.2" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="746.2" y="254.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="744.2" y="259.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="747.2" y="270.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="745.3" y="339.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="748.3" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.53%)</title><rect x="746.3" y="435.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.3" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.53%)</title><rect x="746.3" y="419.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="749.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.53%)</title><rect x="746.3" y="403.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.53%)</title><rect x="746.3" y="387.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.3" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (86 samples, 7.59%)</title><rect x="752.6" y="451.0" width="89.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.6" y="462.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.09%)</title><rect x="754.7" y="435.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.7" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (83 samples, 7.33%)</title><rect x="755.7" y="435.0" width="86.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.7" y="446.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (23 samples, 2.03%)</title><rect x="760.9" y="419.0" width="24.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="763.9" y="430.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (23 samples, 2.03%)</title><rect x="760.9" y="403.0" width="24.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="763.9" y="414.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.77%)</title><rect x="762.0" y="387.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="765.0" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="774.4" y="371.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="777.4" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="774.4" y="355.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="777.4" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="774.4" y="339.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.4" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.26%)</title><rect x="774.4" y="323.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="777.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.26%)</title><rect x="774.4" y="307.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="777.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 0.18%)</title><rect x="777.6" y="371.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.6" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="778.6" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.6" y="366.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="778.6" y="339.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="781.6" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="779.7" y="371.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="782.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="781.7" y="371.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="781.7" y="355.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="781.7" y="339.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.7" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="782.8" y="387.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.8" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="782.8" y="371.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="785.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="783.8" y="355.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.8" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="783.8" y="339.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.8" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (10 samples, 0.88%)</title><rect x="784.9" y="419.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.18%)</title><rect x="793.2" y="403.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="796.2" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.09%)</title><rect x="795.3" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="798.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.09%)</title><rect x="795.3" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.09%)</title><rect x="795.3" y="387.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.09%)</title><rect x="795.3" y="371.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="798.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="795.3" y="355.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="798.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="795.3" y="339.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.09%)</title><rect x="795.3" y="323.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.3" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.62%)</title><rect x="796.3" y="419.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.3" y="430.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.62%)</title><rect x="796.3" y="403.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="799.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="803.6" y="419.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.6" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1470575307.get (1 samples, 0.09%)</title><rect x="803.6" y="403.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.09%)</title><rect x="803.6" y="387.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.6" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (2 samples, 0.18%)</title><rect x="804.7" y="419.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.7" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (2 samples, 0.18%)</title><rect x="804.7" y="403.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.7" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/408804468.get$Lambda (2 samples, 0.18%)</title><rect x="804.7" y="387.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="805.7" y="371.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.7" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="805.7" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="808.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="805.7" y="339.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="808.7" y="350.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="805.7" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.7" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.18%)</title><rect x="806.7" y="419.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.7" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (13 samples, 1.15%)</title><rect x="808.8" y="419.0" width="13.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.8" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.97%)</title><rect x="810.9" y="403.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="813.9" y="414.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.44%)</title><rect x="810.9" y="387.0" width="5.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="813.9" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (6 samples, 0.53%)</title><rect x="816.1" y="387.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.1" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="822.4" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="825.4" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.44%)</title><rect x="823.4" y="419.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="826.4" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="826.5" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="829.5" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="826.5" y="387.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="826.5" y="371.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="829.5" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="826.5" y="355.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.5" y="366.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="826.5" y="339.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="829.5" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="827.6" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="830.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.15%)</title><rect x="828.6" y="419.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="831.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.06%)</title><rect x="829.6" y="403.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="832.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.06%)</title><rect x="829.6" y="387.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.71%)</title><rect x="829.6" y="371.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.71%)</title><rect x="829.6" y="355.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="832.6" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/408804468.accept (1 samples, 0.09%)</title><rect x="829.6" y="339.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.6" y="350.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.44%)</title><rect x="830.7" y="339.0" width="5.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="833.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.18%)</title><rect x="835.9" y="339.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.35%)</title><rect x="838.0" y="371.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.85%)</title><rect x="842.1" y="451.0" width="21.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.1" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.85%)</title><rect x="842.1" y="435.0" width="21.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.1" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.85%)</title><rect x="842.1" y="419.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.1" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 0.88%)</title><rect x="842.1" y="403.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.88%)</title><rect x="842.1" y="387.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.1" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2020746043.accept (7 samples, 0.62%)</title><rect x="843.2" y="371.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="846.2" y="382.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="850.5" y="371.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="853.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.97%)</title><rect x="852.6" y="403.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2020746043.accept (10 samples, 0.88%)</title><rect x="853.6" y="387.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="856.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (10 samples, 0.88%)</title><rect x="853.6" y="371.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.6" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (10 samples, 0.88%)</title><rect x="853.6" y="355.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.6" y="366.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.88%)</title><rect x="853.6" y="339.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.6" y="350.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.88%)</title><rect x="853.6" y="323.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="856.6" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.62%)</title><rect x="856.7" y="307.0" width="7.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="859.7" y="318.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.62%)</title><rect x="856.7" y="291.0" width="7.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="859.7" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="864.0" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.0" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.53%)</title><rect x="865.1" y="467.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="868.1" y="478.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="865.1" y="451.0" width="6.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="868.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.62%)</title><rect x="871.3" y="531.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.62%)</title><rect x="871.3" y="515.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.62%)</title><rect x="871.3" y="499.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="874.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.62%)</title><rect x="871.3" y="483.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/399290885.run (2 samples, 0.18%)</title><rect x="876.5" y="467.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (230 samples, 20.30%)</title><rect x="878.6" y="531.0" width="239.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.6" y="542.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 19.95%)</title><rect x="881.7" y="515.0" width="235.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.7" y="526.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (209 samples, 18.45%)</title><rect x="882.8" y="499.0" width="217.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="885.8" y="510.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.18%)</title><rect x="899.4" y="483.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="899.4" y="467.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="902.4" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="899.4" y="451.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="902.4" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="899.4" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.4" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="899.4" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="902.4" y="430.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="900.5" y="467.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="903.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.97%)</title><rect x="901.5" y="483.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 0.97%)</title><rect x="913.0" y="483.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="916.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.97%)</title><rect x="913.0" y="467.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="916.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.97%)</title><rect x="913.0" y="451.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.97%)</title><rect x="913.0" y="435.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 14.83%)</title><rect x="924.4" y="483.0" width="175.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.4" y="494.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 14.74%)</title><rect x="925.5" y="467.0" width="173.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.5" y="478.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="934.8" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.8" y="462.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="935.9" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="936.9" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.9" y="462.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 13.42%)</title><rect x="938.0" y="451.0" width="158.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="941.0" y="462.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="943.2" y="435.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.2" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="946.3" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="949.3" y="446.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.59%)</title><rect x="947.3" y="435.0" width="18.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.3" y="446.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="954.6" y="419.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.6" y="430.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="955.7" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.79%)</title><rect x="956.7" y="419.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.18%)</title><rect x="966.1" y="435.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.1" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="968.2" y="435.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.2" y="446.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 1.15%)</title><rect x="970.2" y="435.0" width="13.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="973.2" y="446.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.74%)</title><rect x="983.8" y="435.0" width="32.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="986.8" y="446.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 5.30%)</title><rect x="1016.1" y="435.0" width="62.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1019.1" y="446.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.09%)</title><rect x="1078.6" y="435.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1081.6" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.26%)</title><rect x="1079.6" y="435.0" width="3.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1082.6" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1082.7" y="435.0" width="2.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1085.7" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="1084.8" y="435.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1087.8" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1086.9" y="435.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1089.9" y="446.0"></text>
</g>
<g>
<title>_init (2 samples, 0.18%)</title><rect x="1087.9" y="435.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1090.9" y="446.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.35%)</title><rect x="1090.0" y="435.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.0" y="446.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1094.2" y="435.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.2" y="446.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1095.2" y="435.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1098.2" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1096.3" y="451.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1099.3" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1098.3" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.3" y="462.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1099.4" y="483.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1102.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="1100.4" y="499.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.32%)</title><rect x="1101.5" y="499.0" width="15.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1104.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.32%)</title><rect x="1101.5" y="483.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1104.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.32%)</title><rect x="1101.5" y="467.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1104.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.32%)</title><rect x="1101.5" y="451.0" width="15.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1104.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.09%)</title><rect x="1117.1" y="515.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1118.1" y="579.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1118.1" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1121.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1118.1" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1121.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1118.1" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1121.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1118.1" y="515.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1121.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1118.1" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1121.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1118.1" y="483.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1121.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.09%)</title><rect x="1118.1" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.1" y="478.0"></text>
</g>
<g>
<title>start_thread (68 samples, 6.00%)</title><rect x="1119.2" y="579.0" width="70.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1122.2" y="590.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (68 samples, 6.00%)</title><rect x="1119.2" y="563.0" width="70.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1122.2" y="574.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.85%)</title><rect x="1119.2" y="547.0" width="21.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.2" y="558.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.88%)</title><rect x="1119.2" y="531.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.2" y="542.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.88%)</title><rect x="1119.2" y="515.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.2" y="526.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1119.2" y="499.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.2" y="510.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.35%)</title><rect x="1120.2" y="499.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.2" y="510.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.44%)</title><rect x="1124.4" y="499.0" width="5.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1127.4" y="510.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 0.97%)</title><rect x="1129.6" y="531.0" width="11.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.6" y="542.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.71%)</title><rect x="1129.6" y="515.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.6" y="526.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1129.6" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.6" y="510.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1130.6" y="499.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.6" y="510.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.35%)</title><rect x="1133.8" y="499.0" width="4.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.09%)</title><rect x="1137.9" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1137.9" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="510.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1137.9" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1139.0" y="515.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.0" y="526.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1139.0" y="499.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.0" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.09%)</title><rect x="1139.0" y="483.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.0" y="494.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.09%)</title><rect x="1139.0" y="467.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.0" y="478.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.09%)</title><rect x="1139.0" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.0" y="462.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.09%)</title><rect x="1139.0" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.0" y="446.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.09%)</title><rect x="1139.0" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.0" y="430.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1139.0" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.0" y="414.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1140.0" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.0" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1140.0" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.0" y="478.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1140.0" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.0" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.09%)</title><rect x="1140.0" y="435.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.0" y="446.0"></text>
</g>
<g>
<title>JavaThread::run() (45 samples, 3.97%)</title><rect x="1141.1" y="547.0" width="46.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.1" y="558.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (45 samples, 3.97%)</title><rect x="1141.1" y="531.0" width="46.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.1" y="542.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (45 samples, 3.97%)</title><rect x="1141.1" y="515.0" width="46.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.1" y="526.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (45 samples, 3.97%)</title><rect x="1141.1" y="499.0" width="46.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="510.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (44 samples, 3.88%)</title><rect x="1141.1" y="483.0" width="45.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.1" y="494.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (44 samples, 3.88%)</title><rect x="1141.1" y="467.0" width="45.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.1" y="478.0">Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1141.1" y="451.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="462.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1141.1" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1141.1" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1141.1" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.1" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1141.1" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.1" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1141.1" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.1" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1141.1" y="355.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1141.1" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1141.1" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.1" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1141.1" y="307.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1141.1" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1141.1" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.1" y="286.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1141.1" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.1" y="270.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.09%)</title><rect x="1141.1" y="243.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.1" y="254.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 1.85%)</title><rect x="1142.1" y="451.0" width="21.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.1" y="462.0">C..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1142.1" y="435.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.1" y="446.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1142.1" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.1" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1143.1" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1143.1" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.1" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1143.1" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1143.1" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="398.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1143.1" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 1.68%)</title><rect x="1144.2" y="435.0" width="19.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.18%)</title><rect x="1144.2" y="419.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.2" y="430.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1145.2" y="403.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1148.2" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.18%)</title><rect x="1146.3" y="419.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.3" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.26%)</title><rect x="1148.3" y="419.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1148.3" y="403.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.3" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1149.4" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.4" y="414.0"></text>
</g>
<g>
<title>loadConINode::rule() const (1 samples, 0.09%)</title><rect x="1150.4" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1151.5" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.5" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1151.5" y="403.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.5" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.26%)</title><rect x="1152.5" y="419.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="430.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.09%)</title><rect x="1153.5" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.5" y="414.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1154.6" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.6" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1155.6" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1155.6" y="403.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.6" y="414.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.18%)</title><rect x="1156.7" y="419.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1156.7" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.7" y="414.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1157.7" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="414.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1158.8" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.8" y="430.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1158.8" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="414.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.18%)</title><rect x="1159.8" y="419.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.8" y="430.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1160.8" y="403.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="414.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1160.8" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.8" y="398.0"></text>
</g>
<g>
<title>compP_mem_rRegNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1161.9" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.9" y="430.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1162.9" y="419.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1165.9" y="430.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 1.32%)</title><rect x="1164.0" y="451.0" width="15.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.0" y="462.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1164.0" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.18%)</title><rect x="1165.0" y="435.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.18%)</title><rect x="1165.0" y="419.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.18%)</title><rect x="1165.0" y="403.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.09%)</title><rect x="1166.0" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.09%)</title><rect x="1166.0" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.0" y="382.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1166.0" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.0" y="366.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1166.0" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.0" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1166.0" y="323.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.0" y="334.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1166.0" y="307.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="318.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1166.0" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.0" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1166.0" y="275.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.0" y="286.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1166.0" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.0" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.62%)</title><rect x="1167.1" y="435.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="446.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1167.1" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1168.1" y="419.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.1" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1169.2" y="419.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.2" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.18%)</title><rect x="1169.2" y="403.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.18%)</title><rect x="1169.2" y="387.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.2" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1170.2" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.2" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1171.3" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="430.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.09%)</title><rect x="1171.3" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1172.3" y="419.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1172.3" y="403.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="414.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1172.3" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1172.3" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="382.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1172.3" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="366.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1172.3" y="339.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.3" y="350.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.3" y="387.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.3" y="371.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="382.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.3" y="355.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.35%)</title><rect x="1174.4" y="435.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.35%)</title><rect x="1174.4" y="419.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.18%)</title><rect x="1174.4" y="403.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1175.4" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="398.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.4" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="382.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1176.5" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="414.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.5" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.5" y="387.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1177.5" y="371.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1177.5" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1178.5" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1178.5" y="419.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1178.5" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1179.6" y="451.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1179.6" y="435.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1179.6" y="419.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1179.6" y="403.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1179.6" y="387.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.44%)</title><rect x="1179.6" y="371.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.18%)</title><rect x="1179.6" y="355.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="339.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.6" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.6" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1179.6" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1179.6" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.6" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.6" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1180.6" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1180.6" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1180.6" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1180.6" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="270.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.09%)</title><rect x="1180.6" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1181.7" y="355.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1181.7" y="339.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1181.7" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.7" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="275.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1181.7" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.7" y="323.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.7" y="307.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.7" y="291.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.7" y="275.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.7" y="259.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.7" y="243.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.7" y="227.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.7" y="211.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.7" y="195.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.7" y="179.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="190.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="163.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="174.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.7" y="147.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="158.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.7" y="131.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="142.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1182.7" y="115.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="126.0"></text>
</g>
<g>
<title>ciMethod::is_unboxing_method() const (1 samples, 0.09%)</title><rect x="1182.7" y="99.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="110.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_box_klass() const (1 samples, 0.09%)</title><rect x="1182.7" y="83.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="163.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="131.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="99.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="94.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="67.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="78.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1183.8" y="51.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="62.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.09%)</title><rect x="1183.8" y="35.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.8" y="451.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="462.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.8" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="446.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.09%)</title><rect x="1185.8" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.09%)</title><rect x="1185.8" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.09%)</title><rect x="1185.8" y="419.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.09%)</title><rect x="1185.8" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1185.8" y="387.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1185.8" y="371.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.8" y="382.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.09%)</title><rect x="1185.8" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="366.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.09%)</title><rect x="1185.8" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="350.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.09%)</title><rect x="1185.8" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="334.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.9" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="494.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.9" y="467.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.9" y="478.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.9" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.9" y="462.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1186.9" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="446.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1186.9" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="430.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1186.9" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="414.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.09%)</title><rect x="1186.9" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="398.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.09%)</title><rect x="1186.9" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="382.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.09%)</title><rect x="1186.9" y="355.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="366.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.09%)</title><rect x="1186.9" y="339.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="547.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="531.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="542.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="526.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="510.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="483.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="462.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.09%)</title><rect x="1189.0" y="435.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="446.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.09%)</title><rect x="1189.0" y="419.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="430.0"></text>
</g>
</g>
</svg>
