<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (379 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.26%)</title><rect x="10.0" y="1395.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.26%)</title><rect x="10.0" y="1379.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>nmethodLocker::nmethodLocker(unsigned char*) (1 samples, 0.26%)</title><rect x="10.0" y="1363.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>__memcpy_sse2 (1 samples, 0.26%)</title><rect x="13.1" y="1395.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 6.86%)</title><rect x="16.2" y="1395.0" width="81.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.2" y="1406.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (26 samples, 6.86%)</title><rect x="16.2" y="1379.0" width="81.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="1390.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.26%)</title><rect x="16.2" y="1363.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.2" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.26%)</title><rect x="16.2" y="1347.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.26%)</title><rect x="16.2" y="1331.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.26%)</title><rect x="16.2" y="1315.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="16.2" y="1299.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="16.2" y="1283.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="16.2" y="1267.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.26%)</title><rect x="16.2" y="1251.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="16.2" y="1235.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.26%)</title><rect x="16.2" y="1219.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.26%)</title><rect x="16.2" y="1203.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.removeInterestOps (1 samples, 0.26%)</title><rect x="16.2" y="1187.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.26%)</title><rect x="16.2" y="1171.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.26%)</title><rect x="16.2" y="1155.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 6.60%)</title><rect x="19.3" y="1363.0" width="77.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.3" y="1374.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.26%)</title><rect x="19.3" y="1347.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.26%)</title><rect x="19.3" y="1331.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.26%)</title><rect x="19.3" y="1315.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="19.3" y="1299.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.26%)</title><rect x="19.3" y="1283.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="19.3" y="1267.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.26%)</title><rect x="19.3" y="1251.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.26%)</title><rect x="19.3" y="1235.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.26%)</title><rect x="19.3" y="1219.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.26%)</title><rect x="19.3" y="1203.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/741719507.test (1 samples, 0.26%)</title><rect x="19.3" y="1187.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.53%)</title><rect x="22.5" y="1347.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.5" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.53%)</title><rect x="22.5" y="1331.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.5" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.53%)</title><rect x="22.5" y="1315.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/989845867.accept (2 samples, 0.53%)</title><rect x="22.5" y="1299.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.53%)</title><rect x="22.5" y="1283.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.53%)</title><rect x="22.5" y="1267.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.5" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.53%)</title><rect x="22.5" y="1251.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.58%)</title><rect x="28.7" y="1347.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1464761203.accept (6 samples, 1.58%)</title><rect x="28.7" y="1331.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.7" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.58%)</title><rect x="28.7" y="1315.0" width="18.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.7" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.26%)</title><rect x="31.8" y="1299.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.26%)</title><rect x="31.8" y="1283.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.26%)</title><rect x="31.8" y="1267.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.26%)</title><rect x="31.8" y="1251.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.26%)</title><rect x="31.8" y="1235.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.26%)</title><rect x="31.8" y="1219.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.79%)</title><rect x="34.9" y="1299.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.26%)</title><rect x="41.1" y="1283.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.isRegressing (1 samples, 0.26%)</title><rect x="41.1" y="1267.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="44.2" y="1299.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="44.2" y="1283.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.26%)</title><rect x="44.2" y="1267.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.26%)</title><rect x="44.2" y="1251.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.26%)</title><rect x="44.2" y="1235.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.22%)</title><rect x="47.4" y="1347.0" width="49.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.4" y="1358.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.22%)</title><rect x="47.4" y="1331.0" width="49.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.4" y="1342.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.17%)</title><rect x="47.4" y="1315.0" width="37.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.4" y="1326.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.32%)</title><rect x="47.4" y="1299.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.32%)</title><rect x="47.4" y="1283.0" width="15.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.26%)</title><rect x="47.4" y="1267.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.26%)</title><rect x="47.4" y="1251.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.4" y="1262.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.26%)</title><rect x="47.4" y="1235.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$89/425829657.get (1 samples, 0.26%)</title><rect x="47.4" y="1219.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.79%)</title><rect x="50.5" y="1267.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="50.5" y="1251.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="53.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="50.5" y="1235.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.26%)</title><rect x="50.5" y="1219.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="50.5" y="1203.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.26%)</title><rect x="50.5" y="1187.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.53%)</title><rect x="53.6" y="1251.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="53.6" y="1235.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="53.6" y="1219.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.26%)</title><rect x="53.6" y="1203.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.26%)</title><rect x="53.6" y="1187.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.26%)</title><rect x="53.6" y="1171.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.26%)</title><rect x="53.6" y="1155.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.26%)</title><rect x="53.6" y="1139.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.26%)</title><rect x="56.7" y="1235.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.7" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.26%)</title><rect x="56.7" y="1219.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.7" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.26%)</title><rect x="56.7" y="1203.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.7" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.26%)</title><rect x="56.7" y="1187.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.7" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.26%)</title><rect x="56.7" y="1171.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/1733301272.shouldBlock (1 samples, 0.26%)</title><rect x="59.8" y="1267.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.26%)</title><rect x="59.8" y="1251.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.26%)</title><rect x="59.8" y="1235.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.26%)</title><rect x="59.8" y="1219.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="59.8" y="1203.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="59.8" y="1187.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="59.8" y="1171.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$51/1794717576.get (1 samples, 0.26%)</title><rect x="59.8" y="1155.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.06%)</title><rect x="62.9" y="1299.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.06%)</title><rect x="62.9" y="1283.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.06%)</title><rect x="62.9" y="1267.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.06%)</title><rect x="62.9" y="1251.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.53%)</title><rect x="66.0" y="1235.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.26%)</title><rect x="66.0" y="1219.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.26%)</title><rect x="66.0" y="1203.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.26%)</title><rect x="66.0" y="1187.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.26%)</title><rect x="66.0" y="1171.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.26%)</title><rect x="66.0" y="1155.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.26%)</title><rect x="66.0" y="1139.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.26%)</title><rect x="66.0" y="1123.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.26%)</title><rect x="69.2" y="1219.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.26%)</title><rect x="69.2" y="1203.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.26%)</title><rect x="69.2" y="1187.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.26%)</title><rect x="72.3" y="1235.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.26%)</title><rect x="72.3" y="1219.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.26%)</title><rect x="72.3" y="1203.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.3" y="1214.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.26%)</title><rect x="72.3" y="1187.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.79%)</title><rect x="75.4" y="1299.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.26%)</title><rect x="75.4" y="1283.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.addListener (1 samples, 0.26%)</title><rect x="78.5" y="1283.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.26%)</title><rect x="78.5" y="1267.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.value (1 samples, 0.26%)</title><rect x="78.5" y="1251.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.forConsumer (1 samples, 0.26%)</title><rect x="81.6" y="1283.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.&lt;init&gt; (1 samples, 0.26%)</title><rect x="81.6" y="1267.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.53%)</title><rect x="84.7" y="1315.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.53%)</title><rect x="84.7" y="1299.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.53%)</title><rect x="84.7" y="1283.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.26%)</title><rect x="84.7" y="1267.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.7" y="1278.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.26%)</title><rect x="84.7" y="1251.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.26%)</title><rect x="87.8" y="1267.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.8" y="1278.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.26%)</title><rect x="87.8" y="1251.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.8" y="1262.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.26%)</title><rect x="87.8" y="1235.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.8" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.26%)</title><rect x="87.8" y="1219.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.8" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.26%)</title><rect x="87.8" y="1203.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.8" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="87.8" y="1187.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.53%)</title><rect x="90.9" y="1315.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.53%)</title><rect x="90.9" y="1299.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="90.9" y="1283.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.26%)</title><rect x="90.9" y="1267.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.26%)</title><rect x="90.9" y="1251.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.26%)</title><rect x="90.9" y="1235.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.26%)</title><rect x="90.9" y="1219.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="93.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.26%)</title><rect x="90.9" y="1203.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="93.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.26%)</title><rect x="94.1" y="1283.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.26%)</title><rect x="94.1" y="1267.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.26%)</title><rect x="94.1" y="1251.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (228 samples, 60.16%)</title><rect x="97.2" y="1395.0" width="709.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.2" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (228 samples, 60.16%)</title><rect x="97.2" y="1379.0" width="709.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.2" y="1390.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (228 samples, 60.16%)</title><rect x="97.2" y="1363.0" width="709.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.2" y="1374.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1791071698.run (213 samples, 56.20%)</title><rect x="103.4" y="1347.0" width="663.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.4" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1791071698.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (213 samples, 56.20%)</title><rect x="103.4" y="1331.0" width="663.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.4" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (213 samples, 56.20%)</title><rect x="103.4" y="1315.0" width="663.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.4" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (213 samples, 56.20%)</title><rect x="103.4" y="1299.0" width="663.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.4" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.06%)</title><rect x="106.5" y="1283.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.5" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.06%)</title><rect x="106.5" y="1267.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.5" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.06%)</title><rect x="106.5" y="1251.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="106.5" y="1235.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.5" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.79%)</title><rect x="109.6" y="1235.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.6" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="115.9" y="1219.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="118.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (20 samples, 5.28%)</title><rect x="119.0" y="1283.0" width="62.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.0" y="1294.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.43%)</title><rect x="140.8" y="1267.0" width="40.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.8" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.43%)</title><rect x="140.8" y="1251.0" width="40.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.8" y="1262.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.43%)</title><rect x="140.8" y="1235.0" width="40.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.8" y="1246.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="140.8" y="1219.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="143.8" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="140.8" y="1203.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="143.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="140.8" y="1187.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="143.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="140.8" y="1171.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="143.8" y="1182.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.26%)</title><rect x="140.8" y="1155.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="143.8" y="1166.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.26%)</title><rect x="140.8" y="1139.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="143.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.53%)</title><rect x="143.9" y="1219.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.53%)</title><rect x="143.9" y="1203.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.53%)</title><rect x="143.9" y="1187.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/623949469.accept (2 samples, 0.53%)</title><rect x="143.9" y="1171.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 2.64%)</title><rect x="150.1" y="1219.0" width="31.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.1" y="1230.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/623949469.accept (10 samples, 2.64%)</title><rect x="150.1" y="1203.0" width="31.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.1" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (10 samples, 2.64%)</title><rect x="150.1" y="1187.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.1" y="1198.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (10 samples, 2.64%)</title><rect x="150.1" y="1171.0" width="31.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.1" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 2.11%)</title><rect x="156.3" y="1155.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.3" y="1166.0">j..</text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="162.6" y="1139.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="165.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.32%)</title><rect x="165.7" y="1139.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.32%)</title><rect x="165.7" y="1123.0" width="15.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/1742201343.accept (1 samples, 0.26%)</title><rect x="178.1" y="1107.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (33 samples, 8.71%)</title><rect x="181.2" y="1283.0" width="102.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.2" y="1294.0">com/linecorp..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="184.4" y="1267.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="187.4" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="184.4" y="1251.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="187.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (31 samples, 8.18%)</title><rect x="187.5" y="1267.0" width="96.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.5" y="1278.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (31 samples, 8.18%)</title><rect x="187.5" y="1251.0" width="96.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.5" y="1262.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 8.18%)</title><rect x="187.5" y="1235.0" width="96.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.5" y="1246.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 8.18%)</title><rect x="187.5" y="1219.0" width="96.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.5" y="1230.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 8.18%)</title><rect x="187.5" y="1203.0" width="96.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.5" y="1214.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 2.90%)</title><rect x="187.5" y="1187.0" width="34.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.5" y="1198.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.79%)</title><rect x="187.5" y="1171.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.79%)</title><rect x="187.5" y="1155.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.26%)</title><rect x="193.7" y="1139.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="193.7" y="1123.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="193.7" y="1107.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="193.7" y="1091.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.26%)</title><rect x="193.7" y="1075.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.11%)</title><rect x="196.8" y="1171.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.8" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 2.11%)</title><rect x="196.8" y="1155.0" width="24.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.8" y="1166.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.79%)</title><rect x="196.8" y="1139.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.79%)</title><rect x="196.8" y="1123.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.06%)</title><rect x="206.1" y="1139.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.06%)</title><rect x="206.1" y="1123.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (2 samples, 0.53%)</title><rect x="206.1" y="1107.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.26%)</title><rect x="212.4" y="1107.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="212.4" y="1091.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="215.4" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="212.4" y="1075.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="215.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="212.4" y="1059.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="215.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.26%)</title><rect x="215.5" y="1107.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.26%)</title><rect x="215.5" y="1091.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.26%)</title><rect x="218.6" y="1139.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.6" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="218.6" y="1123.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="221.6" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="218.6" y="1107.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="221.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="218.6" y="1091.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="221.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="218.6" y="1075.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="221.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 5.01%)</title><rect x="221.7" y="1187.0" width="59.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.7" y="1198.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.26%)</title><rect x="221.7" y="1171.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.26%)</title><rect x="221.7" y="1155.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.26%)</title><rect x="221.7" y="1139.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.26%)</title><rect x="221.7" y="1123.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.26%)</title><rect x="221.7" y="1107.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.53%)</title><rect x="224.8" y="1171.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.53%)</title><rect x="224.8" y="1155.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.06%)</title><rect x="231.1" y="1171.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.79%)</title><rect x="234.2" y="1155.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.53%)</title><rect x="234.2" y="1139.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.26%)</title><rect x="237.3" y="1123.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.3" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="237.3" y="1107.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="240.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="237.3" y="1091.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="240.3" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="237.3" y="1075.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="240.3" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="237.3" y="1059.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="240.3" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="237.3" y="1043.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="240.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.26%)</title><rect x="237.3" y="1027.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="240.3" y="1038.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.26%)</title><rect x="237.3" y="1011.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="240.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.26%)</title><rect x="240.4" y="1139.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (12 samples, 3.17%)</title><rect x="243.5" y="1171.0" width="37.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.5" y="1182.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 3.17%)</title><rect x="243.5" y="1155.0" width="37.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.5" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.06%)</title><rect x="243.5" y="1139.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.06%)</title><rect x="243.5" y="1123.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.26%)</title><rect x="243.5" y="1107.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.26%)</title><rect x="243.5" y="1091.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.79%)</title><rect x="246.6" y="1107.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.79%)</title><rect x="246.6" y="1091.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.53%)</title><rect x="249.7" y="1075.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.53%)</title><rect x="249.7" y="1059.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.11%)</title><rect x="256.0" y="1139.0" width="24.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.0" y="1150.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.11%)</title><rect x="256.0" y="1123.0" width="24.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.0" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.11%)</title><rect x="256.0" y="1107.0" width="24.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.0" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.79%)</title><rect x="265.3" y="1091.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.26%)</title><rect x="265.3" y="1075.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.53%)</title><rect x="268.4" y="1075.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.53%)</title><rect x="268.4" y="1059.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.53%)</title><rect x="268.4" y="1043.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.26%)</title><rect x="268.4" y="1027.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="271.5" y="1027.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.26%)</title><rect x="274.6" y="1091.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.26%)</title><rect x="274.6" y="1075.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.26%)</title><rect x="274.6" y="1059.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.26%)</title><rect x="274.6" y="1043.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.26%)</title><rect x="274.6" y="1027.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.26%)</title><rect x="277.8" y="1091.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.26%)</title><rect x="277.8" y="1075.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.26%)</title><rect x="277.8" y="1059.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.26%)</title><rect x="277.8" y="1043.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.26%)</title><rect x="277.8" y="1027.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.26%)</title><rect x="280.9" y="1187.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.26%)</title><rect x="280.9" y="1171.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.26%)</title><rect x="280.9" y="1155.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.26%)</title><rect x="280.9" y="1139.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.26%)</title><rect x="280.9" y="1123.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (153 samples, 40.37%)</title><rect x="284.0" y="1283.0" width="476.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.0" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.pr..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="305.8" y="1267.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="308.8" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="305.8" y="1251.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="308.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (22 samples, 5.80%)</title><rect x="308.9" y="1267.0" width="68.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.9" y="1278.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 5.28%)</title><rect x="315.1" y="1251.0" width="62.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.1" y="1262.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 5.28%)</title><rect x="315.1" y="1235.0" width="62.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.1" y="1246.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.06%)</title><rect x="315.1" y="1219.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.06%)</title><rect x="315.1" y="1203.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.06%)</title><rect x="315.1" y="1187.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.06%)</title><rect x="315.1" y="1171.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.06%)</title><rect x="315.1" y="1155.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.06%)</title><rect x="327.6" y="1219.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.06%)</title><rect x="327.6" y="1203.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.06%)</title><rect x="327.6" y="1187.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.6" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 2.90%)</title><rect x="340.0" y="1219.0" width="34.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.0" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.11%)</title><rect x="349.4" y="1203.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="352.4" y="1214.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.11%)</title><rect x="349.4" y="1187.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.4" y="1198.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.53%)</title><rect x="368.0" y="1171.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.26%)</title><rect x="374.3" y="1219.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 1.32%)</title><rect x="377.4" y="1267.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.4" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 1.32%)</title><rect x="377.4" y="1251.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="380.4" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="389.8" y="1235.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="392.8" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="389.8" y="1219.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="392.8" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="389.8" y="1203.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="389.8" y="1187.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="392.8" y="1198.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="389.8" y="1171.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="392.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (39 samples, 10.29%)</title><rect x="393.0" y="1267.0" width="121.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.0" y="1278.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (36 samples, 9.50%)</title><rect x="393.0" y="1251.0" width="112.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.0" y="1262.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 3.69%)</title><rect x="396.1" y="1235.0" width="43.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="399.1" y="1246.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.64%)</title><rect x="405.4" y="1219.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.4" y="1230.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.64%)</title><rect x="405.4" y="1203.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.4" y="1214.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.53%)</title><rect x="411.6" y="1187.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.53%)</title><rect x="411.6" y="1171.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="414.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.53%)</title><rect x="411.6" y="1155.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.6" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.53%)</title><rect x="411.6" y="1139.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="414.6" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.26%)</title><rect x="411.6" y="1123.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="414.6" y="1134.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.26%)</title><rect x="411.6" y="1107.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="414.6" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.26%)</title><rect x="411.6" y="1091.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="414.6" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.26%)</title><rect x="411.6" y="1075.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="414.6" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.26%)</title><rect x="411.6" y="1059.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="414.6" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.26%)</title><rect x="414.7" y="1123.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="417.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="414.7" y="1107.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="417.7" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="414.7" y="1091.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="417.7" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.26%)</title><rect x="414.7" y="1075.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="417.7" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="414.7" y="1059.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="417.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 1.06%)</title><rect x="417.9" y="1187.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.9" y="1198.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="430.3" y="1187.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="433.3" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="433.4" y="1187.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="436.4" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="436.5" y="1219.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="439.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.26%)</title><rect x="439.7" y="1235.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.26%)</title><rect x="439.7" y="1219.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.26%)</title><rect x="439.7" y="1203.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.26%)</title><rect x="439.7" y="1187.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.26%)</title><rect x="439.7" y="1171.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.7" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (20 samples, 5.28%)</title><rect x="442.8" y="1235.0" width="62.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.8" y="1246.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (19 samples, 5.01%)</title><rect x="445.9" y="1219.0" width="59.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.9" y="1230.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.79%)</title><rect x="452.1" y="1203.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.79%)</title><rect x="452.1" y="1187.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.79%)</title><rect x="452.1" y="1171.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.79%)</title><rect x="452.1" y="1155.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.79%)</title><rect x="452.1" y="1139.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="461.5" y="1203.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="461.5" y="1187.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="461.5" y="1171.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.26%)</title><rect x="461.5" y="1155.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="461.5" y="1139.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 3.43%)</title><rect x="464.6" y="1203.0" width="40.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.6" y="1214.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 3.43%)</title><rect x="464.6" y="1187.0" width="40.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.6" y="1198.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 3.17%)</title><rect x="467.7" y="1171.0" width="37.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.7" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.26%)</title><rect x="486.4" y="1155.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.79%)</title><rect x="489.5" y="1155.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.5" y="1166.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.53%)</title><rect x="498.8" y="1155.0" width="6.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="501.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.79%)</title><rect x="505.0" y="1251.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.0" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.79%)</title><rect x="505.0" y="1235.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.79%)</title><rect x="505.0" y="1219.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="508.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.79%)</title><rect x="505.0" y="1203.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="508.0" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="505.0" y="1187.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="508.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="505.0" y="1171.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="508.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.53%)</title><rect x="508.2" y="1187.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="511.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (73 samples, 19.26%)</title><rect x="514.4" y="1267.0" width="227.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="517.4" y="1278.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (72 samples, 19.00%)</title><rect x="514.4" y="1251.0" width="224.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="517.4" y="1262.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (61 samples, 16.09%)</title><rect x="520.6" y="1235.0" width="189.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="523.6" y="1246.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (61 samples, 16.09%)</title><rect x="520.6" y="1219.0" width="189.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="523.6" y="1230.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 15.83%)</title><rect x="520.6" y="1203.0" width="186.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="523.6" y="1214.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (57 samples, 15.04%)</title><rect x="523.7" y="1187.0" width="177.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.7" y="1198.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (57 samples, 15.04%)</title><rect x="523.7" y="1171.0" width="177.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.7" y="1182.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (53 samples, 13.98%)</title><rect x="536.2" y="1155.0" width="165.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="539.2" y="1166.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="558.0" y="1139.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="561.0" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.53%)</title><rect x="561.1" y="1139.0" width="6.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="564.1" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="564.2" y="1123.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="567.2" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (7 samples, 1.85%)</title><rect x="567.3" y="1139.0" width="21.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="570.3" y="1150.0">j..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.26%)</title><rect x="589.1" y="1139.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.1" y="1150.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (35 samples, 9.23%)</title><rect x="592.2" y="1139.0" width="109.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="595.2" y="1150.0">os::sleep(Thr..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.26%)</title><rect x="607.8" y="1123.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="610.8" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 0.79%)</title><rect x="610.9" y="1123.0" width="9.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="613.9" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 3.43%)</title><rect x="620.2" y="1123.0" width="40.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="623.2" y="1134.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.53%)</title><rect x="660.7" y="1123.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="663.7" y="1134.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (10 samples, 2.64%)</title><rect x="666.9" y="1123.0" width="31.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="669.9" y="1134.0">os..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.26%)</title><rect x="698.1" y="1123.0" width="3.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="701.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.26%)</title><rect x="701.2" y="1187.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="704.3" y="1187.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="704.3" y="1171.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="707.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="704.3" y="1155.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="707.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.26%)</title><rect x="707.4" y="1203.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="707.4" y="1187.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="707.4" y="1171.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="707.4" y="1155.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="710.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.79%)</title><rect x="710.5" y="1235.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.26%)</title><rect x="716.8" y="1219.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="719.9" y="1235.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.26%)</title><rect x="719.9" y="1219.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.26%)</title><rect x="723.0" y="1235.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="726.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/194393698.get (1 samples, 0.26%)</title><rect x="723.0" y="1219.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="726.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.26%)</title><rect x="723.0" y="1203.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.26%)</title><rect x="726.1" y="1235.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="729.1" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.26%)</title><rect x="726.1" y="1219.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.53%)</title><rect x="729.2" y="1235.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="732.2" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.26%)</title><rect x="732.3" y="1219.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.26%)</title><rect x="735.4" y="1235.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="738.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.26%)</title><rect x="738.5" y="1251.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.58%)</title><rect x="741.7" y="1267.0" width="18.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="744.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.58%)</title><rect x="741.7" y="1251.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="744.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.58%)</title><rect x="741.7" y="1235.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="744.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.06%)</title><rect x="741.7" y="1219.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.06%)</title><rect x="741.7" y="1203.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.06%)</title><rect x="741.7" y="1187.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$302/608381972.accept (1 samples, 0.26%)</title><rect x="747.9" y="1171.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.9" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="751.0" y="1171.0" width="3.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="754.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.53%)</title><rect x="754.1" y="1219.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$302/608381972.accept (2 samples, 0.53%)</title><rect x="754.1" y="1203.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (2 samples, 0.53%)</title><rect x="754.1" y="1187.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.53%)</title><rect x="754.1" y="1171.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.1" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.53%)</title><rect x="754.1" y="1155.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.1" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.53%)</title><rect x="754.1" y="1139.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.1" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="757.2" y="1123.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="760.2" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="757.2" y="1107.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="760.2" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.53%)</title><rect x="760.3" y="1283.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.3" y="1294.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.53%)</title><rect x="760.3" y="1267.0" width="6.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="763.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 3.43%)</title><rect x="766.6" y="1347.0" width="40.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.6" y="1358.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 2.64%)</title><rect x="775.9" y="1331.0" width="31.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.9" y="1342.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 2.37%)</title><rect x="779.0" y="1315.0" width="28.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="782.0" y="1326.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 2.37%)</title><rect x="779.0" y="1299.0" width="28.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="782.0" y="1310.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 2.37%)</title><rect x="779.0" y="1283.0" width="28.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="782.0" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 2.37%)</title><rect x="779.0" y="1267.0" width="28.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.0" y="1278.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.53%)</title><rect x="807.0" y="1395.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="810.0" y="1406.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.26%)</title><rect x="807.0" y="1379.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.0" y="1390.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.26%)</title><rect x="807.0" y="1363.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="810.0" y="1374.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.26%)</title><rect x="807.0" y="1347.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="810.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="810.2" y="1379.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="813.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="810.2" y="1363.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.26%)</title><rect x="810.2" y="1347.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="813.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.26%)</title><rect x="810.2" y="1331.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="813.2" y="1342.0"></text>
</g>
<g>
<title>start_thread (121 samples, 31.93%)</title><rect x="813.3" y="1395.0" width="376.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="816.3" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (121 samples, 31.93%)</title><rect x="813.3" y="1379.0" width="376.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="816.3" y="1390.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.43%)</title><rect x="813.3" y="1363.0" width="40.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="816.3" y="1374.0">Gan..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.26%)</title><rect x="813.3" y="1347.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="816.3" y="1358.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="813.3" y="1331.0" width="3.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="816.3" y="1342.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 3.17%)</title><rect x="816.4" y="1347.0" width="37.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="819.4" y="1358.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 2.37%)</title><rect x="816.4" y="1331.0" width="28.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.4" y="1342.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.26%)</title><rect x="816.4" y="1315.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="819.4" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.26%)</title><rect x="816.4" y="1299.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.4" y="1310.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 1.85%)</title><rect x="819.5" y="1315.0" width="21.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="822.5" y="1326.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.06%)</title><rect x="828.8" y="1299.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.8" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.26%)</title><rect x="835.1" y="1283.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="838.1" y="1294.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="838.2" y="1283.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.2" y="1294.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.26%)</title><rect x="841.3" y="1315.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.3" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.79%)</title><rect x="844.4" y="1331.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="847.4" y="1342.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.26%)</title><rect x="844.4" y="1315.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.4" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.26%)</title><rect x="847.5" y="1315.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.5" y="1326.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.26%)</title><rect x="847.5" y="1299.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.5" y="1310.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.26%)</title><rect x="847.5" y="1283.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.5" y="1294.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.26%)</title><rect x="847.5" y="1267.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="850.5" y="1278.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.26%)</title><rect x="847.5" y="1251.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="850.5" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.26%)</title><rect x="847.5" y="1235.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="850.5" y="1246.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.26%)</title><rect x="847.5" y="1219.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.5" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.26%)</title><rect x="847.5" y="1203.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="850.5" y="1214.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::par_allocate(unsigned long) (1 samples, 0.26%)</title><rect x="847.5" y="1187.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.5" y="1198.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="847.5" y="1171.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="850.5" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.26%)</title><rect x="850.6" y="1315.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="853.6" y="1326.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.26%)</title><rect x="850.6" y="1299.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="853.6" y="1310.0"></text>
</g>
<g>
<title>JavaThread::run() (107 samples, 28.23%)</title><rect x="853.7" y="1363.0" width="333.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="856.7" y="1374.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (107 samples, 28.23%)</title><rect x="853.7" y="1347.0" width="333.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.7" y="1358.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (106 samples, 27.97%)</title><rect x="853.7" y="1331.0" width="330.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="856.7" y="1342.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (106 samples, 27.97%)</title><rect x="853.7" y="1315.0" width="330.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.7" y="1326.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (102 samples, 26.91%)</title><rect x="853.7" y="1299.0" width="317.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="856.7" y="1310.0">C2Compiler::compile_method(ciEnv*, ciMethod..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (102 samples, 26.91%)</title><rect x="853.7" y="1283.0" width="317.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.7" y="1294.0">Compile::Compile(ciEnv*, C2Compiler*, ciMet..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 15.83%)</title><rect x="853.7" y="1267.0" width="186.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.7" y="1278.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.06%)</title><rect x="853.7" y="1251.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.7" y="1262.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.53%)</title><rect x="853.7" y="1235.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.7" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.26%)</title><rect x="853.7" y="1219.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="856.7" y="1230.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.26%)</title><rect x="856.9" y="1219.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.9" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.53%)</title><rect x="860.0" y="1235.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="863.0" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.53%)</title><rect x="860.0" y="1219.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="863.0" y="1230.0"></text>
</g>
<g>
<title>Matcher::Matcher() (1 samples, 0.26%)</title><rect x="866.2" y="1251.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="869.2" y="1262.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="866.2" y="1235.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="869.2" y="1246.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 2.64%)</title><rect x="869.3" y="1251.0" width="31.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="872.3" y="1262.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.53%)</title><rect x="869.3" y="1235.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="872.3" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 1.85%)</title><rect x="875.5" y="1235.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="878.5" y="1246.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.79%)</title><rect x="878.7" y="1219.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="881.7" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.26%)</title><rect x="888.0" y="1219.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.0" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.26%)</title><rect x="888.0" y="1203.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.0" y="1214.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.53%)</title><rect x="891.1" y="1219.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.1" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="891.1" y="1203.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.1" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="891.1" y="1187.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.1" y="1198.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="891.1" y="1171.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="891.1" y="1155.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="894.2" y="1203.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="897.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="894.2" y="1187.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.2" y="1198.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.26%)</title><rect x="894.2" y="1171.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="897.2" y="1182.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.26%)</title><rect x="897.3" y="1235.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.3" y="1246.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.26%)</title><rect x="900.4" y="1251.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.4" y="1262.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.26%)</title><rect x="900.4" y="1235.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.4" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.26%)</title><rect x="903.6" y="1251.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.6" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.26%)</title><rect x="903.6" y="1235.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="906.6" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.26%)</title><rect x="903.6" y="1219.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.6" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.26%)</title><rect x="903.6" y="1203.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.6" y="1214.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.26%)</title><rect x="903.6" y="1187.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.6" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="903.6" y="1171.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.6" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="903.6" y="1155.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 11.35%)</title><rect x="906.7" y="1251.0" width="133.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.7" y="1262.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.53%)</title><rect x="906.7" y="1235.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.7" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.06%)</title><rect x="912.9" y="1235.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="915.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.26%)</title><rect x="919.1" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.1" y="1230.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.26%)</title><rect x="922.2" y="1219.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="925.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.53%)</title><rect x="925.4" y="1235.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.4" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="925.4" y="1219.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.26%)</title><rect x="928.5" y="1219.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.5" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="928.5" y="1203.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.5" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.32%)</title><rect x="931.6" y="1235.0" width="15.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.6" y="1246.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.26%)</title><rect x="940.9" y="1219.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.26%)</title><rect x="944.0" y="1219.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.26%)</title><rect x="944.0" y="1203.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.0" y="1214.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.26%)</title><rect x="944.0" y="1187.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="947.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 2.64%)</title><rect x="947.2" y="1235.0" width="31.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.2" y="1246.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.26%)</title><rect x="959.6" y="1219.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.06%)</title><rect x="962.7" y="1219.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.7" y="1230.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.26%)</title><rect x="975.2" y="1219.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.26%)</title><rect x="978.3" y="1235.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.3" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.26%)</title><rect x="978.3" y="1219.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 1.58%)</title><rect x="981.4" y="1235.0" width="18.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="984.4" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.53%)</title><rect x="993.9" y="1219.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.06%)</title><rect x="1000.1" y="1235.0" width="12.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.1" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.26%)</title><rect x="1009.4" y="1219.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1012.4" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.06%)</title><rect x="1012.5" y="1235.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.5" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.06%)</title><rect x="1012.5" y="1219.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.5" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.06%)</title><rect x="1012.5" y="1203.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.5" y="1214.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.26%)</title><rect x="1012.5" y="1187.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1015.5" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.79%)</title><rect x="1015.6" y="1187.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.26%)</title><rect x="1025.0" y="1235.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.0" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.79%)</title><rect x="1028.1" y="1235.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.1" y="1246.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.26%)</title><rect x="1037.4" y="1235.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.4" y="1246.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 8.18%)</title><rect x="1040.6" y="1267.0" width="96.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.6" y="1278.0">Compile::Op..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="1040.6" y="1251.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.79%)</title><rect x="1043.7" y="1251.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.79%)</title><rect x="1043.7" y="1235.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.53%)</title><rect x="1043.7" y="1219.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1046.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.26%)</title><rect x="1046.8" y="1203.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.26%)</title><rect x="1046.8" y="1187.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="1198.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1046.8" y="1171.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.8" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1046.8" y="1155.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.8" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1046.8" y="1139.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.8" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1046.8" y="1123.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1049.9" y="1219.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.9" y="1230.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.53%)</title><rect x="1053.0" y="1251.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.0" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.26%)</title><rect x="1059.2" y="1251.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.2" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.26%)</title><rect x="1059.2" y="1235.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.2" y="1246.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.26%)</title><rect x="1059.2" y="1219.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.2" y="1230.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="1059.2" y="1203.0" width="3.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1062.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 5.28%)</title><rect x="1062.3" y="1251.0" width="62.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.3" y="1262.0">PhaseI..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.26%)</title><rect x="1062.3" y="1235.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.3" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.26%)</title><rect x="1065.5" y="1235.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.79%)</title><rect x="1068.6" y="1235.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.53%)</title><rect x="1071.7" y="1219.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.26%)</title><rect x="1074.8" y="1203.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 2.64%)</title><rect x="1077.9" y="1235.0" width="31.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.9" y="1246.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.26%)</title><rect x="1077.9" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 2.37%)</title><rect x="1081.0" y="1219.0" width="28.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.0" y="1230.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 2.11%)</title><rect x="1084.1" y="1203.0" width="25.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.1" y="1214.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.26%)</title><rect x="1105.9" y="1187.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1105.9" y="1171.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.53%)</title><rect x="1109.1" y="1235.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.53%)</title><rect x="1115.3" y="1235.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.3" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.26%)</title><rect x="1115.3" y="1219.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.26%)</title><rect x="1115.3" y="1203.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.26%)</title><rect x="1115.3" y="1187.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.3" y="1198.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="1115.3" y="1171.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1118.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.26%)</title><rect x="1118.4" y="1219.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.4" y="1230.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.26%)</title><rect x="1118.4" y="1203.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.26%)</title><rect x="1121.5" y="1235.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.26%)</title><rect x="1121.5" y="1219.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.5" y="1230.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1121.5" y="1203.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="1214.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1121.5" y="1187.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.5" y="1198.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1121.5" y="1171.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.5" y="1182.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.26%)</title><rect x="1121.5" y="1155.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.26%)</title><rect x="1124.6" y="1251.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.26%)</title><rect x="1124.6" y="1235.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.53%)</title><rect x="1127.7" y="1251.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.53%)</title><rect x="1127.7" y="1235.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.53%)</title><rect x="1127.7" y="1219.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="1230.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.53%)</title><rect x="1127.7" y="1203.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.7" y="1214.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.26%)</title><rect x="1127.7" y="1187.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="1198.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1127.7" y="1171.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="1182.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.26%)</title><rect x="1130.8" y="1187.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.8" y="1198.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.26%)</title><rect x="1130.8" y="1171.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.8" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.26%)</title><rect x="1130.8" y="1155.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.8" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1130.8" y="1139.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.8" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1130.8" y="1123.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="1134.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.26%)</title><rect x="1130.8" y="1107.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.8" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.26%)</title><rect x="1130.8" y="1091.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.26%)</title><rect x="1130.8" y="1075.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.26%)</title><rect x="1134.0" y="1251.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.0" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.26%)</title><rect x="1134.0" y="1235.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.0" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1134.0" y="1219.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.0" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.26%)</title><rect x="1134.0" y="1203.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.0" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 2.64%)</title><rect x="1137.1" y="1267.0" width="31.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="1278.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 2.64%)</title><rect x="1137.1" y="1251.0" width="31.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.1" y="1262.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 2.64%)</title><rect x="1137.1" y="1235.0" width="31.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="1246.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 2.64%)</title><rect x="1137.1" y="1219.0" width="31.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="1230.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 2.64%)</title><rect x="1137.1" y="1203.0" width="31.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="1214.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 2.37%)</title><rect x="1137.1" y="1187.0" width="28.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="1198.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.11%)</title><rect x="1137.1" y="1171.0" width="24.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="1182.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.11%)</title><rect x="1137.1" y="1155.0" width="24.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.11%)</title><rect x="1137.1" y="1139.0" width="24.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.11%)</title><rect x="1137.1" y="1123.0" width="24.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.26%)</title><rect x="1137.1" y="1107.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="1118.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.26%)</title><rect x="1137.1" y="1091.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="1102.0"></text>
</g>
<g>
<title>Phase::Phase(Phase::PhaseNumber) (1 samples, 0.26%)</title><rect x="1137.1" y="1075.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.85%)</title><rect x="1140.2" y="1107.0" width="21.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.2" y="1118.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.85%)</title><rect x="1140.2" y="1091.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.2" y="1102.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1140.2" y="1075.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1140.2" y="1059.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1140.2" y="1043.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1140.2" y="1027.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1140.2" y="1011.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1140.2" y="995.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1140.2" y="979.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1140.2" y="963.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1140.2" y="947.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1140.2" y="931.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1140.2" y="915.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1140.2" y="899.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1140.2" y="883.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1140.2" y="867.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1140.2" y="851.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1140.2" y="835.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1140.2" y="819.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1140.2" y="803.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.26%)</title><rect x="1140.2" y="787.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.2" y="798.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.26%)</title><rect x="1140.2" y="771.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.2" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.26%)</title><rect x="1140.2" y="755.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1143.3" y="787.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1143.3" y="771.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1143.3" y="755.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1143.3" y="739.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1143.3" y="723.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1143.3" y="707.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1143.3" y="691.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1143.3" y="675.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1143.3" y="659.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1143.3" y="643.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1143.3" y="627.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1143.3" y="611.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1143.3" y="595.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1143.3" y="579.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1143.3" y="563.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1143.3" y="547.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1143.3" y="531.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1143.3" y="515.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1143.3" y="499.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1143.3" y="483.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1143.3" y="467.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1143.3" y="451.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1143.3" y="435.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1143.3" y="419.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1143.3" y="403.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.3" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1143.3" y="387.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.3" y="398.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.26%)</title><rect x="1143.3" y="371.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="382.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.26%)</title><rect x="1143.3" y="355.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.3" y="366.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1143.3" y="339.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="350.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.26%)</title><rect x="1146.4" y="419.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.4" y="430.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.26%)</title><rect x="1146.4" y="403.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.4" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.26%)</title><rect x="1146.4" y="387.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="398.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.26%)</title><rect x="1146.4" y="371.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.4" y="382.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.26%)</title><rect x="1146.4" y="355.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.4" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.06%)</title><rect x="1149.5" y="1075.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1149.5" y="1059.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1149.5" y="1043.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1149.5" y="1027.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1149.5" y="1011.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1149.5" y="995.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1149.5" y="979.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1149.5" y="963.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1149.5" y="947.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1149.5" y="931.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1149.5" y="915.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1149.5" y="899.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.79%)</title><rect x="1149.5" y="883.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.79%)</title><rect x="1149.5" y="867.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.79%)</title><rect x="1149.5" y="851.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.79%)</title><rect x="1149.5" y="835.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.79%)</title><rect x="1149.5" y="819.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.79%)</title><rect x="1149.5" y="803.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1149.5" y="787.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1149.5" y="771.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1149.5" y="755.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1149.5" y="739.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1149.5" y="723.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1149.5" y="707.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1149.5" y="691.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1149.5" y="675.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1149.5" y="659.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1149.5" y="643.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1149.5" y="627.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1149.5" y="611.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1149.5" y="595.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1149.5" y="579.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1149.5" y="563.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1149.5" y="547.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1149.5" y="531.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1149.5" y="515.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1149.5" y="499.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1149.5" y="483.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1149.5" y="467.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1149.5" y="451.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1149.5" y="435.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1149.5" y="419.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1149.5" y="403.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1149.5" y="387.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1149.5" y="371.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1149.5" y="355.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1149.5" y="339.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1149.5" y="323.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1149.5" y="307.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1149.5" y="291.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1149.5" y="275.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1149.5" y="259.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1149.5" y="243.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1149.5" y="227.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1149.5" y="211.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="222.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1149.5" y="195.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="206.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.26%)</title><rect x="1149.5" y="179.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.26%)</title><rect x="1149.5" y="163.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.26%)</title><rect x="1149.5" y="147.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.5" y="158.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1149.5" y="131.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="142.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.26%)</title><rect x="1149.5" y="115.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="126.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.26%)</title><rect x="1149.5" y="99.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1149.5" y="83.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1149.5" y="67.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="78.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.26%)</title><rect x="1149.5" y="51.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="62.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.26%)</title><rect x="1149.5" y="35.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.26%)</title><rect x="1152.6" y="307.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.6" y="318.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1152.6" y="291.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1155.8" y="787.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1155.8" y="771.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.8" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.26%)</title><rect x="1155.8" y="755.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.26%)</title><rect x="1155.8" y="739.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.8" y="750.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1155.8" y="723.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.8" y="734.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1155.8" y="707.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.8" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1158.9" y="1059.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1158.9" y="1043.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1158.9" y="1027.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1158.9" y="1011.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1158.9" y="995.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1158.9" y="979.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1158.9" y="963.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1158.9" y="947.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1158.9" y="931.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1158.9" y="915.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1158.9" y="899.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1158.9" y="883.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1158.9" y="867.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1158.9" y="851.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="862.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1158.9" y="835.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="846.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1158.9" y="819.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1158.9" y="803.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1158.9" y="787.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1158.9" y="771.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1158.9" y="755.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1158.9" y="739.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1158.9" y="723.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1158.9" y="707.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1158.9" y="691.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1158.9" y="675.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1158.9" y="659.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="670.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1158.9" y="643.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="654.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.26%)</title><rect x="1158.9" y="627.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.0" y="1171.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.0" y="1155.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.0" y="1139.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.0" y="1123.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.0" y="1107.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.0" y="1091.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.26%)</title><rect x="1162.0" y="1075.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.26%)</title><rect x="1162.0" y="1059.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.0" y="1043.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.0" y="1027.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.0" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.26%)</title><rect x="1162.0" y="1011.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.26%)</title><rect x="1165.1" y="1187.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.1" y="1198.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.26%)</title><rect x="1165.1" y="1171.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.1" y="1182.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.26%)</title><rect x="1165.1" y="1155.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.1" y="1166.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.26%)</title><rect x="1165.1" y="1139.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.1" y="1150.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.26%)</title><rect x="1165.1" y="1123.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.1" y="1134.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.26%)</title><rect x="1168.2" y="1267.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="1278.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.26%)</title><rect x="1168.2" y="1251.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="1262.0"></text>
</g>
<g>
<title>CompileBroker::set_last_compile(CompilerThread*, methodHandle, bool, int) (1 samples, 0.26%)</title><rect x="1171.3" y="1299.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1310.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.26%)</title><rect x="1171.3" y="1283.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1294.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.79%)</title><rect x="1174.4" y="1299.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="1310.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.79%)</title><rect x="1174.4" y="1283.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.79%)</title><rect x="1174.4" y="1267.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1278.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.79%)</title><rect x="1174.4" y="1251.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="1262.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.26%)</title><rect x="1174.4" y="1235.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1246.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.26%)</title><rect x="1174.4" y="1219.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="1230.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.26%)</title><rect x="1174.4" y="1203.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.26%)</title><rect x="1174.4" y="1187.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1174.4" y="1171.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1174.4" y="1155.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1174.4" y="1139.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1174.4" y="1123.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1174.4" y="1107.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1174.4" y="1091.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1174.4" y="1075.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1174.4" y="1059.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1174.4" y="1043.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1174.4" y="1027.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1174.4" y="1011.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1174.4" y="995.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1174.4" y="979.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.26%)</title><rect x="1174.4" y="963.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1174.4" y="947.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1174.4" y="931.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="942.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1174.4" y="915.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="926.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.26%)</title><rect x="1174.4" y="899.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="910.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.26%)</title><rect x="1174.4" y="883.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="1174.4" y="867.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="1174.4" y="851.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.26%)</title><rect x="1174.4" y="835.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.26%)</title><rect x="1174.4" y="819.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.26%)</title><rect x="1177.5" y="1235.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1246.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.26%)</title><rect x="1177.5" y="1219.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>LIR_Assembler::logic_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.26%)</title><rect x="1177.5" y="1203.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>Assembler::andl(RegisterImpl*, int) (1 samples, 0.26%)</title><rect x="1177.5" y="1187.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.26%)</title><rect x="1180.7" y="1235.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1246.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.26%)</title><rect x="1180.7" y="1219.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="1230.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.26%)</title><rect x="1180.7" y="1203.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="1214.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.26%)</title><rect x="1180.7" y="1187.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1198.0"></text>
</g>
<g>
<title>LIRGenerator::new_register(BasicType) (1 samples, 0.26%)</title><rect x="1180.7" y="1171.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.26%)</title><rect x="1183.8" y="1331.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="1342.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.26%)</title><rect x="1183.8" y="1315.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="1326.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.26%)</title><rect x="1183.8" y="1299.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="1310.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.26%)</title><rect x="1183.8" y="1283.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="1294.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.26%)</title><rect x="1183.8" y="1267.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="1278.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="1183.8" y="1251.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.8" y="1262.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.26%)</title><rect x="1186.9" y="1363.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1374.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.26%)</title><rect x="1186.9" y="1347.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1358.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.26%)</title><rect x="1186.9" y="1331.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="1342.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.26%)</title><rect x="1186.9" y="1315.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="1326.0"></text>
</g>
<g>
<title>PerfString::set_string(char const*) (1 samples, 0.26%)</title><rect x="1186.9" y="1299.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="1310.0"></text>
</g>
</g>
</svg>
