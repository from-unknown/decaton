<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,271 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.08%)</title><rect x="10.9" y="2035.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.9" y="2046.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="11.9" y="2035.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.9" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="11.9" y="2019.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="14.9" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (253 samples, 19.91%)</title><rect x="12.8" y="2035.0" width="234.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.8" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (253 samples, 19.91%)</title><rect x="12.8" y="2019.0" width="234.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.8" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (253 samples, 19.91%)</title><rect x="12.8" y="2003.0" width="234.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.8" y="2014.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.08%)</title><rect x="13.7" y="1987.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="13.7" y="1971.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="13.7" y="1955.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="13.7" y="1939.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="13.7" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="13.7" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="13.7" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.7" y="1902.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="13.7" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.47%)</title><rect x="14.6" y="1987.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.47%)</title><rect x="14.6" y="1971.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.6" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.47%)</title><rect x="14.6" y="1955.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/544260150.accept (5 samples, 0.39%)</title><rect x="15.6" y="1939.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.39%)</title><rect x="15.6" y="1923.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="15.6" y="1907.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.31%)</title><rect x="16.5" y="1907.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.5" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.24%)</title><rect x="17.4" y="1891.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (181 samples, 14.24%)</title><rect x="20.2" y="1987.0" width="168.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="1998.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1605021575.accept (173 samples, 13.61%)</title><rect x="20.2" y="1971.0" width="160.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.2" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (172 samples, 13.53%)</title><rect x="21.1" y="1955.0" width="159.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.1" y="1966.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (155 samples, 12.20%)</title><rect x="22.1" y="1939.0" width="143.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="1950.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (155 samples, 12.20%)</title><rect x="22.1" y="1923.0" width="143.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (155 samples, 12.20%)</title><rect x="22.1" y="1907.0" width="143.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (155 samples, 12.20%)</title><rect x="22.1" y="1891.0" width="143.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="1902.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (155 samples, 12.20%)</title><rect x="22.1" y="1875.0" width="143.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="1886.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (155 samples, 12.20%)</title><rect x="22.1" y="1859.0" width="143.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.1" y="1870.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (110 samples, 8.65%)</title><rect x="62.0" y="1843.0" width="102.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.0" y="1854.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.73%)</title><rect x="64.8" y="1827.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.73%)</title><rect x="64.8" y="1811.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.73%)</title><rect x="64.8" y="1795.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.63%)</title><rect x="85.2" y="1827.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.63%)</title><rect x="85.2" y="1811.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.47%)</title><rect x="87.1" y="1795.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 6.06%)</title><rect x="92.6" y="1827.0" width="71.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.6" y="1838.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 6.06%)</title><rect x="92.6" y="1811.0" width="71.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.6" y="1822.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 5.98%)</title><rect x="92.6" y="1795.0" width="70.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.6" y="1806.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 5.90%)</title><rect x="92.6" y="1779.0" width="69.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.6" y="1790.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.90%)</title><rect x="92.6" y="1763.0" width="69.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.6" y="1774.0">sun/mis..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.16%)</title><rect x="93.6" y="1747.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="96.6" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 4.80%)</title><rect x="95.4" y="1747.0" width="56.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="98.4" y="1758.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="96.3" y="1731.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="99.3" y="1742.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="98.2" y="1731.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="101.2" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="100.1" y="1731.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="103.1" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 2.91%)</title><rect x="101.9" y="1731.0" width="34.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="104.9" y="1742.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.55%)</title><rect x="136.3" y="1731.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="139.3" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.79%)</title><rect x="142.8" y="1731.0" width="9.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="145.8" y="1742.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.63%)</title><rect x="152.0" y="1747.0" width="7.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="155.0" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="159.5" y="1747.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="162.5" y="1758.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="161.3" y="1747.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="164.3" y="1758.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="162.3" y="1779.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="163.2" y="1795.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.16%)</title><rect x="164.1" y="1843.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="164.1" y="1827.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="167.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="164.1" y="1811.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="164.1" y="1795.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="165.0" y="1811.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.0" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (12 samples, 0.94%)</title><rect x="166.0" y="1939.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (12 samples, 0.94%)</title><rect x="166.0" y="1923.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="176.2" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="176.2" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="176.2" y="1875.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="176.2" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="176.2" y="1843.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.31%)</title><rect x="177.1" y="1939.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.24%)</title><rect x="178.0" y="1923.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.24%)</title><rect x="178.0" y="1907.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.24%)</title><rect x="178.0" y="1891.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.24%)</title><rect x="178.0" y="1875.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.0" y="1886.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="180.8" y="1971.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="183.8" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="182.7" y="1971.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.7" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="182.7" y="1955.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.31%)</title><rect x="183.6" y="1971.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.31%)</title><rect x="183.6" y="1955.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.31%)</title><rect x="183.6" y="1939.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.31%)</title><rect x="183.6" y="1923.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.6" y="1934.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.16%)</title><rect x="185.5" y="1907.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="187.3" y="1971.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="187.3" y="1955.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.04%)</title><rect x="188.3" y="1987.0" width="59.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.3" y="1998.0">org/ap..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="188.3" y="1971.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="191.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (63 samples, 4.96%)</title><rect x="189.2" y="1971.0" width="58.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.2" y="1982.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 2.99%)</title><rect x="189.2" y="1955.0" width="35.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.2" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="189.2" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="189.2" y="1923.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 2.91%)</title><rect x="190.1" y="1939.0" width="34.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.1" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 2.91%)</title><rect x="190.1" y="1923.0" width="34.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.1" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 2.68%)</title><rect x="190.1" y="1907.0" width="31.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.1" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 2.68%)</title><rect x="190.1" y="1891.0" width="31.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.1" y="1902.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.26%)</title><rect x="192.0" y="1875.0" width="14.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.55%)</title><rect x="192.0" y="1859.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.55%)</title><rect x="192.0" y="1843.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.55%)</title><rect x="192.0" y="1827.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.55%)</title><rect x="192.0" y="1811.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.55%)</title><rect x="192.0" y="1795.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.55%)</title><rect x="192.0" y="1779.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.55%)</title><rect x="192.0" y="1763.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.71%)</title><rect x="198.5" y="1859.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.71%)</title><rect x="198.5" y="1843.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (8 samples, 0.63%)</title><rect x="198.5" y="1827.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.08%)</title><rect x="205.9" y="1827.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="205.9" y="1811.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="205.9" y="1795.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="205.9" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="208.9" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="205.9" y="1763.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="208.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="205.9" y="1747.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="208.9" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="205.9" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="208.9" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="205.9" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="208.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (16 samples, 1.26%)</title><rect x="206.8" y="1875.0" width="14.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.18%)</title><rect x="207.7" y="1859.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="207.7" y="1843.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="210.7" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="207.7" y="1827.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="210.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.39%)</title><rect x="208.7" y="1843.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.7" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.39%)</title><rect x="208.7" y="1827.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.7" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="211.5" y="1811.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="214.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (9 samples, 0.71%)</title><rect x="213.3" y="1843.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.3" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.71%)</title><rect x="213.3" y="1827.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="221.7" y="1907.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="221.7" y="1891.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="221.7" y="1875.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="221.7" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="222.6" y="1907.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="222.6" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="222.6" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="222.6" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="223.5" y="1907.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.87%)</title><rect x="224.5" y="1955.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.79%)</title><rect x="224.5" y="1939.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.71%)</title><rect x="224.5" y="1923.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.31%)</title><rect x="224.5" y="1907.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/129780753.accept (3 samples, 0.24%)</title><rect x="225.4" y="1891.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.16%)</title><rect x="226.3" y="1875.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="226.3" y="1859.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="226.3" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="226.3" y="1827.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="226.3" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="227.2" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="227.2" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.2" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="227.2" y="1811.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="228.2" y="1907.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="228.2" y="1891.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.2" y="1902.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="228.2" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="228.2" y="1859.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="228.2" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.2" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="228.2" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.31%)</title><rect x="229.1" y="1907.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.31%)</title><rect x="229.1" y="1891.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.31%)</title><rect x="229.1" y="1875.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.31%)</title><rect x="229.1" y="1859.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.31%)</title><rect x="229.1" y="1843.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.31%)</title><rect x="229.1" y="1827.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.31%)</title><rect x="229.1" y="1811.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.1" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="229.1" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.1" y="1806.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="229.1" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.1" y="1790.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="229.1" y="1763.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.1" y="1774.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="230.0" y="1795.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.0" y="1806.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="230.0" y="1779.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="230.0" y="1763.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.0" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="230.0" y="1747.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.0" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="230.0" y="1731.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.0" y="1742.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="230.0" y="1715.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="233.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/661197790.test (1 samples, 0.08%)</title><rect x="231.0" y="1715.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.0" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="231.9" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.9" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="231.9" y="1779.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.9" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="231.9" y="1763.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.9" y="1774.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="231.9" y="1747.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="234.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="232.8" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="232.8" y="1907.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="232.8" y="1891.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="232.8" y="1875.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="233.7" y="1939.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="233.7" y="1923.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="233.7" y="1907.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="234.7" y="1955.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.08%)</title><rect x="234.7" y="1939.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.39%)</title><rect x="235.6" y="1955.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.31%)</title><rect x="235.6" y="1939.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleDisconnections (1 samples, 0.08%)</title><rect x="235.6" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.24%)</title><rect x="236.5" y="1923.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.16%)</title><rect x="236.5" y="1907.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="236.5" y="1891.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="236.5" y="1875.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="236.5" y="1859.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="236.5" y="1843.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.5" y="1854.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="236.5" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.5" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="236.5" y="1811.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.5" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="236.5" y="1795.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.5" y="1806.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.address (1 samples, 0.08%)</title><rect x="236.5" y="1779.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="237.5" y="1891.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.08%)</title><rect x="237.5" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (1 samples, 0.08%)</title><rect x="237.5" y="1859.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.08%)</title><rect x="238.4" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.4" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="238.4" y="1891.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="241.4" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="238.4" y="1875.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="241.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="239.3" y="1939.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="239.3" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="239.3" y="1907.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="239.3" y="1891.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="239.3" y="1875.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="239.3" y="1859.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="239.3" y="1843.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="239.3" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="239.3" y="1811.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.write (1 samples, 0.08%)</title><rect x="239.3" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.3" y="1806.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.08%)</title><rect x="239.3" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.55%)</title><rect x="240.2" y="1955.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.55%)</title><rect x="240.2" y="1939.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="242.1" y="1923.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/157073659.accept (1 samples, 0.08%)</title><rect x="242.1" y="1907.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="242.1" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="242.1" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="242.1" y="1859.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="242.1" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="243.0" y="1923.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="243.0" y="1907.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="243.0" y="1891.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$PartitionData.equals (1 samples, 0.08%)</title><rect x="243.0" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="244.0" y="1923.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="244.0" y="1907.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="244.0" y="1891.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="244.0" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="244.0" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="244.0" y="1843.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="244.0" y="1827.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="244.0" y="1811.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="244.0" y="1795.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.0" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="244.0" y="1779.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.0" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="244.0" y="1763.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.0" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="244.0" y="1747.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="244.0" y="1731.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.0" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$186/2081728107.accept (1 samples, 0.08%)</title><rect x="244.0" y="1715.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="244.9" y="1923.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="244.9" y="1907.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="245.8" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="245.8" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="245.8" y="1891.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="245.8" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="245.8" y="1859.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="245.8" y="1843.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="246.7" y="1955.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.7" y="1939.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.7" y="1923.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.7" y="1907.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="246.7" y="1891.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.7" y="1902.0"></text>
</g>
<g>
<title>java/lang/Thread.run (809 samples, 63.65%)</title><rect x="247.7" y="2035.0" width="751.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.7" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (809 samples, 63.65%)</title><rect x="247.7" y="2019.0" width="751.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.7" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (809 samples, 63.65%)</title><rect x="247.7" y="2003.0" width="751.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.7" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/772955266.run (557 samples, 43.82%)</title><rect x="249.5" y="1987.0" width="517.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.5" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$2..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (557 samples, 43.82%)</title><rect x="249.5" y="1971.0" width="517.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.5" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$pu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (557 samples, 43.82%)</title><rect x="249.5" y="1955.0" width="517.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.5" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (557 samples, 43.82%)</title><rect x="249.5" y="1939.0" width="517.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.5" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedul..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="264.4" y="1923.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="267.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.55%)</title><rect x="265.3" y="1923.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.3" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.55%)</title><rect x="265.3" y="1907.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.55%)</title><rect x="265.3" y="1891.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="265.3" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.47%)</title><rect x="266.2" y="1875.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.2" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.31%)</title><rect x="268.1" y="1859.0" width="3.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="271.1" y="1870.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="268.1" y="1843.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="271.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (41 samples, 3.23%)</title><rect x="271.8" y="1923.0" width="38.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.8" y="1934.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 2.36%)</title><rect x="282.0" y="1907.0" width="27.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 2.36%)</title><rect x="282.0" y="1891.0" width="27.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.0" y="1902.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (30 samples, 2.36%)</title><rect x="282.0" y="1875.0" width="27.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.0" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.16%)</title><rect x="282.0" y="1859.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.08%)</title><rect x="282.0" y="1843.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.08%)</title><rect x="282.0" y="1827.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="283.0" y="1843.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (28 samples, 2.20%)</title><rect x="283.9" y="1859.0" width="26.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.9" y="1870.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1474125491.accept (28 samples, 2.20%)</title><rect x="283.9" y="1843.0" width="26.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.9" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (28 samples, 2.20%)</title><rect x="283.9" y="1827.0" width="26.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.9" y="1838.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (28 samples, 2.20%)</title><rect x="283.9" y="1811.0" width="26.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (25 samples, 1.97%)</title><rect x="286.7" y="1795.0" width="23.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.7" y="1806.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1742201343.accept (1 samples, 0.08%)</title><rect x="289.4" y="1779.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.4" y="1790.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="290.4" y="1779.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="293.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (19 samples, 1.49%)</title><rect x="292.2" y="1779.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.16%)</title><rect x="292.2" y="1763.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.16%)</title><rect x="292.2" y="1747.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.2" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.34%)</title><rect x="294.1" y="1763.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1742201343.accept (1 samples, 0.08%)</title><rect x="308.9" y="1747.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.9" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.08%)</title><rect x="308.9" y="1731.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.9" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (170 samples, 13.38%)</title><rect x="309.9" y="1923.0" width="157.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.9" y="1934.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (170 samples, 13.38%)</title><rect x="309.9" y="1907.0" width="157.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.9" y="1918.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (170 samples, 13.38%)</title><rect x="309.9" y="1891.0" width="157.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.9" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 13.30%)</title><rect x="309.9" y="1875.0" width="156.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.9" y="1886.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 13.30%)</title><rect x="309.9" y="1859.0" width="156.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.9" y="1870.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (169 samples, 13.30%)</title><rect x="309.9" y="1843.0" width="156.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.9" y="1854.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="316.4" y="1827.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="319.4" y="1838.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.63%)</title><rect x="318.2" y="1827.0" width="7.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="321.2" y="1838.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.63%)</title><rect x="318.2" y="1811.0" width="7.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="321.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (29 samples, 2.28%)</title><rect x="325.7" y="1827.0" width="26.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.7" y="1838.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.08%)</title><rect x="325.7" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.08%)</title><rect x="325.7" y="1795.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="325.7" y="1779.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.08%)</title><rect x="325.7" y="1763.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="325.7" y="1747.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.08%)</title><rect x="325.7" y="1731.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.08%)</title><rect x="325.7" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.7" y="1726.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="325.7" y="1699.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="325.7" y="1683.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.7" y="1694.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="325.7" y="1667.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.7" y="1678.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="325.7" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="328.7" y="1662.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="325.7" y="1635.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="328.7" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="325.7" y="1619.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="328.7" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="325.7" y="1603.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.7" y="1614.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="325.7" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="328.7" y="1598.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="325.7" y="1571.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="328.7" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="325.7" y="1555.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="328.7" y="1566.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="325.7" y="1539.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="328.7" y="1550.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="325.7" y="1523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="328.7" y="1534.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="325.7" y="1507.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="328.7" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.20%)</title><rect x="326.6" y="1811.0" width="26.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.6" y="1822.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="326.6" y="1795.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="329.6" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="326.6" y="1779.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="329.6" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="327.5" y="1763.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="330.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="327.5" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="330.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.05%)</title><rect x="328.4" y="1795.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.4" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (24 samples, 1.89%)</title><rect x="328.4" y="1779.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.4" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (24 samples, 1.89%)</title><rect x="328.4" y="1763.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.4" y="1774.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="350.7" y="1779.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="350.7" y="1763.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="350.7" y="1747.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="353.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.08%)</title><rect x="351.7" y="1763.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.08%)</title><rect x="351.7" y="1747.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.7" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="351.7" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="354.7" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="351.7" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="354.7" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="351.7" y="1699.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="354.7" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="351.7" y="1683.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="354.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (112 samples, 8.81%)</title><rect x="352.6" y="1827.0" width="104.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.6" y="1838.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.63%)</title><rect x="352.6" y="1811.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.63%)</title><rect x="352.6" y="1795.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.39%)</title><rect x="355.4" y="1779.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.02%)</title><rect x="360.0" y="1811.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.87%)</title><rect x="360.9" y="1795.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.55%)</title><rect x="361.9" y="1779.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.47%)</title><rect x="362.8" y="1763.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="366.5" y="1747.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.24%)</title><rect x="368.4" y="1779.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="371.1" y="1795.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (13 samples, 1.02%)</title><rect x="372.1" y="1811.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="377.6" y="1795.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.47%)</title><rect x="378.6" y="1795.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="381.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="383.2" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="383.2" y="1763.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="383.2" y="1747.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.2" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="383.2" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="386.2" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="383.2" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="386.2" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="383.2" y="1699.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="386.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (78 samples, 6.14%)</title><rect x="384.1" y="1811.0" width="72.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.1" y="1822.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (78 samples, 6.14%)</title><rect x="384.1" y="1795.0" width="72.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.1" y="1806.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 1.89%)</title><rect x="385.1" y="1779.0" width="22.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.1" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.55%)</title><rect x="386.0" y="1763.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.55%)</title><rect x="386.0" y="1747.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.55%)</title><rect x="386.0" y="1731.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.02%)</title><rect x="392.5" y="1763.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="404.6" y="1763.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="407.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="404.6" y="1747.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="406.4" y="1763.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 4.17%)</title><rect x="407.4" y="1779.0" width="49.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.4" y="1790.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 4.17%)</title><rect x="407.4" y="1763.0" width="49.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.4" y="1774.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (51 samples, 4.01%)</title><rect x="409.2" y="1747.0" width="47.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.2" y="1758.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.49%)</title><rect x="411.1" y="1731.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.63%)</title><rect x="415.7" y="1715.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.63%)</title><rect x="415.7" y="1699.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.63%)</title><rect x="415.7" y="1683.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.55%)</title><rect x="416.6" y="1667.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.55%)</title><rect x="416.6" y="1651.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.24%)</title><rect x="420.4" y="1635.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="423.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.24%)</title><rect x="420.4" y="1619.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="423.1" y="1715.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.31%)</title><rect x="425.0" y="1715.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.31%)</title><rect x="425.0" y="1699.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="427.8" y="1683.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.71%)</title><rect x="428.7" y="1731.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="431.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.55%)</title><rect x="430.6" y="1715.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.6" y="1726.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="430.6" y="1699.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="433.6" y="1710.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="430.6" y="1683.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.47%)</title><rect x="431.5" y="1699.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.47%)</title><rect x="431.5" y="1683.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.5" y="1694.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.47%)</title><rect x="431.5" y="1667.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="434.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="437.1" y="1731.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.63%)</title><rect x="438.9" y="1731.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.63%)</title><rect x="438.9" y="1715.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.63%)</title><rect x="438.9" y="1699.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.63%)</title><rect x="438.9" y="1683.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.9" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.39%)</title><rect x="441.7" y="1667.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.31%)</title><rect x="446.3" y="1731.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.31%)</title><rect x="446.3" y="1715.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.3" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.31%)</title><rect x="446.3" y="1699.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.55%)</title><rect x="450.1" y="1731.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.79%)</title><rect x="456.6" y="1827.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.6" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.08%)</title><rect x="456.6" y="1811.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.71%)</title><rect x="457.5" y="1811.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.71%)</title><rect x="457.5" y="1795.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.71%)</title><rect x="457.5" y="1779.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.71%)</title><rect x="457.5" y="1763.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.5" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="465.8" y="1827.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="468.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.08%)</title><rect x="466.8" y="1875.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="469.8" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="466.8" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="469.8" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="466.8" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="469.8" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="466.8" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="469.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (312 samples, 24.55%)</title><rect x="467.7" y="1923.0" width="289.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.7" y="1934.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="478.8" y="1907.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="481.8" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.55%)</title><rect x="479.8" y="1907.0" width="6.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="482.8" y="1918.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.55%)</title><rect x="479.8" y="1891.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="482.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (61 samples, 4.80%)</title><rect x="486.3" y="1907.0" width="56.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.3" y="1918.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (59 samples, 4.64%)</title><rect x="488.1" y="1891.0" width="54.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.1" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (56 samples, 4.41%)</title><rect x="490.9" y="1875.0" width="52.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.9" y="1886.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.31%)</title><rect x="490.9" y="1859.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.31%)</title><rect x="490.9" y="1843.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.31%)</title><rect x="490.9" y="1827.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.31%)</title><rect x="490.9" y="1811.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="494.6" y="1859.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.24%)</title><rect x="494.6" y="1843.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.24%)</title><rect x="494.6" y="1827.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.24%)</title><rect x="494.6" y="1811.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="497.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.16%)</title><rect x="495.6" y="1795.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.6" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (49 samples, 3.86%)</title><rect x="497.4" y="1859.0" width="45.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.4" y="1870.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 0.94%)</title><rect x="531.8" y="1843.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="533.6" y="1827.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.6" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="534.5" y="1827.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="537.5" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="534.5" y="1811.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.55%)</title><rect x="536.4" y="1827.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.39%)</title><rect x="542.9" y="1907.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="545.9" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.39%)</title><rect x="542.9" y="1891.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.9" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="546.6" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="546.6" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="549.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="546.6" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="549.6" y="1854.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.08%)</title><rect x="546.6" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="549.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (142 samples, 11.17%)</title><rect x="547.5" y="1907.0" width="131.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="550.5" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (131 samples, 10.31%)</title><rect x="547.5" y="1891.0" width="121.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.5" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (38 samples, 2.99%)</title><rect x="562.4" y="1875.0" width="35.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="565.4" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="572.6" y="1859.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="572.6" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (20 samples, 1.57%)</title><rect x="573.5" y="1859.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.34%)</title><rect x="576.3" y="1843.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="579.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.10%)</title><rect x="576.3" y="1827.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.10%)</title><rect x="576.3" y="1811.0" width="13.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="579.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.10%)</title><rect x="576.3" y="1795.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.3" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="576.3" y="1779.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="579.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="577.3" y="1779.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="580.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.94%)</title><rect x="578.2" y="1779.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="581.2" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.39%)</title><rect x="578.2" y="1763.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="581.2" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="578.2" y="1747.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.2" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="578.2" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="581.2" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="579.1" y="1747.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="582.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.24%)</title><rect x="580.0" y="1747.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="583.0" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.24%)</title><rect x="580.0" y="1731.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="583.0" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="580.0" y="1715.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="583.0" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="581.0" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="584.0" y="1726.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="581.9" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="584.9" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.55%)</title><rect x="582.8" y="1763.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="585.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.39%)</title><rect x="582.8" y="1747.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="585.8" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="582.8" y="1731.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="585.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.16%)</title><rect x="583.8" y="1731.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="586.8" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="585.6" y="1731.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="588.6" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="586.5" y="1731.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.5" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="587.5" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="590.5" y="1758.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.08%)</title><rect x="588.4" y="1747.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.24%)</title><rect x="589.3" y="1827.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="592.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="592.1" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="595.1" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="592.1" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="595.1" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="592.1" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="595.1" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="592.1" y="1811.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="595.1" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="592.1" y="1795.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.1" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.39%)</title><rect x="593.0" y="1859.0" width="4.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="596.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.55%)</title><rect x="597.7" y="1875.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (4 samples, 0.31%)</title><rect x="597.7" y="1859.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="600.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="597.7" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="600.7" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="597.7" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.7" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="597.7" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="600.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.24%)</title><rect x="598.6" y="1843.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.24%)</title><rect x="601.4" y="1859.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.24%)</title><rect x="601.4" y="1843.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.4" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="604.2" y="1875.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="607.2" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (69 samples, 5.43%)</title><rect x="605.1" y="1875.0" width="64.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="608.1" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (67 samples, 5.27%)</title><rect x="607.0" y="1859.0" width="62.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.0" y="1870.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.31%)</title><rect x="607.0" y="1843.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.31%)</title><rect x="607.0" y="1827.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.31%)</title><rect x="607.0" y="1811.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.31%)</title><rect x="607.0" y="1795.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="610.7" y="1843.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="610.7" y="1827.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="610.7" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="613.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="610.7" y="1795.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="613.7" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (62 samples, 4.88%)</title><rect x="611.6" y="1843.0" width="57.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.6" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.56%)</title><rect x="615.3" y="1827.0" width="53.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.3" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.60%)</title><rect x="638.5" y="1811.0" width="30.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.5" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="654.3" y="1795.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.94%)</title><rect x="655.2" y="1795.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.2" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="663.6" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="666.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="664.5" y="1779.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="667.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="665.5" y="1763.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="668.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="665.5" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="668.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="665.5" y="1731.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="668.5" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="665.5" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="668.5" y="1726.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.24%)</title><rect x="666.4" y="1795.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="669.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (11 samples, 0.87%)</title><rect x="669.2" y="1891.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="672.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (11 samples, 0.87%)</title><rect x="669.2" y="1875.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="672.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.87%)</title><rect x="669.2" y="1859.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.87%)</title><rect x="669.2" y="1843.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="672.2" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.31%)</title><rect x="674.7" y="1827.0" width="3.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="677.7" y="1838.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="676.6" y="1811.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="679.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="678.5" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (71 samples, 5.59%)</title><rect x="679.4" y="1907.0" width="65.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.4" y="1918.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (71 samples, 5.59%)</title><rect x="679.4" y="1891.0" width="65.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="682.4" y="1902.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (27 samples, 2.12%)</title><rect x="679.4" y="1875.0" width="25.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="682.4" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (27 samples, 2.12%)</title><rect x="679.4" y="1859.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.4" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 1.81%)</title><rect x="679.4" y="1843.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="682.4" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (11 samples, 0.87%)</title><rect x="688.7" y="1827.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="691.7" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="691.4" y="1811.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="694.4" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.55%)</title><rect x="692.4" y="1811.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="695.4" y="1822.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.55%)</title><rect x="692.4" y="1795.0" width="6.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="695.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="698.9" y="1827.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="699.8" y="1827.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="702.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="699.8" y="1811.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="702.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="699.8" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.31%)</title><rect x="700.7" y="1843.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="703.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="701.7" y="1827.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="704.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="702.6" y="1811.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="702.6" y="1795.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (13 samples, 1.02%)</title><rect x="704.4" y="1875.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="707.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="715.6" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="718.6" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="715.6" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="715.6" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="718.6" y="1838.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.08%)</title><rect x="715.6" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="718.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.08%)</title><rect x="716.5" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.08%)</title><rect x="716.5" y="1859.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.08%)</title><rect x="716.5" y="1843.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="719.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.08%)</title><rect x="716.5" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="716.5" y="1811.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="716.5" y="1795.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="717.4" y="1875.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="720.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="717.4" y="1859.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.08%)</title><rect x="719.3" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1529135445.get (1 samples, 0.08%)</title><rect x="719.3" y="1859.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.08%)</title><rect x="719.3" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="722.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.08%)</title><rect x="720.2" y="1875.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="720.2" y="1859.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/350105210.get$Lambda (1 samples, 0.08%)</title><rect x="720.2" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.71%)</title><rect x="721.2" y="1875.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="724.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.63%)</title><rect x="722.1" y="1859.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.1" y="1870.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="722.1" y="1843.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="725.1" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.39%)</title><rect x="724.9" y="1843.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.79%)</title><rect x="729.5" y="1875.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.5" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="736.9" y="1859.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="736.9" y="1843.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="739.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="736.9" y="1827.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="739.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="736.9" y="1811.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="739.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="736.9" y="1795.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="739.9" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="736.9" y="1779.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="739.9" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="736.9" y="1763.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="739.9" y="1774.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="736.9" y="1747.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="739.9" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="736.9" y="1731.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.9" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="737.9" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.55%)</title><rect x="738.8" y="1875.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="741.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.55%)</title><rect x="738.8" y="1859.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.55%)</title><rect x="738.8" y="1843.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.55%)</title><rect x="738.8" y="1827.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="741.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.47%)</title><rect x="738.8" y="1811.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.47%)</title><rect x="738.8" y="1795.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/350105210.accept (1 samples, 0.08%)</title><rect x="740.7" y="1779.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.7" y="1790.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="741.6" y="1779.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="744.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="744.4" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="745.3" y="1907.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.3" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="745.3" y="1891.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="748.3" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="745.3" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="748.3" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="745.3" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1379469240.linkToTargetMethod (1 samples, 0.08%)</title><rect x="746.2" y="1907.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="746.2" y="1891.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1962004789.get$Lambda (1 samples, 0.08%)</title><rect x="746.2" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.2" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="746.2" y="1859.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="749.2" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="746.2" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="749.2" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="746.2" y="1827.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.47%)</title><rect x="747.2" y="1907.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.47%)</title><rect x="747.2" y="1891.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.47%)</title><rect x="747.2" y="1875.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.16%)</title><rect x="747.2" y="1859.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.08%)</title><rect x="747.2" y="1843.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.08%)</title><rect x="747.2" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.2" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="747.2" y="1811.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="750.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="748.1" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.31%)</title><rect x="749.0" y="1859.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1962004789.accept (4 samples, 0.31%)</title><rect x="749.0" y="1843.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="752.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (4 samples, 0.31%)</title><rect x="749.0" y="1827.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.31%)</title><rect x="749.0" y="1811.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="752.0" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.31%)</title><rect x="749.0" y="1795.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="752.0" y="1806.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.31%)</title><rect x="749.0" y="1779.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="752.0" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="749.9" y="1763.0" width="2.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="752.9" y="1774.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="749.9" y="1747.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="752.9" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.39%)</title><rect x="752.7" y="1907.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="755.7" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.79%)</title><rect x="757.4" y="1923.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="760.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.79%)</title><rect x="757.4" y="1907.0" width="9.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="760.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.47%)</title><rect x="766.6" y="1987.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.47%)</title><rect x="766.6" y="1971.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.6" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.47%)</title><rect x="766.6" y="1955.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.47%)</title><rect x="766.6" y="1939.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (244 samples, 19.20%)</title><rect x="772.2" y="1987.0" width="226.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.2" y="1998.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (240 samples, 18.88%)</title><rect x="775.0" y="1971.0" width="222.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.0" y="1982.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (8 samples, 0.63%)</title><rect x="777.8" y="1955.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (212 samples, 16.68%)</title><rect x="785.2" y="1955.0" width="196.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.2" y="1966.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.34%)</title><rect x="792.6" y="1939.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.55%)</title><rect x="808.4" y="1939.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.47%)</title><rect x="809.4" y="1923.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (180 samples, 14.16%)</title><rect x="814.9" y="1939.0" width="167.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.9" y="1950.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (180 samples, 14.16%)</title><rect x="814.9" y="1923.0" width="167.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.9" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.16%)</title><rect x="821.4" y="1907.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="824.4" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.31%)</title><rect x="823.3" y="1907.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="826.3" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="827.0" y="1907.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="830.0" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (158 samples, 12.43%)</title><rect x="828.9" y="1907.0" width="146.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="831.9" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="833.5" y="1891.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.5" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.20%)</title><rect x="835.4" y="1891.0" width="25.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.4" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (14 samples, 1.10%)</title><rect x="840.0" y="1875.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.47%)</title><rect x="842.8" y="1859.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="845.8" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.31%)</title><rect x="844.6" y="1843.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="847.6" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="848.3" y="1859.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="851.3" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.24%)</title><rect x="850.2" y="1859.0" width="2.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="853.2" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.63%)</title><rect x="853.0" y="1875.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="856.0" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="860.4" y="1875.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.4" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="861.3" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="864.3" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="862.3" y="1891.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="865.3" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="864.1" y="1891.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="867.1" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.24%)</title><rect x="865.1" y="1891.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="868.1" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 3.15%)</title><rect x="867.8" y="1891.0" width="37.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="870.8" y="1902.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 4.41%)</title><rect x="905.0" y="1891.0" width="52.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="908.0" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.39%)</title><rect x="957.0" y="1891.0" width="4.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="960.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.39%)</title><rect x="961.6" y="1891.0" width="4.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="964.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="966.3" y="1891.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="969.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="969.0" y="1891.0" width="1.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="972.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="970.9" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="973.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="971.8" y="1891.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.8" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="974.6" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="975.5" y="1907.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="978.5" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="978.3" y="1907.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.3" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="979.3" y="1907.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (16 samples, 1.26%)</title><rect x="982.0" y="1955.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (16 samples, 1.26%)</title><rect x="982.0" y="1939.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="985.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (15 samples, 1.18%)</title><rect x="982.0" y="1923.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.08%)</title><rect x="996.0" y="1923.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="999.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.08%)</title><rect x="996.0" y="1907.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="999.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="996.0" y="1891.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="999.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="996.9" y="1955.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="996.9" y="1939.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.08%)</title><rect x="997.8" y="1971.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="998.7" y="2035.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1001.7" y="2046.0"></text>
</g>
<g>
<title>start_thread (205 samples, 16.13%)</title><rect x="999.7" y="2035.0" width="190.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1002.7" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (205 samples, 16.13%)</title><rect x="999.7" y="2019.0" width="190.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1002.7" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.57%)</title><rect x="999.7" y="2003.0" width="18.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.7" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.31%)</title><rect x="999.7" y="1987.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="1000.6" y="1971.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.6" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1000.6" y="1955.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1001.5" y="1955.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1004.5" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.10%)</title><rect x="1003.4" y="1987.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.4" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="1003.4" y="1971.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1006.4" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1003.4" y="1955.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.4" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.24%)</title><rect x="1004.3" y="1971.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.3" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1004.3" y="1955.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1007.3" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1004.3" y="1939.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.3" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1004.3" y="1923.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.3" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1004.3" y="1907.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.3" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1005.2" y="1939.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.2" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1005.2" y="1923.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.2" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1005.2" y="1907.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.2" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1005.2" y="1891.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1008.2" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1006.2" y="1955.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.2" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1006.2" y="1939.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.2" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1006.2" y="1923.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.2" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (10 samples, 0.79%)</title><rect x="1007.1" y="1971.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.1" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (10 samples, 0.79%)</title><rect x="1007.1" y="1955.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.1" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.71%)</title><rect x="1007.1" y="1939.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.1" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.71%)</title><rect x="1007.1" y="1923.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.1" y="1934.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.08%)</title><rect x="1007.1" y="1907.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.1" y="1918.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.63%)</title><rect x="1008.0" y="1907.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.0" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.63%)</title><rect x="1008.0" y="1891.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1011.0" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.39%)</title><rect x="1010.8" y="1875.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.8" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1011.7" y="1859.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.7" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1012.7" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.7" y="1870.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1013.6" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.6" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1013.6" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.6" y="1854.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.08%)</title><rect x="1013.6" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.6" y="1838.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="1014.5" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.5" y="1870.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int) (1 samples, 0.08%)</title><rect x="1015.5" y="1939.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.5" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="1015.5" y="1923.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1018.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1015.5" y="1907.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1018.5" y="1918.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1016.4" y="1987.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1019.4" y="1998.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.08%)</title><rect x="1016.4" y="1971.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.4" y="1982.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.08%)</title><rect x="1017.3" y="1987.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1020.3" y="1998.0"></text>
</g>
<g>
<title>JavaThread::run() (183 samples, 14.40%)</title><rect x="1018.2" y="2003.0" width="169.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.2" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (183 samples, 14.40%)</title><rect x="1018.2" y="1987.0" width="169.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.2" y="1998.0">JavaThread::thread_mai..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (183 samples, 14.40%)</title><rect x="1018.2" y="1971.0" width="169.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.2" y="1982.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (182 samples, 14.32%)</title><rect x="1018.2" y="1955.0" width="169.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.2" y="1966.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (181 samples, 14.24%)</title><rect x="1018.2" y="1939.0" width="168.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.2" y="1950.0">C2Compiler::compile_me..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (181 samples, 14.24%)</title><rect x="1018.2" y="1923.0" width="168.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.2" y="1934.0">Compile::Compile(ciEnv..</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 3.70%)</title><rect x="1018.2" y="1907.0" width="43.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.2" y="1918.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="1018.2" y="1891.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.2" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1018.2" y="1875.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.2" y="1886.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="1019.2" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.2" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1020.1" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.1" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1020.1" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1020.1" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.31%)</title><rect x="1021.0" y="1891.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.0" y="1902.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.08%)</title><rect x="1021.0" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.0" y="1886.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.08%)</title><rect x="1021.0" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1022.0" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1025.0" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.16%)</title><rect x="1022.9" y="1875.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.9" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1023.8" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1026.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="1024.7" y="1891.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="1024.7" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.16%)</title><rect x="1025.7" y="1891.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="1025.7" y="1875.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1025.7" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.7" y="1870.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.08%)</title><rect x="1025.7" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.7" y="1854.0"></text>
</g>
<g>
<title>loadINode::memory_operand() const (1 samples, 0.08%)</title><rect x="1025.7" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.7" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1026.6" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 2.91%)</title><rect x="1027.5" y="1891.0" width="34.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.5" y="1902.0">Ph..</text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.08%)</title><rect x="1027.5" y="1875.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="1028.5" y="1875.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1030.3" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.24%)</title><rect x="1031.2" y="1875.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.24%)</title><rect x="1031.2" y="1859.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1033.1" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.31%)</title><rect x="1034.0" y="1875.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.08%)</title><rect x="1036.8" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.55%)</title><rect x="1037.7" y="1875.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.24%)</title><rect x="1041.5" y="1859.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.5" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1041.5" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.5" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1042.4" y="1843.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="1044.2" y="1875.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="1044.2" y="1859.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.2" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1044.2" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.2" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1045.2" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1046.1" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.31%)</title><rect x="1047.0" y="1875.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1050.0" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.08%)</title><rect x="1048.9" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.9" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.08%)</title><rect x="1049.8" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.16%)</title><rect x="1050.7" y="1875.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.08%)</title><rect x="1051.7" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1052.6" y="1875.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1053.5" y="1875.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.5" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1053.5" y="1859.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.5" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1053.5" y="1843.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.5" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1053.5" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1056.5" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1054.5" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1055.4" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1056.3" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1057.2" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.2" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1057.2" y="1859.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1060.2" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.24%)</title><rect x="1058.2" y="1875.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.2" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1058.2" y="1859.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.2" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1060.0" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.0" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1061.0" y="1875.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1064.0" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (124 samples, 9.76%)</title><rect x="1061.9" y="1907.0" width="115.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.9" y="1918.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1061.9" y="1891.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1061.9" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1061.9" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.9" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1061.9" y="1843.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1061.9" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.9" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1061.9" y="1811.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.9" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1061.9" y="1795.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.9" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.24%)</title><rect x="1062.8" y="1891.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.24%)</title><rect x="1062.8" y="1875.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1062.8" y="1859.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1063.7" y="1843.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1063.7" y="1827.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1063.7" y="1811.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1795.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1779.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1763.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1747.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1731.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1715.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1699.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1683.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1667.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1651.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1635.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1619.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1603.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1587.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1571.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1555.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1539.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1523.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1507.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1491.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1475.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1459.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1443.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1427.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1411.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1395.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1379.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1363.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1347.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1331.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1315.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1063.7" y="1299.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.7" y="1310.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1063.7" y="1283.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1763.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1747.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1699.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1683.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1667.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1651.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1603.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1587.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1571.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1555.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1539.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1523.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1507.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1491.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1475.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1459.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1443.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1427.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1411.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1395.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1379.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1363.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1064.7" y="1347.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.7" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1065.6" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.6" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1065.6" y="1875.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1068.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (104 samples, 8.18%)</title><rect x="1066.5" y="1891.0" width="96.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.5" y="1902.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.24%)</title><rect x="1066.5" y="1875.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.31%)</title><rect x="1069.3" y="1875.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.16%)</title><rect x="1071.2" y="1859.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1072.1" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (93 samples, 7.32%)</title><rect x="1073.0" y="1875.0" width="86.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.0" y="1886.0">PhaseIdeal..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1077.7" y="1859.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.7" y="1870.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1077.7" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.7" y="1854.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1077.7" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.7" y="1838.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1077.7" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.7" y="1822.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1077.7" y="1795.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.7" y="1806.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1077.7" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.7" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (87 samples, 6.85%)</title><rect x="1078.6" y="1859.0" width="80.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.6" y="1870.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.24%)</title><rect x="1082.3" y="1843.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (80 samples, 6.29%)</title><rect x="1085.1" y="1843.0" width="74.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.1" y="1854.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (13 samples, 1.02%)</title><rect x="1146.4" y="1827.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1158.4" y="1827.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1159.4" y="1875.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.16%)</title><rect x="1159.4" y="1859.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1160.3" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1160.3" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.3" y="1838.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1160.3" y="1811.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1161.2" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1161.2" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1161.2" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1161.2" y="1811.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1162.1" y="1875.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1163.1" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1163.1" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.02%)</title><rect x="1164.0" y="1891.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1902.0"></text>
</g>
<g>
<title>DecodeNNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1164.0" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.94%)</title><rect x="1164.9" y="1875.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.9" y="1859.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.9" y="1843.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.9" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.16%)</title><rect x="1166.8" y="1859.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1167.7" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1168.6" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.31%)</title><rect x="1169.6" y="1859.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1173.3" y="1859.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1174.2" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.1" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.1" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1175.1" y="1843.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.1" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.1" y="1891.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1176.1" y="1875.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1176.1" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="1870.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1176.1" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="1854.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.47%)</title><rect x="1177.0" y="1907.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.47%)</title><rect x="1177.0" y="1891.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1177.0" y="1875.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1177.0" y="1859.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1177.0" y="1843.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1177.0" y="1827.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.0" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1177.0" y="1811.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1177.0" y="1795.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1177.0" y="1779.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1177.0" y="1763.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1177.0" y="1747.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1177.0" y="1731.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.0" y="1715.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="1726.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.0" y="1699.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.0" y="1683.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.0" y="1667.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.0" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.0" y="1651.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.0" y="1635.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.0" y="1619.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::apply_control(ciTypeFlow*, ciBytecodeStream*, ciTypeFlow::StateVector*) (1 samples, 0.08%)</title><rect x="1177.0" y="1603.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1177.9" y="1715.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1177.9" y="1699.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1177.9" y="1683.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1177.9" y="1667.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1177.9" y="1651.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.9" y="1635.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="1646.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.9" y="1619.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.9" y="1603.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.9" y="1587.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.9" y="1571.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.9" y="1555.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.9" y="1539.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.9" y="1523.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.9" y="1507.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.9" y="1491.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="1502.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.9" y="1475.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1486.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1177.9" y="1459.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1470.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1177.9" y="1443.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.9" y="1603.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.9" y="1587.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.9" y="1571.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.9" y="1555.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.9" y="1539.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.9" y="1523.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.9" y="1507.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.9" y="1491.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.9" y="1475.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.9" y="1459.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.9" y="1443.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.9" y="1427.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.9" y="1411.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.9" y="1395.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.9" y="1379.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.9" y="1363.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.9" y="1347.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.9" y="1331.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.9" y="1315.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.9" y="1299.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="1310.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1178.9" y="1283.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="1294.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.9" y="1267.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="1278.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1178.9" y="1251.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="1262.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1178.9" y="1235.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.08%)</title><rect x="1179.8" y="1635.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="1646.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.08%)</title><rect x="1179.8" y="1619.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="1630.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.8" y="1603.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="1614.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.8" y="1587.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="1598.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.7" y="1715.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.7" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.7" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.7" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.7" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.7" y="1635.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.7" y="1619.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1630.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.7" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1614.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.7" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1598.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.7" y="1571.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1582.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1180.7" y="1555.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1566.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1180.7" y="1539.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1181.6" y="1875.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="1886.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.6" y="1859.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1181.6" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1181.6" y="1827.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="1838.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1181.6" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1181.6" y="1795.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1181.6" y="1779.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="1790.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1181.6" y="1763.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="1774.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1182.6" y="1907.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1182.6" y="1891.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="1902.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1183.5" y="1891.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.5" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1184.4" y="1907.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1184.4" y="1891.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1902.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1184.4" y="1875.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1184.4" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="1870.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1854.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.08%)</title><rect x="1184.4" y="1827.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.4" y="1838.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.08%)</title><rect x="1185.4" y="1907.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.4" y="1918.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.08%)</title><rect x="1185.4" y="1891.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.4" y="1902.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.4" y="1875.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="1886.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.4" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.4" y="1870.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.08%)</title><rect x="1185.4" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1854.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.08%)</title><rect x="1185.4" y="1827.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1188.4" y="1838.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.3" y="1939.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.3" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.3" y="1923.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.3" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.3" y="1907.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.3" y="1891.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1186.3" y="1875.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1186.3" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="1870.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.08%)</title><rect x="1186.3" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="1854.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.08%)</title><rect x="1186.3" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="1838.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1187.2" y="1955.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1187.2" y="1939.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.2" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1187.2" y="1923.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="1934.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.08%)</title><rect x="1187.2" y="1907.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="1918.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.08%)</title><rect x="1187.2" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="2003.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1987.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.1" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.16%)</title><rect x="1188.1" y="1971.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.16%)</title><rect x="1188.1" y="1955.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1188.1" y="1939.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.1" y="1923.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.1" y="1907.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.1" y="1891.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.1" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.1" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1886.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_idle_monitors() (1 samples, 0.08%)</title><rect x="1189.1" y="1939.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="1950.0"></text>
</g>
</g>
</svg>
