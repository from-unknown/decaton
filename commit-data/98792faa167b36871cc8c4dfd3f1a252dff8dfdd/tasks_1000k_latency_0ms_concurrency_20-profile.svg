<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (1,175 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (258 samples, 21.96%)</title><rect x="11.0" y="883.0" width="259.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="894.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (258 samples, 21.96%)</title><rect x="11.0" y="867.0" width="259.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="878.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (256 samples, 21.79%)</title><rect x="12.0" y="851.0" width="257.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="862.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.17%)</title><rect x="12.0" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.17%)</title><rect x="12.0" y="819.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.09%)</title><rect x="12.0" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="13.0" y="803.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="13.0" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="13.0" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="13.0" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="13.0" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="13.0" y="723.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="16.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="14.0" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="14.0" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.43%)</title><rect x="15.0" y="835.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.43%)</title><rect x="15.0" y="819.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.43%)</title><rect x="15.0" y="803.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/1450438204.accept (5 samples, 0.43%)</title><rect x="15.0" y="787.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.43%)</title><rect x="15.0" y="771.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="16.0" y="755.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="17.0" y="739.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 15.91%)</title><rect x="20.0" y="835.0" width="187.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1558096862.accept (172 samples, 14.64%)</title><rect x="20.0" y="819.0" width="172.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.0" y="830.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (171 samples, 14.55%)</title><rect x="21.0" y="803.0" width="171.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.0" y="814.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="21.0" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="22.1" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (149 samples, 12.68%)</title><rect x="23.1" y="787.0" width="149.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.1" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (149 samples, 12.68%)</title><rect x="23.1" y="771.0" width="149.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="782.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (149 samples, 12.68%)</title><rect x="23.1" y="755.0" width="149.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.1" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1128096251.linkToTargetMethod (1 samples, 0.09%)</title><rect x="23.1" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/917819120.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="23.1" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/966286658.get$Lambda (1 samples, 0.09%)</title><rect x="23.1" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="23.1" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (148 samples, 12.60%)</title><rect x="24.1" y="739.0" width="148.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.1" y="750.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (148 samples, 12.60%)</title><rect x="24.1" y="723.0" width="148.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.1" y="734.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (148 samples, 12.60%)</title><rect x="24.1" y="707.0" width="148.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.1" y="718.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (99 samples, 8.43%)</title><rect x="66.2" y="691.0" width="99.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.2" y="702.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 1.11%)</title><rect x="66.2" y="675.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 1.11%)</title><rect x="66.2" y="659.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.11%)</title><rect x="66.2" y="643.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.68%)</title><rect x="79.3" y="675.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.68%)</title><rect x="79.3" y="659.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.34%)</title><rect x="80.3" y="643.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.3" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.34%)</title><rect x="80.3" y="627.0" width="4.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="83.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="84.3" y="643.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 6.64%)</title><rect x="87.3" y="675.0" width="78.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.3" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 6.64%)</title><rect x="87.3" y="659.0" width="78.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.3" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 6.64%)</title><rect x="87.3" y="643.0" width="78.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.3" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 6.64%)</title><rect x="87.3" y="627.0" width="78.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.3" y="638.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 6.38%)</title><rect x="90.3" y="611.0" width="75.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.3" y="622.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.62%)</title><rect x="90.3" y="595.0" width="66.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="93.3" y="606.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="92.3" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="95.3" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.74%)</title><rect x="93.4" y="579.0" width="44.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="96.4" y="590.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.62%)</title><rect x="137.5" y="579.0" width="19.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="140.5" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.68%)</title><rect x="156.6" y="595.0" width="8.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="159.6" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="164.7" y="595.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="167.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="165.7" y="691.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="165.7" y="675.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="165.7" y="659.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.26%)</title><rect x="166.7" y="691.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.26%)</title><rect x="166.7" y="675.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.26%)</title><rect x="166.7" y="659.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.26%)</title><rect x="169.7" y="691.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.26%)</title><rect x="169.7" y="675.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="172.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="169.7" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="169.7" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="170.7" y="659.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="171.7" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (13 samples, 1.11%)</title><rect x="172.7" y="787.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 1.11%)</title><rect x="172.7" y="771.0" width="13.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.94%)</title><rect x="174.7" y="755.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.94%)</title><rect x="174.7" y="739.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.26%)</title><rect x="182.7" y="723.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.26%)</title><rect x="182.7" y="707.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.26%)</title><rect x="182.7" y="691.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (6 samples, 0.51%)</title><rect x="185.7" y="787.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.51%)</title><rect x="185.7" y="771.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.51%)</title><rect x="185.7" y="755.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="191.8" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="191.8" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="191.8" y="755.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="191.8" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.09%)</title><rect x="191.8" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.09%)</title><rect x="191.8" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.8" y="718.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.34%)</title><rect x="192.8" y="819.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="195.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="196.8" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="196.8" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="196.8" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.8" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="196.8" y="771.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="199.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (10 samples, 0.85%)</title><rect x="197.8" y="819.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (10 samples, 0.85%)</title><rect x="197.8" y="803.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (10 samples, 0.85%)</title><rect x="197.8" y="787.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (10 samples, 0.85%)</title><rect x="197.8" y="771.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.8" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (7 samples, 0.60%)</title><rect x="200.8" y="755.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.19%)</title><rect x="207.8" y="835.0" width="61.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.8" y="846.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.19%)</title><rect x="207.8" y="819.0" width="61.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.8" y="830.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.98%)</title><rect x="208.8" y="803.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.8" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="209.8" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="209.8" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.8" y="782.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="209.8" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="212.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.81%)</title><rect x="210.9" y="787.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.9" y="798.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="210.9" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.64%)</title><rect x="211.9" y="771.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.9" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 2.30%)</title><rect x="211.9" y="755.0" width="27.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.9" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.30%)</title><rect x="211.9" y="739.0" width="27.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.9" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.02%)</title><rect x="211.9" y="723.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.34%)</title><rect x="219.9" y="707.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.34%)</title><rect x="219.9" y="691.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.34%)</title><rect x="219.9" y="675.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.34%)</title><rect x="219.9" y="659.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.34%)</title><rect x="219.9" y="643.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.34%)</title><rect x="219.9" y="627.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.34%)</title><rect x="219.9" y="611.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.11%)</title><rect x="223.9" y="723.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.02%)</title><rect x="224.9" y="707.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.51%)</title><rect x="224.9" y="691.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.51%)</title><rect x="224.9" y="675.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.9" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="229.9" y="659.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="232.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.51%)</title><rect x="230.9" y="691.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.51%)</title><rect x="230.9" y="675.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.17%)</title><rect x="237.0" y="723.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="239.0" y="755.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="239.0" y="739.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="239.0" y="723.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="239.0" y="707.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="239.0" y="691.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="239.0" y="675.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.09%)</title><rect x="239.0" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="240.0" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="240.0" y="659.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.09%)</title><rect x="240.0" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="241.0" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="241.0" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="241.0" y="723.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="241.0" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="241.0" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="241.0" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.09%)</title><rect x="242.0" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="242.0" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="242.0" y="723.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.0" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="242.0" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="242.0" y="691.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="243.0" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 1.02%)</title><rect x="244.0" y="803.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.85%)</title><rect x="244.0" y="787.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.85%)</title><rect x="244.0" y="771.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="244.0" y="755.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/1817264683.accept (2 samples, 0.17%)</title><rect x="244.0" y="739.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="244.0" y="723.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="244.0" y="707.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.17%)</title><rect x="244.0" y="691.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="244.0" y="675.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="244.0" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="245.0" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="245.0" y="659.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="245.0" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.17%)</title><rect x="246.0" y="755.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.17%)</title><rect x="246.0" y="739.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="246.0" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="246.0" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="246.0" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="247.0" y="723.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="247.0" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="247.0" y="691.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="247.0" y="675.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="247.0" y="659.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="247.0" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$248/1387542004.get (1 samples, 0.09%)</title><rect x="247.0" y="627.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="248.0" y="755.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="249.0" y="739.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="252.0" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="249.0" y="723.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="249.0" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="249.0" y="691.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="250.0" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="250.0" y="691.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="250.0" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="250.0" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="251.0" y="755.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.26%)</title><rect x="251.0" y="739.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="252.0" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="252.0" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="252.0" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="252.0" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="252.0" y="659.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.0" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="252.0" y="643.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="253.0" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="253.0" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="253.0" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="253.0" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="254.0" y="787.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="254.0" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="254.0" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.09%)</title><rect x="255.0" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.09%)</title><rect x="255.0" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.77%)</title><rect x="256.0" y="803.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.68%)</title><rect x="256.0" y="787.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 0.68%)</title><rect x="256.0" y="771.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.09%)</title><rect x="256.0" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.maybeCloseOldestConnection (1 samples, 0.09%)</title><rect x="257.0" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.0" y="766.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="257.0" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="260.0" y="750.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="257.0" y="723.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="260.0" y="734.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="257.0" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="260.0" y="718.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="257.0" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="260.0" y="702.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="257.0" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="260.0" y="686.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.09%)</title><rect x="257.0" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="260.0" y="670.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="257.0" y="643.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="260.0" y="654.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.09%)</title><rect x="257.0" y="627.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="260.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.51%)</title><rect x="258.1" y="755.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.09%)</title><rect x="258.1" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="258.1" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="258.1" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (5 samples, 0.43%)</title><rect x="259.1" y="739.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (5 samples, 0.43%)</title><rect x="259.1" y="723.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (5 samples, 0.43%)</title><rect x="259.1" y="707.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (5 samples, 0.43%)</title><rect x="259.1" y="691.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (5 samples, 0.43%)</title><rect x="259.1" y="675.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.43%)</title><rect x="259.1" y="659.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.1" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="261.1" y="643.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="264.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.17%)</title><rect x="262.1" y="643.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.09%)</title><rect x="262.1" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.09%)</title><rect x="262.1" y="611.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.09%)</title><rect x="262.1" y="595.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="263.1" y="627.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="263.1" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="263.1" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="263.1" y="579.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="263.1" y="563.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="264.1" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="264.1" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="264.1" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="264.1" y="739.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="267.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="264.1" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.09%)</title><rect x="264.1" y="707.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.26%)</title><rect x="265.1" y="803.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="265.1" y="787.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="265.1" y="771.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="265.1" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="265.1" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="265.1" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="265.1" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="265.1" y="691.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="265.1" y="675.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.1" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="265.1" y="659.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.1" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="265.1" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.1" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="265.1" y="627.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="266.1" y="771.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="267.1" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.1" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="267.1" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="267.1" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="267.1" y="707.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="267.1" y="691.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="267.1" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="268.1" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="268.1" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="268.1" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="268.1" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="268.1" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.1" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="268.1" y="723.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="271.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="269.1" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (824 samples, 70.13%)</title><rect x="270.1" y="883.0" width="827.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.1" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (824 samples, 70.13%)</title><rect x="270.1" y="867.0" width="827.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.1" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (824 samples, 70.13%)</title><rect x="270.1" y="851.0" width="827.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.1" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/966286658.run (586 samples, 49.87%)</title><rect x="270.1" y="835.0" width="588.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.1" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/96628665..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (586 samples, 49.87%)</title><rect x="270.1" y="819.0" width="588.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.1" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (586 samples, 49.87%)</title><rect x="270.1" y="803.0" width="588.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.1" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (584 samples, 49.70%)</title><rect x="270.1" y="787.0" width="586.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.1" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="279.1" y="771.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="282.1" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="279.1" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="282.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="280.1" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="280.1" y="755.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="280.1" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="280.1" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.1" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.09%)</title><rect x="280.1" y="707.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="280.1" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="280.1" y="675.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="280.1" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="280.1" y="643.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.02%)</title><rect x="281.1" y="771.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.1" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.02%)</title><rect x="281.1" y="755.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.02%)</title><rect x="281.1" y="739.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="281.1" y="723.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="283.2" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.77%)</title><rect x="284.2" y="723.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.2" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="287.2" y="707.0" width="6.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="290.2" y="718.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="287.2" y="691.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="290.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (47 samples, 4.00%)</title><rect x="293.2" y="771.0" width="47.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.2" y="782.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (47 samples, 4.00%)</title><rect x="293.2" y="755.0" width="47.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.2" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (47 samples, 4.00%)</title><rect x="293.2" y="739.0" width="47.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="750.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (3 samples, 0.26%)</title><rect x="305.3" y="723.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 2.72%)</title><rect x="308.3" y="723.0" width="32.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.3" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.26%)</title><rect x="308.3" y="707.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.17%)</title><rect x="308.3" y="691.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.17%)</title><rect x="308.3" y="675.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$305/1520522553.accept (1 samples, 0.09%)</title><rect x="308.3" y="659.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.3" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="309.3" y="659.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="312.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="310.3" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (29 samples, 2.47%)</title><rect x="311.3" y="707.0" width="29.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.3" y="718.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$305/1520522553.accept (29 samples, 2.47%)</title><rect x="311.3" y="691.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.3" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (29 samples, 2.47%)</title><rect x="311.3" y="675.0" width="29.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.3" y="686.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (27 samples, 2.30%)</title><rect x="313.3" y="659.0" width="27.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.3" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (27 samples, 2.30%)</title><rect x="313.3" y="643.0" width="27.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.3" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (27 samples, 2.30%)</title><rect x="313.3" y="627.0" width="27.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.3" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.60%)</title><rect x="313.3" y="611.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.60%)</title><rect x="313.3" y="595.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/94344172.accept (1 samples, 0.09%)</title><rect x="319.3" y="579.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.70%)</title><rect x="320.3" y="611.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (175 samples, 14.89%)</title><rect x="340.4" y="771.0" width="175.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.4" y="782.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (175 samples, 14.89%)</title><rect x="340.4" y="755.0" width="175.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.4" y="766.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (175 samples, 14.89%)</title><rect x="340.4" y="739.0" width="175.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.4" y="750.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (174 samples, 14.81%)</title><rect x="340.4" y="723.0" width="174.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.4" y="734.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (174 samples, 14.81%)</title><rect x="340.4" y="707.0" width="174.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="343.4" y="718.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (174 samples, 14.81%)</title><rect x="340.4" y="691.0" width="174.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.4" y="702.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (70 samples, 5.96%)</title><rect x="340.4" y="675.0" width="70.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.4" y="686.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (38 samples, 3.23%)</title><rect x="340.4" y="659.0" width="38.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.4" y="670.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="340.4" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="343.4" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="340.4" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="343.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="340.4" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="340.4" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.4" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="340.4" y="579.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="343.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (33 samples, 2.81%)</title><rect x="341.4" y="643.0" width="33.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.4" y="654.0">co..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.85%)</title><rect x="360.5" y="627.0" width="10.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="363.5" y="638.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="365.5" y="611.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="368.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.34%)</title><rect x="370.5" y="627.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="370.5" y="611.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.34%)</title><rect x="370.5" y="595.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.34%)</title><rect x="370.5" y="579.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.34%)</title><rect x="370.5" y="563.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (4 samples, 0.34%)</title><rect x="374.5" y="643.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="374.5" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.5" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.26%)</title><rect x="375.5" y="627.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.5" y="638.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.17%)</title><rect x="376.6" y="611.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="379.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (32 samples, 2.72%)</title><rect x="378.6" y="659.0" width="32.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.6" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.26%)</title><rect x="378.6" y="643.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="380.6" y="627.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (29 samples, 2.47%)</title><rect x="381.6" y="643.0" width="29.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.6" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="388.6" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.43%)</title><rect x="389.6" y="627.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.26%)</title><rect x="391.6" y="611.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.43%)</title><rect x="394.6" y="627.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.43%)</title><rect x="394.6" y="611.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.43%)</title><rect x="394.6" y="595.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (11 samples, 0.94%)</title><rect x="399.7" y="627.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.17%)</title><rect x="408.7" y="611.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="408.7" y="595.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="411.7" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="409.7" y="579.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="412.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="409.7" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="412.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (97 samples, 8.26%)</title><rect x="410.7" y="675.0" width="97.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="413.7" y="686.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (10 samples, 0.85%)</title><rect x="410.7" y="659.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (10 samples, 0.85%)</title><rect x="410.7" y="643.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="413.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.43%)</title><rect x="412.7" y="627.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.26%)</title><rect x="414.7" y="611.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 0.26%)</title><rect x="417.7" y="627.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.43%)</title><rect x="420.7" y="659.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.43%)</title><rect x="420.7" y="643.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="422.7" y="627.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.09%)</title><rect x="424.8" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.19%)</title><rect x="425.8" y="659.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.19%)</title><rect x="425.8" y="643.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.51%)</title><rect x="430.8" y="627.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.43%)</title><rect x="431.8" y="611.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="433.8" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="436.8" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="433.8" y="579.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="436.8" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="433.8" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="436.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="433.8" y="547.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="436.8" y="558.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="433.8" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="436.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="434.8" y="595.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="437.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="436.8" y="627.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="436.8" y="611.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.26%)</title><rect x="439.8" y="659.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (65 samples, 5.53%)</title><rect x="442.8" y="659.0" width="65.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="445.8" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.09%)</title><rect x="442.8" y="643.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="445.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 5.45%)</title><rect x="443.8" y="643.0" width="64.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="446.8" y="654.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (1 samples, 0.09%)</title><rect x="444.8" y="627.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.62%)</title><rect x="445.8" y="627.0" width="19.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="445.8" y="611.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="445.8" y="595.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="445.8" y="579.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.26%)</title><rect x="445.8" y="563.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.09%)</title><rect x="447.9" y="547.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.11%)</title><rect x="448.9" y="611.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (9 samples, 0.77%)</title><rect x="448.9" y="595.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="451.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.26%)</title><rect x="454.9" y="579.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.34%)</title><rect x="457.9" y="595.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.34%)</title><rect x="457.9" y="579.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.34%)</title><rect x="457.9" y="563.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.34%)</title><rect x="457.9" y="547.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="461.9" y="611.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="464.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="461.9" y="595.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 3.66%)</title><rect x="464.9" y="627.0" width="43.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.9" y="638.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="464.9" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 3.57%)</title><rect x="465.9" y="611.0" width="42.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.9" y="622.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.57%)</title><rect x="465.9" y="595.0" width="42.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.9" y="606.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.53%)</title><rect x="476.0" y="579.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.43%)</title><rect x="482.0" y="563.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.43%)</title><rect x="482.0" y="547.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.43%)</title><rect x="482.0" y="531.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="482.0" y="515.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.26%)</title><rect x="484.0" y="515.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.17%)</title><rect x="487.0" y="563.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.17%)</title><rect x="487.0" y="547.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.43%)</title><rect x="489.0" y="563.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.43%)</title><rect x="489.0" y="547.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.43%)</title><rect x="489.0" y="531.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="494.1" y="579.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.60%)</title><rect x="496.1" y="579.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.60%)</title><rect x="496.1" y="563.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="499.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.60%)</title><rect x="496.1" y="547.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="499.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.60%)</title><rect x="496.1" y="531.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.1" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.60%)</title><rect x="496.1" y="515.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.1" y="526.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.51%)</title><rect x="496.1" y="499.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.1" y="510.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.09%)</title><rect x="501.1" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.1" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.09%)</title><rect x="502.1" y="499.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.43%)</title><rect x="503.1" y="579.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="503.1" y="563.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="503.1" y="547.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="507.1" y="531.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.60%)</title><rect x="508.1" y="675.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.60%)</title><rect x="508.1" y="659.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="511.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.60%)</title><rect x="508.1" y="643.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="508.1" y="627.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.26%)</title><rect x="509.1" y="627.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.26%)</title><rect x="512.1" y="627.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="512.1" y="611.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="515.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.09%)</title><rect x="515.1" y="723.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="515.1" y="707.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="518.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="515.1" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="518.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (333 samples, 28.34%)</title><rect x="516.1" y="771.0" width="334.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.1" y="782.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="517.1" y="755.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="517.1" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.1" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="517.1" y="723.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.1" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="517.1" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="517.1" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (58 samples, 4.94%)</title><rect x="518.2" y="755.0" width="58.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.2" y="766.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (58 samples, 4.94%)</title><rect x="518.2" y="739.0" width="58.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="521.2" y="750.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (57 samples, 4.85%)</title><rect x="519.2" y="723.0" width="57.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.2" y="734.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.34%)</title><rect x="521.2" y="707.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="524.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.34%)</title><rect x="521.2" y="691.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.34%)</title><rect x="521.2" y="675.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="524.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.34%)</title><rect x="521.2" y="659.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="525.2" y="707.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="525.2" y="691.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="528.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="525.2" y="675.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="525.2" y="659.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.17%)</title><rect x="525.2" y="643.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (49 samples, 4.17%)</title><rect x="527.2" y="707.0" width="49.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.2" y="718.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.53%)</title><rect x="558.3" y="691.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.34%)</title><rect x="562.3" y="675.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="565.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.34%)</title><rect x="566.4" y="675.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="569.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.26%)</title><rect x="567.4" y="659.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.51%)</title><rect x="570.4" y="675.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="573.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskData (2 samples, 0.17%)</title><rect x="576.4" y="755.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.09%)</title><rect x="577.4" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="580.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="578.4" y="755.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="581.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="578.4" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="581.4" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.34%)</title><rect x="579.4" y="739.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (164 samples, 13.96%)</title><rect x="583.4" y="755.0" width="164.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="586.4" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (144 samples, 12.26%)</title><rect x="591.5" y="739.0" width="144.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.5" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (28 samples, 2.38%)</title><rect x="603.5" y="723.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.5" y="734.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (14 samples, 1.19%)</title><rect x="611.5" y="707.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.5" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 1.19%)</title><rect x="611.5" y="691.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="614.5" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.85%)</title><rect x="611.5" y="675.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.5" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.85%)</title><rect x="611.5" y="659.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.5" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.85%)</title><rect x="611.5" y="643.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.85%)</title><rect x="611.5" y="627.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="614.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.34%)</title><rect x="611.5" y="611.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="614.5" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="611.5" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="614.5" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="612.6" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.6" y="606.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="613.6" y="595.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="616.6" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.51%)</title><rect x="615.6" y="611.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="618.6" y="622.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="616.6" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.34%)</title><rect x="617.6" y="595.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="620.6" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="617.6" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="620.6" y="590.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.17%)</title><rect x="618.6" y="579.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="621.6" y="590.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="620.6" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="623.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="621.6" y="675.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.6" y="686.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.34%)</title><rect x="625.6" y="707.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="628.6" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="629.6" y="707.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="632.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (23 samples, 1.96%)</title><rect x="631.6" y="723.0" width="23.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.6" y="734.0">j..</text>
</g>
<g>
<title>java/lang/Integer.toString (11 samples, 0.94%)</title><rect x="631.6" y="707.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="634.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="631.6" y="691.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="634.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="631.6" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="634.6" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (10 samples, 0.85%)</title><rect x="632.6" y="691.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.6" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="641.7" y="675.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.toString (12 samples, 1.02%)</title><rect x="642.7" y="707.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (12 samples, 1.02%)</title><rect x="642.7" y="691.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.7" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="654.7" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.7" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="655.7" y="723.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="658.7" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 6.47%)</title><rect x="659.8" y="723.0" width="76.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.8" y="734.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 6.30%)</title><rect x="661.8" y="707.0" width="74.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.8" y="718.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.43%)</title><rect x="661.8" y="691.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="664.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.43%)</title><rect x="661.8" y="675.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="664.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.43%)</title><rect x="661.8" y="659.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.43%)</title><rect x="661.8" y="643.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="664.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="666.8" y="691.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="669.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.34%)</title><rect x="666.8" y="675.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="669.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.34%)</title><rect x="666.8" y="659.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.34%)</title><rect x="666.8" y="643.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.26%)</title><rect x="667.8" y="627.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 5.53%)</title><rect x="670.8" y="691.0" width="65.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.8" y="702.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 5.11%)</title><rect x="675.8" y="675.0" width="60.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.8" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 2.55%)</title><rect x="705.9" y="659.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.9" y="670.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="723.0" y="643.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="726.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.77%)</title><rect x="726.0" y="643.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="729.0" y="654.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="735.1" y="643.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="738.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.51%)</title><rect x="736.1" y="739.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.51%)</title><rect x="736.1" y="723.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.51%)</title><rect x="736.1" y="707.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.51%)</title><rect x="736.1" y="691.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.1" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.51%)</title><rect x="742.1" y="739.0" width="6.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="745.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (74 samples, 6.30%)</title><rect x="748.1" y="755.0" width="74.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.1" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (74 samples, 6.30%)</title><rect x="748.1" y="739.0" width="74.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.1" y="750.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/647851977.process (30 samples, 2.55%)</title><rect x="750.1" y="723.0" width="30.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.1" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (29 samples, 2.47%)</title><rect x="750.1" y="707.0" width="29.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.1" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (27 samples, 2.30%)</title><rect x="751.1" y="691.0" width="27.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="754.1" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="764.2" y="675.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.2" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="764.2" y="659.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.2" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="764.2" y="643.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.2" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="764.2" y="627.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.85%)</title><rect x="766.2" y="675.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="769.2" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.68%)</title><rect x="768.2" y="659.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="771.2" y="670.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="769.2" y="643.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="772.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="776.2" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="776.2" y="659.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="776.2" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.09%)</title><rect x="777.3" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="778.3" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="778.3" y="675.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="778.3" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="781.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="778.3" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="778.3" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="779.3" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (7 samples, 0.60%)</title><rect x="780.3" y="723.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="783.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.09%)</title><rect x="786.3" y="707.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (7 samples, 0.60%)</title><rect x="787.3" y="723.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="787.3" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (6 samples, 0.51%)</title><rect x="788.3" y="707.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 0.51%)</title><rect x="788.3" y="691.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 0.51%)</title><rect x="788.3" y="675.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.51%)</title><rect x="788.3" y="659.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.51%)</title><rect x="788.3" y="643.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="794.3" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="794.3" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="795.3" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="798.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1203013378.get (1 samples, 0.09%)</title><rect x="795.3" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="798.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.09%)</title><rect x="795.3" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="798.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="796.3" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="796.3" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.3" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="796.3" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.85%)</title><rect x="797.3" y="723.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.60%)</title><rect x="800.3" y="707.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.3" y="718.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.43%)</title><rect x="800.3" y="691.0" width="5.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="803.3" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="805.4" y="691.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="808.4" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.68%)</title><rect x="807.4" y="723.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="814.4" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="815.4" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.51%)</title><rect x="816.4" y="723.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="819.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.51%)</title><rect x="816.4" y="707.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.51%)</title><rect x="816.4" y="691.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="816.4" y="675.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="819.4" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="816.4" y="659.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="819.4" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="816.4" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="819.4" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.09%)</title><rect x="816.4" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="819.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.43%)</title><rect x="817.4" y="675.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="820.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.26%)</title><rect x="817.4" y="659.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.26%)</title><rect x="817.4" y="643.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/446913547.accept (1 samples, 0.09%)</title><rect x="819.4" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="820.4" y="659.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="823.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (10 samples, 0.85%)</title><rect x="822.4" y="755.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="825.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (7 samples, 0.60%)</title><rect x="822.4" y="739.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="825.4" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.60%)</title><rect x="822.4" y="723.0" width="7.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="825.4" y="734.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="823.4" y="707.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="826.4" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.26%)</title><rect x="829.5" y="739.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.5" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.17%)</title><rect x="830.5" y="723.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="832.5" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="835.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="832.5" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="835.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="832.5" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.5" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.09%)</title><rect x="833.5" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.5" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.09%)</title><rect x="833.5" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1157189602.linkToTargetMethod (1 samples, 0.09%)</title><rect x="833.5" y="723.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/387219603.invokeStatic_D_L (1 samples, 0.09%)</title><rect x="833.5" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.5" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$288/1912074092.get$Lambda (1 samples, 0.09%)</title><rect x="833.5" y="691.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.5" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1073725082.linkToTargetMethod (2 samples, 0.17%)</title><rect x="834.5" y="755.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.5" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L3_L (2 samples, 0.17%)</title><rect x="834.5" y="739.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/900912289.get$Lambda (2 samples, 0.17%)</title><rect x="834.5" y="723.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="837.5" y="734.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="835.5" y="707.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="838.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.19%)</title><rect x="836.5" y="755.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="839.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.19%)</title><rect x="836.5" y="739.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.19%)</title><rect x="836.5" y="723.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.77%)</title><rect x="836.5" y="707.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="839.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.77%)</title><rect x="836.5" y="691.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="839.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 0.77%)</title><rect x="836.5" y="675.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/900912289.accept (4 samples, 0.34%)</title><rect x="839.5" y="659.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.5" y="670.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="843.5" y="659.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="846.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.43%)</title><rect x="845.5" y="707.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="848.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/900912289.accept (5 samples, 0.43%)</title><rect x="845.5" y="691.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="848.5" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="845.5" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="848.5" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="845.5" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="845.5" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="845.5" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="848.5" y="638.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="845.5" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.5" y="622.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="845.5" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="848.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (4 samples, 0.34%)</title><rect x="846.5" y="675.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.34%)</title><rect x="846.5" y="659.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.5" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.34%)</title><rect x="846.5" y="643.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.5" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.34%)</title><rect x="846.5" y="627.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="849.5" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="847.5" y="611.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="850.5" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="847.5" y="595.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="850.5" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="849.6" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="852.6" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.51%)</title><rect x="850.6" y="771.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="850.6" y="755.0" width="6.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="853.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.17%)</title><rect x="856.6" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.6" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.17%)</title><rect x="856.6" y="771.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="859.6" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.17%)</title><rect x="856.6" y="755.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="859.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="856.6" y="739.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="859.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="856.6" y="723.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="859.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="856.6" y="707.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="856.6" y="691.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="859.6" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="856.6" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.6" y="686.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="857.6" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="860.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="858.6" y="835.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="861.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="858.6" y="819.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="858.6" y="803.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="858.6" y="787.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (236 samples, 20.09%)</title><rect x="860.6" y="835.0" width="237.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="863.6" y="846.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (233 samples, 19.83%)</title><rect x="863.6" y="819.0" width="234.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.6" y="830.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (223 samples, 18.98%)</title><rect x="872.7" y="803.0" width="223.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.7" y="814.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.62%)</title><rect x="878.7" y="787.0" width="19.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (16 samples, 1.36%)</title><rect x="897.8" y="787.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.36%)</title><rect x="897.8" y="771.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="900.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.36%)</title><rect x="897.8" y="755.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="900.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.36%)</title><rect x="897.8" y="739.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.51%)</title><rect x="913.8" y="787.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="916.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.51%)</title><rect x="913.8" y="771.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="916.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (176 samples, 14.98%)</title><rect x="919.9" y="787.0" width="176.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.9" y="798.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (176 samples, 14.98%)</title><rect x="919.9" y="771.0" width="176.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.9" y="782.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="923.9" y="755.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.26%)</title><rect x="926.9" y="755.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.9" y="766.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="929.9" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.9" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="930.9" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.9" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (157 samples, 13.36%)</title><rect x="931.9" y="755.0" width="157.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="934.9" y="766.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="936.9" y="739.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.9" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="938.9" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.9" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.62%)</title><rect x="939.9" y="739.0" width="19.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.9" y="750.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.77%)</title><rect x="947.0" y="723.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.0" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.26%)</title><rect x="949.0" y="707.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.0" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="951.0" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.0" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.34%)</title><rect x="952.0" y="707.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="955.0" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.26%)</title><rect x="956.0" y="723.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.0" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="959.0" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="960.0" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="963.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="961.0" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.0" y="750.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.94%)</title><rect x="962.0" y="739.0" width="11.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="965.0" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.81%)</title><rect x="973.1" y="739.0" width="33.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="976.1" y="750.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (62 samples, 5.28%)</title><rect x="1006.2" y="739.0" width="62.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1009.2" y="750.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.34%)</title><rect x="1068.5" y="739.0" width="4.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1071.5" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1072.5" y="739.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1075.5" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.26%)</title><rect x="1073.5" y="739.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1076.5" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1076.5" y="739.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1079.5" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="1078.5" y="739.0" width="2.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1081.5" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.34%)</title><rect x="1080.5" y="739.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1083.5" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.26%)</title><rect x="1084.6" y="739.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.6" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="1087.6" y="739.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1090.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.34%)</title><rect x="1089.6" y="755.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1092.6" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1093.6" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.6" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1094.6" y="755.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="1096.6" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1099.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1097.6" y="883.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1097.6" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1100.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1097.6" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1097.6" y="835.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1100.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1097.6" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1100.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1097.6" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1100.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1097.6" y="787.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1100.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1097.6" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1100.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1097.6" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1100.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$283/1383293993.iterator (1 samples, 0.09%)</title><rect x="1097.6" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1100.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batchIterator (1 samples, 0.09%)</title><rect x="1097.6" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1100.6" y="734.0"></text>
</g>
<g>
<title>start_thread (91 samples, 7.74%)</title><rect x="1098.6" y="883.0" width="91.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1101.6" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 7.74%)</title><rect x="1098.6" y="867.0" width="91.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1101.6" y="878.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.53%)</title><rect x="1098.6" y="851.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.6" y="862.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.43%)</title><rect x="1098.6" y="835.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.6" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.43%)</title><rect x="1098.6" y="819.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.6" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1098.6" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.6" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1099.6" y="803.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.6" y="814.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1101.6" y="803.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1104.6" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.11%)</title><rect x="1103.6" y="835.0" width="13.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.6" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1103.6" y="819.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.6" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1103.6" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.6" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1104.6" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.6" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1105.6" y="819.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.6" y="830.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1105.6" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.6" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1106.6" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.6" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1106.6" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.6" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1106.6" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.6" y="782.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1106.6" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.6" y="766.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1106.6" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.6" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1106.6" y="723.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.6" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1107.7" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="814.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1107.7" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.68%)</title><rect x="1108.7" y="819.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.7" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.68%)</title><rect x="1108.7" y="803.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.68%)</title><rect x="1108.7" y="787.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.7" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.68%)</title><rect x="1108.7" y="771.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.7" y="782.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.68%)</title><rect x="1108.7" y="755.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.7" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.68%)</title><rect x="1108.7" y="739.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.7" y="750.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1109.7" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.7" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.51%)</title><rect x="1110.7" y="723.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.7" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1110.7" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.7" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.17%)</title><rect x="1111.7" y="707.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.17%)</title><rect x="1113.7" y="707.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.7" y="718.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1114.7" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.7" y="702.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1115.7" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.7" y="718.0"></text>
</g>
<g>
<title>JavaThread::run() (70 samples, 5.96%)</title><rect x="1116.7" y="851.0" width="70.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.7" y="862.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (70 samples, 5.96%)</title><rect x="1116.7" y="835.0" width="70.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.7" y="846.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (70 samples, 5.96%)</title><rect x="1116.7" y="819.0" width="70.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.7" y="830.0">CompileB..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (69 samples, 5.87%)</title><rect x="1116.7" y="803.0" width="69.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="814.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (66 samples, 5.62%)</title><rect x="1116.7" y="787.0" width="66.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.7" y="798.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (66 samples, 5.62%)</title><rect x="1116.7" y="771.0" width="66.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.7" y="782.0">Compile..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (2 samples, 0.17%)</title><rect x="1116.7" y="755.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.7" y="766.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.17%)</title><rect x="1116.7" y="739.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.7" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1116.7" y="723.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.17%)</title><rect x="1116.7" y="707.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.7" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.17%)</title><rect x="1116.7" y="691.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.7" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1116.7" y="675.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.7" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1116.7" y="659.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.17%)</title><rect x="1116.7" y="643.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.17%)</title><rect x="1116.7" y="627.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.7" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.17%)</title><rect x="1116.7" y="611.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.17%)</title><rect x="1116.7" y="595.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.17%)</title><rect x="1116.7" y="579.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.7" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.17%)</title><rect x="1116.7" y="563.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.7" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.17%)</title><rect x="1116.7" y="547.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.7" y="558.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (2 samples, 0.17%)</title><rect x="1116.7" y="531.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.7" y="542.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (2 samples, 0.17%)</title><rect x="1116.7" y="515.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.7" y="526.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1116.7" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.7" y="510.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1116.7" y="483.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.7" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1117.7" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.7" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 2.47%)</title><rect x="1118.7" y="755.0" width="29.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.7" y="766.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1118.7" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.7" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1118.7" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.26%)</title><rect x="1119.7" y="739.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.7" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1119.7" y="723.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.7" y="734.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.17%)</title><rect x="1119.7" y="707.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.7" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1121.7" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.7" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1121.7" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.7" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1121.7" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.7" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.09%)</title><rect x="1121.7" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.7" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.09%)</title><rect x="1121.7" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.7" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1121.7" y="627.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.7" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1121.7" y="611.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.7" y="622.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.09%)</title><rect x="1121.7" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.7" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1122.7" y="739.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1122.7" y="723.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1122.7" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.7" y="718.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.09%)</title><rect x="1122.7" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1123.7" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1123.7" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1124.7" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 1.87%)</title><rect x="1125.7" y="739.0" width="22.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.7" y="750.0">P..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1125.7" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1126.7" y="723.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1126.7" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.7" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1127.7" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.7" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1127.7" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1128.7" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.7" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1128.7" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1129.7" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1129.7" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1129.7" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.7" y="702.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1129.7" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.7" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1129.7" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.7" y="670.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1129.7" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.51%)</title><rect x="1130.7" y="723.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.7" y="734.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1131.8" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.8" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1132.8" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1133.8" y="707.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="1133.8" y="691.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1136.8" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (2 samples, 0.17%)</title><rect x="1137.8" y="723.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.34%)</title><rect x="1139.8" y="723.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="734.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1142.8" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1143.8" y="723.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1144.8" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1145.8" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1145.8" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.8" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1145.8" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.8" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1145.8" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.8" y="686.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1146.8" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.8" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 2.04%)</title><rect x="1147.8" y="755.0" width="24.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.8" y="766.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.17%)</title><rect x="1147.8" y="739.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.17%)</title><rect x="1147.8" y="723.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1148.8" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1148.8" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1149.8" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="750.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1149.8" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1149.8" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1149.8" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 1.28%)</title><rect x="1150.8" y="739.0" width="15.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1150.8" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.94%)</title><rect x="1151.8" y="723.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 0.77%)</title><rect x="1153.8" y="707.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.77%)</title><rect x="1153.8" y="691.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1159.9" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1159.9" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1160.9" y="675.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1162.9" y="723.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1164.9" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.34%)</title><rect x="1165.9" y="739.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.34%)</title><rect x="1165.9" y="723.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.9" y="734.0"></text>
</g>
<g>
<title>CheckCastPPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.9" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="718.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.9" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.9" y="707.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.9" y="718.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.09%)</title><rect x="1168.9" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1169.9" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1169.9" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1169.9" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1169.9" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1170.9" y="739.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.85%)</title><rect x="1171.9" y="755.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.85%)</title><rect x="1171.9" y="739.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.85%)</title><rect x="1171.9" y="723.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.85%)</title><rect x="1171.9" y="707.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.85%)</title><rect x="1171.9" y="691.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.85%)</title><rect x="1171.9" y="675.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.9" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.34%)</title><rect x="1171.9" y="659.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1171.9" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.9" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.9" y="638.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.9" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1171.9" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1171.9" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 0.26%)</title><rect x="1172.9" y="643.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.9" y="654.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1172.9" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1172.9" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1172.9" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.09%)</title><rect x="1172.9" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1173.9" y="627.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1173.9" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.09%)</title><rect x="1173.9" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.09%)</title><rect x="1173.9" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.09%)</title><rect x="1173.9" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1173.9" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1174.9" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1174.9" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1174.9" y="579.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1174.9" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1174.9" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1174.9" y="531.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1174.9" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1174.9" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="494.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1174.9" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1174.9" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1174.9" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.09%)</title><rect x="1174.9" y="403.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1175.9" y="659.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1175.9" y="643.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="654.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1175.9" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1175.9" y="611.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1176.9" y="627.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1176.9" y="611.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1176.9" y="595.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.9" y="579.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.9" y="563.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.9" y="547.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.9" y="531.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.9" y="515.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.9" y="499.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.9" y="483.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.9" y="467.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.9" y="451.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.9" y="435.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.9" y="419.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.9" y="403.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.9" y="387.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.9" y="371.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.9" y="355.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1176.9" y="339.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.9" y="323.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.9" y="307.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.9" y="291.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.9" y="275.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1176.9" y="259.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1176.9" y="243.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1176.9" y="227.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1176.9" y="211.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.9" y="195.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1176.9" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="190.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1176.9" y="163.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1179.9" y="174.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1177.9" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="206.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1177.9" y="179.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1177.9" y="163.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="174.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1177.9" y="147.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="158.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1177.9" y="131.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="142.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1177.9" y="115.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="126.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1177.9" y="99.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1177.9" y="83.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="67.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="78.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1177.9" y="51.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="62.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.09%)</title><rect x="1177.9" y="35.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.0" y="387.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1179.0" y="371.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1179.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1179.0" y="339.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.09%)</title><rect x="1179.0" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1179.0" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="579.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="563.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.0" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="515.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.0" y="526.0"></text>
</g>
<g>
<title>Node::cmp(Node const&amp;) const (1 samples, 0.09%)</title><rect x="1180.0" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.0" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.0" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.0" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.0" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="547.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.0" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.0" y="515.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1181.0" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1181.0" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1181.0" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1181.0" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.09%)</title><rect x="1181.0" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1182.0" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.09%)</title><rect x="1182.0" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1183.0" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.17%)</title><rect x="1183.0" y="771.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.17%)</title><rect x="1183.0" y="755.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.17%)</title><rect x="1183.0" y="739.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.17%)</title><rect x="1183.0" y="723.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1183.0" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1183.0" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.0" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.0" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.0" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1183.0" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.0" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.09%)</title><rect x="1183.0" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.09%)</title><rect x="1184.0" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.09%)</title><rect x="1184.0" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.09%)</title><rect x="1185.0" y="787.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.0" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.09%)</title><rect x="1185.0" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.0" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.0" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.0" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.0" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.0" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1187.0" y="851.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1187.0" y="835.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1187.0" y="819.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.09%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.09%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
</g>
</svg>
