<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (361 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.28%)</title><rect x="10.0" y="1347.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 6.93%)</title><rect x="13.3" y="1347.0" width="81.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="1358.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (24 samples, 6.65%)</title><rect x="16.5" y="1331.0" width="78.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="1342.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 6.65%)</title><rect x="16.5" y="1315.0" width="78.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.5" y="1326.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.28%)</title><rect x="16.5" y="1299.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.28%)</title><rect x="16.5" y="1283.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.28%)</title><rect x="19.8" y="1299.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.28%)</title><rect x="19.8" y="1283.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.8" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.28%)</title><rect x="19.8" y="1267.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/544260150.accept (1 samples, 0.28%)</title><rect x="19.8" y="1251.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.28%)</title><rect x="19.8" y="1235.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.28%)</title><rect x="19.8" y="1219.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.28%)</title><rect x="19.8" y="1203.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.39%)</title><rect x="23.1" y="1299.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1605021575.accept (4 samples, 1.11%)</title><rect x="23.1" y="1283.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.11%)</title><rect x="23.1" y="1267.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.55%)</title><rect x="23.1" y="1251.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.55%)</title><rect x="23.1" y="1235.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.55%)</title><rect x="23.1" y="1219.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.55%)</title><rect x="23.1" y="1203.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.55%)</title><rect x="23.1" y="1187.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.55%)</title><rect x="23.1" y="1171.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.55%)</title><rect x="29.6" y="1251.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.6" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.55%)</title><rect x="29.6" y="1235.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.55%)</title><rect x="29.6" y="1219.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.55%)</title><rect x="29.6" y="1203.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.28%)</title><rect x="36.1" y="1283.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.28%)</title><rect x="36.1" y="1267.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.28%)</title><rect x="36.1" y="1251.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.28%)</title><rect x="36.1" y="1235.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.71%)</title><rect x="39.4" y="1299.0" width="55.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.4" y="1310.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.71%)</title><rect x="39.4" y="1283.0" width="55.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.4" y="1294.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.32%)</title><rect x="39.4" y="1267.0" width="39.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.4" y="1278.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (8 samples, 2.22%)</title><rect x="39.4" y="1251.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.4" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (8 samples, 2.22%)</title><rect x="39.4" y="1235.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.4" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.39%)</title><rect x="39.4" y="1219.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.28%)</title><rect x="39.4" y="1203.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.28%)</title><rect x="39.4" y="1187.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="39.4" y="1171.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="39.4" y="1155.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.28%)</title><rect x="39.4" y="1139.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.11%)</title><rect x="42.7" y="1203.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="42.7" y="1187.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="42.7" y="1171.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.28%)</title><rect x="42.7" y="1155.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.28%)</title><rect x="42.7" y="1139.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.28%)</title><rect x="46.0" y="1187.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.28%)</title><rect x="46.0" y="1171.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.28%)</title><rect x="46.0" y="1155.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.28%)</title><rect x="46.0" y="1139.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="46.0" y="1123.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.28%)</title><rect x="46.0" y="1107.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.55%)</title><rect x="49.2" y="1187.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.28%)</title><rect x="49.2" y="1171.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.28%)</title><rect x="49.2" y="1155.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="49.2" y="1139.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="49.2" y="1123.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.28%)</title><rect x="52.5" y="1171.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.28%)</title><rect x="52.5" y="1155.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.28%)</title><rect x="52.5" y="1139.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.28%)</title><rect x="52.5" y="1123.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.28%)</title><rect x="52.5" y="1107.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.5" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.28%)</title><rect x="52.5" y="1091.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.28%)</title><rect x="52.5" y="1075.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.28%)</title><rect x="52.5" y="1059.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.28%)</title><rect x="52.5" y="1043.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.28%)</title><rect x="52.5" y="1027.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.5" y="1038.0"></text>
</g>
<g>
<title>__read (1 samples, 0.28%)</title><rect x="52.5" y="1011.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="55.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/1733301272.shouldBlock (1 samples, 0.28%)</title><rect x="55.8" y="1219.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.28%)</title><rect x="55.8" y="1203.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.28%)</title><rect x="55.8" y="1187.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.8" y="1198.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.28%)</title><rect x="55.8" y="1171.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.28%)</title><rect x="55.8" y="1155.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.28%)</title><rect x="59.0" y="1219.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.28%)</title><rect x="59.0" y="1203.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.28%)</title><rect x="59.0" y="1187.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.28%)</title><rect x="59.0" y="1171.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.28%)</title><rect x="59.0" y="1155.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.28%)</title><rect x="59.0" y="1139.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.28%)</title><rect x="59.0" y="1123.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.28%)</title><rect x="59.0" y="1107.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.28%)</title><rect x="59.0" y="1091.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="62.3" y="1219.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="62.3" y="1203.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="62.3" y="1187.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="62.3" y="1171.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.28%)</title><rect x="62.3" y="1155.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.28%)</title><rect x="62.3" y="1139.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.28%)</title><rect x="62.3" y="1123.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.28%)</title><rect x="62.3" y="1107.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.28%)</title><rect x="62.3" y="1091.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.28%)</title><rect x="62.3" y="1075.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.11%)</title><rect x="65.6" y="1251.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.28%)</title><rect x="65.6" y="1235.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.55%)</title><rect x="68.8" y="1235.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.55%)</title><rect x="68.8" y="1219.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.55%)</title><rect x="68.8" y="1203.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.55%)</title><rect x="68.8" y="1187.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.55%)</title><rect x="68.8" y="1171.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.28%)</title><rect x="72.1" y="1155.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.28%)</title><rect x="72.1" y="1139.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.28%)</title><rect x="75.4" y="1235.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.28%)</title><rect x="75.4" y="1219.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.28%)</title><rect x="75.4" y="1203.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.4" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.28%)</title><rect x="75.4" y="1187.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="75.4" y="1171.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.28%)</title><rect x="75.4" y="1155.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.11%)</title><rect x="78.6" y="1267.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.11%)</title><rect x="78.6" y="1251.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.83%)</title><rect x="78.6" y="1235.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.28%)</title><rect x="85.2" y="1219.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.28%)</title><rect x="85.2" y="1203.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.2" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.28%)</title><rect x="85.2" y="1187.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.28%)</title><rect x="85.2" y="1171.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.28%)</title><rect x="85.2" y="1155.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="85.2" y="1139.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.28%)</title><rect x="85.2" y="1123.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.28%)</title><rect x="88.4" y="1235.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.28%)</title><rect x="88.4" y="1219.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.4" y="1230.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.28%)</title><rect x="88.4" y="1203.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.28%)</title><rect x="88.4" y="1187.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.28%)</title><rect x="88.4" y="1171.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.28%)</title><rect x="91.7" y="1267.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="91.7" y="1251.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="91.7" y="1235.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="91.7" y="1219.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="91.7" y="1203.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.28%)</title><rect x="91.7" y="1187.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.28%)</title><rect x="91.7" y="1171.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.28%)</title><rect x="91.7" y="1155.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.28%)</title><rect x="91.7" y="1139.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.28%)</title><rect x="91.7" y="1123.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.28%)</title><rect x="91.7" y="1107.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="91.7" y="1091.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="91.7" y="1075.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (244 samples, 67.59%)</title><rect x="95.0" y="1347.0" width="797.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.0" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (244 samples, 67.59%)</title><rect x="95.0" y="1331.0" width="797.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.0" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (244 samples, 67.59%)</title><rect x="95.0" y="1315.0" width="797.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.0" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/772955266.run (227 samples, 62.88%)</title><rect x="98.3" y="1299.0" width="741.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.3" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/772955266.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (227 samples, 62.88%)</title><rect x="98.3" y="1283.0" width="741.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.3" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (227 samples, 62.88%)</title><rect x="98.3" y="1267.0" width="741.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.3" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (227 samples, 62.88%)</title><rect x="98.3" y="1251.0" width="741.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.3" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 1.66%)</title><rect x="111.3" y="1235.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.3" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 1.66%)</title><rect x="111.3" y="1219.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 1.66%)</title><rect x="111.3" y="1203.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 1.11%)</title><rect x="111.3" y="1187.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.55%)</title><rect x="124.4" y="1187.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="127.4" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="124.4" y="1171.0" width="6.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="127.4" y="1182.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="124.4" y="1155.0" width="6.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="127.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (15 samples, 4.16%)</title><rect x="130.9" y="1235.0" width="49.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.9" y="1246.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 4.16%)</title><rect x="130.9" y="1219.0" width="49.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.9" y="1230.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 4.16%)</title><rect x="130.9" y="1203.0" width="49.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.9" y="1214.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.94%)</title><rect x="157.1" y="1187.0" width="22.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.1" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.94%)</title><rect x="157.1" y="1171.0" width="22.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.1" y="1182.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$306/673627877.accept (7 samples, 1.94%)</title><rect x="157.1" y="1155.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.1" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (7 samples, 1.94%)</title><rect x="157.1" y="1139.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.1" y="1150.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 1.94%)</title><rect x="157.1" y="1123.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.1" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 1.94%)</title><rect x="157.1" y="1107.0" width="22.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="160.1" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.94%)</title><rect x="157.1" y="1091.0" width="22.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.1" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.55%)</title><rect x="157.1" y="1075.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.55%)</title><rect x="157.1" y="1059.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.1" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="160.4" y="1043.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="163.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.39%)</title><rect x="163.6" y="1075.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/860669979.accept (1 samples, 0.28%)</title><rect x="176.7" y="1059.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (40 samples, 11.08%)</title><rect x="180.0" y="1235.0" width="130.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.0" y="1246.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (39 samples, 10.80%)</title><rect x="183.2" y="1219.0" width="127.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.2" y="1230.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (39 samples, 10.80%)</title><rect x="183.2" y="1203.0" width="127.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.2" y="1214.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 10.80%)</title><rect x="183.2" y="1187.0" width="127.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.2" y="1198.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 10.80%)</title><rect x="183.2" y="1171.0" width="127.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.2" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (39 samples, 10.80%)</title><rect x="183.2" y="1155.0" width="127.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.2" y="1166.0">com/fasterxml/ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="183.2" y="1139.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="186.2" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="183.2" y="1123.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="186.2" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="183.2" y="1107.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="186.2" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="183.2" y="1091.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="186.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 2.49%)</title><rect x="186.5" y="1139.0" width="29.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.5" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.83%)</title><rect x="186.5" y="1123.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.83%)</title><rect x="186.5" y="1107.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.83%)</title><rect x="186.5" y="1091.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.83%)</title><rect x="186.5" y="1075.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.66%)</title><rect x="196.3" y="1123.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.66%)</title><rect x="196.3" y="1107.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 1.66%)</title><rect x="196.3" y="1091.0" width="19.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 1.66%)</title><rect x="196.3" y="1075.0" width="19.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="209.4" y="1059.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="212.7" y="1059.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 6.09%)</title><rect x="215.9" y="1139.0" width="71.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.9" y="1150.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.28%)</title><rect x="215.9" y="1123.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="215.9" y="1107.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="215.9" y="1091.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="215.9" y="1075.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.55%)</title><rect x="219.2" y="1123.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.55%)</title><rect x="219.2" y="1107.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="219.2" y="1091.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="222.5" y="1091.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="222.5" y="1075.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="222.5" y="1059.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (19 samples, 5.26%)</title><rect x="225.7" y="1123.0" width="62.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="1134.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (19 samples, 5.26%)</title><rect x="225.7" y="1107.0" width="62.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.7" y="1118.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 1.94%)</title><rect x="229.0" y="1091.0" width="22.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.0" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="229.0" y="1075.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="232.3" y="1075.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="232.3" y="1059.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="232.3" y="1043.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.11%)</title><rect x="235.5" y="1075.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="248.6" y="1075.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="248.6" y="1059.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.05%)</title><rect x="251.9" y="1091.0" width="35.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.9" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.05%)</title><rect x="251.9" y="1075.0" width="35.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.9" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.49%)</title><rect x="255.2" y="1059.0" width="29.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.2" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.83%)</title><rect x="258.4" y="1043.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="258.4" y="1027.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="258.4" y="1011.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="258.4" y="995.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.55%)</title><rect x="261.7" y="1027.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.11%)</title><rect x="268.2" y="1043.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.11%)</title><rect x="268.2" y="1027.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.11%)</title><rect x="268.2" y="1011.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="268.2" y="995.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.83%)</title><rect x="271.5" y="995.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.83%)</title><rect x="271.5" y="979.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.5" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.83%)</title><rect x="271.5" y="963.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.5" y="974.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.83%)</title><rect x="271.5" y="947.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.28%)</title><rect x="281.3" y="1043.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="281.3" y="1027.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="281.3" y="1011.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (1 samples, 0.28%)</title><rect x="284.6" y="1059.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 1.94%)</title><rect x="287.8" y="1139.0" width="22.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.8" y="1150.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 1.94%)</title><rect x="287.8" y="1123.0" width="22.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.8" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 1.94%)</title><rect x="287.8" y="1107.0" width="22.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.8" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 1.94%)</title><rect x="287.8" y="1091.0" width="22.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.8" y="1102.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 1.94%)</title><rect x="287.8" y="1075.0" width="22.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.8" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.28%)</title><rect x="307.5" y="1059.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (161 samples, 44.60%)</title><rect x="310.7" y="1235.0" width="526.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.7" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (22 samples, 6.09%)</title><rect x="310.7" y="1219.0" width="71.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.7" y="1230.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 4.43%)</title><rect x="330.3" y="1203.0" width="52.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.3" y="1214.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 3.60%)</title><rect x="340.1" y="1187.0" width="42.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.1" y="1198.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.11%)</title><rect x="349.9" y="1171.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.11%)</title><rect x="349.9" y="1155.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.11%)</title><rect x="349.9" y="1139.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.11%)</title><rect x="349.9" y="1123.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.11%)</title><rect x="349.9" y="1107.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 1.66%)</title><rect x="363.0" y="1171.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 1.66%)</title><rect x="363.0" y="1155.0" width="19.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="363.0" y="1139.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.28%)</title><rect x="363.0" y="1123.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.39%)</title><rect x="366.3" y="1139.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="382.6" y="1219.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.6" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="382.6" y="1203.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (33 samples, 9.14%)</title><rect x="385.9" y="1219.0" width="107.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.9" y="1230.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (33 samples, 9.14%)</title><rect x="385.9" y="1203.0" width="107.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.9" y="1214.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 4.16%)</title><rect x="389.2" y="1187.0" width="49.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="392.2" y="1198.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.94%)</title><rect x="408.8" y="1171.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.8" y="1182.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.94%)</title><rect x="408.8" y="1155.0" width="22.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.8" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.11%)</title><rect x="412.0" y="1139.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.11%)</title><rect x="412.0" y="1123.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.11%)</title><rect x="412.0" y="1107.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.11%)</title><rect x="412.0" y="1091.0" width="13.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="415.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.28%)</title><rect x="412.0" y="1075.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="415.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.28%)</title><rect x="412.0" y="1059.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="415.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.55%)</title><rect x="415.3" y="1075.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="418.3" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="415.3" y="1059.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.3" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="415.3" y="1043.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="418.3" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="418.6" y="1059.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.6" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.28%)</title><rect x="418.6" y="1043.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="421.6" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="418.6" y="1027.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="421.6" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="418.6" y="1011.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.6" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="421.9" y="1075.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="424.9" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="421.9" y="1059.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="424.9" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.28%)</title><rect x="421.9" y="1043.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="424.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.28%)</title><rect x="421.9" y="1027.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="424.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="425.1" y="1139.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.1" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="428.4" y="1139.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="431.4" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.55%)</title><rect x="431.7" y="1171.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="434.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.28%)</title><rect x="438.2" y="1187.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.28%)</title><rect x="438.2" y="1171.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="438.2" y="1155.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.2" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 4.43%)</title><rect x="441.5" y="1187.0" width="52.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.5" y="1198.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 4.43%)</title><rect x="441.5" y="1171.0" width="52.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.5" y="1182.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="448.0" y="1155.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="448.0" y="1139.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="448.0" y="1123.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="448.0" y="1107.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="451.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="448.0" y="1091.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 3.60%)</title><rect x="451.3" y="1155.0" width="42.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.3" y="1166.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 3.32%)</title><rect x="454.5" y="1139.0" width="39.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.5" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="454.5" y="1123.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.28%)</title><rect x="454.5" y="1107.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="457.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 3.05%)</title><rect x="457.8" y="1123.0" width="36.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.8" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.83%)</title><rect x="467.6" y="1107.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.11%)</title><rect x="477.4" y="1107.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.4" y="1118.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.28%)</title><rect x="490.5" y="1107.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="493.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (97 samples, 26.87%)</title><rect x="493.8" y="1219.0" width="317.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="496.8" y="1230.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (97 samples, 26.87%)</title><rect x="493.8" y="1203.0" width="317.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="496.8" y="1214.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (75 samples, 20.78%)</title><rect x="493.8" y="1187.0" width="245.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.8" y="1198.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (75 samples, 20.78%)</title><rect x="493.8" y="1171.0" width="245.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.8" y="1182.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (73 samples, 20.22%)</title><rect x="497.0" y="1155.0" width="238.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.0" y="1166.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.28%)</title><rect x="497.0" y="1139.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.0" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.28%)</title><rect x="497.0" y="1123.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.0" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.28%)</title><rect x="497.0" y="1107.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.0" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.28%)</title><rect x="497.0" y="1091.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.28%)</title><rect x="497.0" y="1075.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.28%)</title><rect x="497.0" y="1059.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (70 samples, 19.39%)</title><rect x="500.3" y="1139.0" width="228.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.3" y="1150.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (68 samples, 18.84%)</title><rect x="500.3" y="1123.0" width="222.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.3" y="1134.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (61 samples, 16.90%)</title><rect x="519.9" y="1107.0" width="199.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="522.9" y="1118.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.28%)</title><rect x="529.7" y="1091.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="532.7" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="533.0" y="1091.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="536.0" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="536.3" y="1091.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="539.3" y="1102.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.83%)</title><rect x="539.5" y="1091.0" width="9.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="542.5" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 1.94%)</title><rect x="549.3" y="1091.0" width="22.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="552.3" y="1102.0">_..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="565.7" y="1075.0" width="6.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="568.7" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="572.2" y="1091.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="575.2" y="1102.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (44 samples, 12.19%)</title><rect x="575.5" y="1091.0" width="143.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="578.5" y="1102.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.55%)</title><rect x="611.4" y="1075.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="614.4" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.55%)</title><rect x="611.4" y="1059.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="614.4" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="618.0" y="1075.0" width="3.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="621.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="618.0" y="1059.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="621.0" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.55%)</title><rect x="621.2" y="1075.0" width="6.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="624.2" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 0.83%)</title><rect x="627.8" y="1075.0" width="9.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="630.8" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.16%)</title><rect x="637.6" y="1075.0" width="49.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="640.6" y="1086.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.28%)</title><rect x="686.6" y="1075.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="689.6" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.55%)</title><rect x="689.9" y="1075.0" width="6.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="692.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.28%)</title><rect x="696.4" y="1075.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="699.4" y="1086.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.55%)</title><rect x="699.7" y="1075.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.7" y="1086.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.28%)</title><rect x="706.2" y="1075.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="709.2" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="709.5" y="1075.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="712.5" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.55%)</title><rect x="712.8" y="1075.0" width="6.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="715.8" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="719.3" y="1107.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="722.3" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.55%)</title><rect x="722.6" y="1123.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="725.6" y="1134.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="722.6" y="1107.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="725.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.55%)</title><rect x="729.1" y="1139.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="732.4" y="1123.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="732.4" y="1107.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="735.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.28%)</title><rect x="735.7" y="1155.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="735.7" y="1139.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (7 samples, 1.94%)</title><rect x="738.9" y="1187.0" width="22.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.9" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (7 samples, 1.94%)</title><rect x="738.9" y="1171.0" width="22.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.9" y="1182.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 1.94%)</title><rect x="738.9" y="1155.0" width="22.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.9" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 1.94%)</title><rect x="738.9" y="1139.0" width="22.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.9" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.94%)</title><rect x="738.9" y="1123.0" width="22.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.9" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.94%)</title><rect x="738.9" y="1107.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.9" y="1118.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (1 samples, 0.28%)</title><rect x="758.5" y="1091.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="761.8" y="1187.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.8" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="761.8" y="1171.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="764.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="765.1" y="1187.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="768.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.55%)</title><rect x="768.3" y="1187.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.55%)</title><rect x="768.3" y="1171.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="771.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.55%)</title><rect x="774.9" y="1187.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="777.9" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="778.1" y="1171.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.11%)</title><rect x="781.4" y="1187.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.39%)</title><rect x="794.5" y="1187.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.39%)</title><rect x="794.5" y="1171.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.39%)</title><rect x="794.5" y="1155.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.39%)</title><rect x="794.5" y="1139.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.39%)</title><rect x="794.5" y="1123.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.39%)</title><rect x="794.5" y="1107.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.5" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="807.6" y="1091.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="810.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.22%)</title><rect x="810.8" y="1219.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.8" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.22%)</title><rect x="810.8" y="1203.0" width="26.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.8" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.28%)</title><rect x="830.4" y="1187.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.28%)</title><rect x="830.4" y="1171.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="833.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.28%)</title><rect x="830.4" y="1155.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.28%)</title><rect x="830.4" y="1139.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="833.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$302/585029013.accept (1 samples, 0.28%)</title><rect x="830.4" y="1123.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.4" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.28%)</title><rect x="833.7" y="1187.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="836.7" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="837.0" y="1235.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="840.0" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="837.0" y="1219.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="840.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.28%)</title><rect x="840.2" y="1299.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="840.2" y="1283.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.28%)</title><rect x="840.2" y="1267.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.28%)</title><rect x="840.2" y="1251.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="843.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 4.16%)</title><rect x="843.5" y="1299.0" width="49.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.5" y="1310.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 4.16%)</title><rect x="843.5" y="1283.0" width="49.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="846.5" y="1294.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.83%)</title><rect x="843.5" y="1267.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.83%)</title><rect x="843.5" y="1251.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.83%)</title><rect x="843.5" y="1235.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.83%)</title><rect x="843.5" y="1219.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="846.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.83%)</title><rect x="843.5" y="1203.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="846.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.28%)</title><rect x="853.3" y="1267.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="856.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.28%)</title><rect x="853.3" y="1251.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.28%)</title><rect x="853.3" y="1235.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 3.05%)</title><rect x="856.6" y="1267.0" width="35.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="859.6" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 3.05%)</title><rect x="856.6" y="1251.0" width="35.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="859.6" y="1262.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 3.05%)</title><rect x="856.6" y="1235.0" width="35.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="859.6" y="1246.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 3.05%)</title><rect x="856.6" y="1219.0" width="35.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="859.6" y="1230.0">jav..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.55%)</title><rect x="892.5" y="1347.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="895.5" y="1358.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.28%)</title><rect x="892.5" y="1331.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="895.5" y="1342.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.28%)</title><rect x="892.5" y="1315.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="895.5" y="1326.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="892.5" y="1299.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="895.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.28%)</title><rect x="895.8" y="1331.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.28%)</title><rect x="895.8" y="1315.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.28%)</title><rect x="895.8" y="1299.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="898.8" y="1310.0"></text>
</g>
<g>
<title>start_thread (89 samples, 24.65%)</title><rect x="899.1" y="1347.0" width="290.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="902.1" y="1358.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (89 samples, 24.65%)</title><rect x="899.1" y="1331.0" width="290.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="902.1" y="1342.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.28%)</title><rect x="899.1" y="1315.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.1" y="1326.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.28%)</title><rect x="899.1" y="1299.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="902.1" y="1310.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.28%)</title><rect x="899.1" y="1283.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="902.1" y="1294.0"></text>
</g>
<g>
<title>SuspendibleThreadSet::join() (1 samples, 0.28%)</title><rect x="899.1" y="1267.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="902.1" y="1278.0"></text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.60%)</title><rect x="902.4" y="1315.0" width="42.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.4" y="1326.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 3.60%)</title><rect x="902.4" y="1299.0" width="42.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.4" y="1310.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 3.60%)</title><rect x="902.4" y="1283.0" width="42.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.4" y="1294.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.60%)</title><rect x="902.4" y="1267.0" width="42.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.4" y="1278.0">G1Pa..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.28%)</title><rect x="912.2" y="1251.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.2" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 2.22%)</title><rect x="915.4" y="1251.0" width="26.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.4" y="1262.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.28%)</title><rect x="938.3" y="1235.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="941.3" y="1246.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="941.6" y="1251.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="944.6" y="1262.0"></text>
</g>
<g>
<title>JavaThread::run() (75 samples, 20.78%)</title><rect x="944.8" y="1315.0" width="245.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.8" y="1326.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (75 samples, 20.78%)</title><rect x="944.8" y="1299.0" width="245.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.8" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (75 samples, 20.78%)</title><rect x="944.8" y="1283.0" width="245.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.8" y="1294.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (75 samples, 20.78%)</title><rect x="944.8" y="1267.0" width="245.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.8" y="1278.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (72 samples, 19.94%)</title><rect x="944.8" y="1251.0" width="235.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="947.8" y="1262.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (72 samples, 19.94%)</title><rect x="944.8" y="1235.0" width="235.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.8" y="1246.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 11.36%)</title><rect x="944.8" y="1219.0" width="134.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.8" y="1230.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.28%)</title><rect x="944.8" y="1203.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="947.8" y="1214.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.28%)</title><rect x="944.8" y="1187.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.8" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.28%)</title><rect x="944.8" y="1171.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="947.8" y="1182.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.55%)</title><rect x="948.1" y="1203.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.1" y="1214.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.28%)</title><rect x="948.1" y="1187.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.1" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="948.1" y="1171.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.1" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="948.1" y="1155.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="951.1" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="951.4" y="1187.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.4" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="951.4" y="1171.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.66%)</title><rect x="954.7" y="1203.0" width="19.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.7" y="1214.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.28%)</title><rect x="954.7" y="1187.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.7" y="1198.0"></text>
</g>
<g>
<title>Matcher::validate_null_checks() (1 samples, 0.28%)</title><rect x="957.9" y="1187.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.9" y="1198.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.83%)</title><rect x="961.2" y="1187.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.2" y="1198.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.55%)</title><rect x="961.2" y="1171.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.2" y="1182.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.28%)</title><rect x="967.7" y="1171.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="967.7" y="1155.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="970.7" y="1166.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.28%)</title><rect x="971.0" y="1187.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.0" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.28%)</title><rect x="974.3" y="1203.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.3" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.28%)</title><rect x="974.3" y="1187.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="974.3" y="1171.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.28%)</title><rect x="974.3" y="1155.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 8.59%)</title><rect x="977.5" y="1203.0" width="101.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.5" y="1214.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.55%)</title><rect x="977.5" y="1187.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.5" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="977.5" y="1171.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.5" y="1182.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.28%)</title><rect x="980.8" y="1171.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.55%)</title><rect x="984.1" y="1187.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.55%)</title><rect x="984.1" y="1171.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.83%)</title><rect x="990.6" y="1187.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.6" y="1198.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.28%)</title><rect x="997.1" y="1171.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.39%)</title><rect x="1000.4" y="1187.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1003.4" y="1198.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.28%)</title><rect x="1003.7" y="1171.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.83%)</title><rect x="1007.0" y="1171.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.0" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.83%)</title><rect x="1007.0" y="1155.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.55%)</title><rect x="1016.8" y="1187.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.8" y="1198.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.28%)</title><rect x="1020.0" y="1171.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.28%)</title><rect x="1023.3" y="1187.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.11%)</title><rect x="1026.6" y="1187.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.55%)</title><rect x="1033.1" y="1171.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.1" y="1182.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.28%)</title><rect x="1036.4" y="1155.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1039.4" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.39%)</title><rect x="1039.6" y="1187.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.6" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.28%)</title><rect x="1039.6" y="1171.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.6" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.11%)</title><rect x="1042.9" y="1171.0" width="13.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.9" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.11%)</title><rect x="1042.9" y="1155.0" width="13.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.9" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.11%)</title><rect x="1042.9" y="1139.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1052.7" y="1123.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.55%)</title><rect x="1056.0" y="1187.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.0" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1059.3" y="1171.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.3" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.39%)</title><rect x="1062.5" y="1187.0" width="16.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.5" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.28%)</title><rect x="1065.8" y="1171.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.8" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.55%)</title><rect x="1069.1" y="1171.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.1" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1072.3" y="1155.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.3" y="1166.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.28%)</title><rect x="1075.6" y="1171.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.6" y="1182.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="1075.6" y="1155.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1078.6" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 6.37%)</title><rect x="1078.9" y="1219.0" width="75.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.9" y="1230.0">Compile:..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1078.9" y="1203.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.9" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.28%)</title><rect x="1078.9" y="1187.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.9" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1078.9" y="1171.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.9" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1078.9" y="1155.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.9" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.28%)</title><rect x="1078.9" y="1139.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.55%)</title><rect x="1082.1" y="1203.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.55%)</title><rect x="1082.1" y="1187.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.28%)</title><rect x="1085.4" y="1171.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.28%)</title><rect x="1088.7" y="1203.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (14 samples, 3.88%)</title><rect x="1091.9" y="1203.0" width="45.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.9" y="1214.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.28%)</title><rect x="1091.9" y="1187.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.28%)</title><rect x="1095.2" y="1187.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.55%)</title><rect x="1098.5" y="1187.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.55%)</title><rect x="1098.5" y="1171.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 1.94%)</title><rect x="1105.0" y="1187.0" width="22.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.0" y="1198.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 1.94%)</title><rect x="1105.0" y="1171.0" width="22.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.0" y="1182.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 1.94%)</title><rect x="1105.0" y="1155.0" width="22.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.0" y="1166.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.55%)</title><rect x="1127.9" y="1187.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.28%)</title><rect x="1131.2" y="1171.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.2" y="1182.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.28%)</title><rect x="1131.2" y="1155.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1134.4" y="1187.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1134.4" y="1171.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.4" y="1182.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1134.4" y="1155.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.4" y="1166.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1134.4" y="1139.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.39%)</title><rect x="1137.7" y="1203.0" width="16.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.39%)</title><rect x="1137.7" y="1187.0" width="16.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.55%)</title><rect x="1137.7" y="1171.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.28%)</title><rect x="1137.7" y="1155.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.28%)</title><rect x="1141.0" y="1155.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="1166.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.28%)</title><rect x="1141.0" y="1139.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.0" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1144.2" y="1171.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.2" y="1182.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1144.2" y="1155.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.2" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1147.5" y="1171.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.5" y="1182.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1150.8" y="1171.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.28%)</title><rect x="1150.8" y="1155.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1139.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1123.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.8" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1107.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.8" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1091.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.8" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1075.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1059.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1043.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1027.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="995.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="979.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="963.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="947.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="931.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="915.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1150.8" y="899.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.8" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1150.8" y="883.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1154.0" y="1219.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.94%)</title><rect x="1157.3" y="1219.0" width="22.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.3" y="1230.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.94%)</title><rect x="1157.3" y="1203.0" width="22.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.3" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.94%)</title><rect x="1157.3" y="1187.0" width="22.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.3" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.94%)</title><rect x="1157.3" y="1171.0" width="22.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.3" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.94%)</title><rect x="1157.3" y="1155.0" width="22.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.3" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.66%)</title><rect x="1157.3" y="1139.0" width="19.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="1150.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1157.3" y="1123.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.3" y="1134.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1157.3" y="1107.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.3" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1157.3" y="1091.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.3" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1157.3" y="1075.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.3" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1157.3" y="1059.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.3" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1157.3" y="1043.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.3" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1157.3" y="1027.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1157.3" y="1011.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.3" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.28%)</title><rect x="1157.3" y="995.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1157.3" y="979.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.3" y="990.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*) (1 samples, 0.28%)</title><rect x="1157.3" y="963.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1157.3" y="947.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.3" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1157.3" y="931.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.3" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.28%)</title><rect x="1157.3" y="915.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.3" y="926.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.28%)</title><rect x="1157.3" y="899.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="910.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.28%)</title><rect x="1157.3" y="883.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.11%)</title><rect x="1160.6" y="1123.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.6" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.11%)</title><rect x="1160.6" y="1107.0" width="13.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.11%)</title><rect x="1160.6" y="1091.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.11%)</title><rect x="1160.6" y="1075.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.11%)</title><rect x="1160.6" y="1059.0" width="13.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.11%)</title><rect x="1160.6" y="1043.0" width="13.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="1027.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="1011.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.6" y="995.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.6" y="979.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.6" y="963.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.6" y="947.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="931.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="915.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.6" y="899.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.6" y="883.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.6" y="867.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.6" y="851.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="835.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="819.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.6" y="803.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.6" y="787.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.6" y="771.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.6" y="755.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="739.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="723.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.6" y="707.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.6" y="691.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.6" y="675.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.6" y="659.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="670.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.28%)</title><rect x="1160.6" y="643.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="654.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.28%)</title><rect x="1160.6" y="627.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1160.6" y="611.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="622.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1160.6" y="595.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="606.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.28%)</title><rect x="1160.6" y="579.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.83%)</title><rect x="1163.9" y="1027.0" width="9.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1163.9" y="1011.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1022.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.28%)</title><rect x="1163.9" y="995.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.28%)</title><rect x="1163.9" y="979.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.9" y="990.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.28%)</title><rect x="1163.9" y="963.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="974.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1163.9" y="947.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="1163.9" y="931.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1166.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="1011.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="995.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="979.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="963.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="947.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="931.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="915.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="899.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="883.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="867.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="851.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="835.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="819.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="803.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="787.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="771.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="755.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="739.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="723.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="707.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="691.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="675.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="659.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="643.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="627.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="611.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="595.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="579.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="563.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="547.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="531.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="515.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="499.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="483.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="467.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="451.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="435.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="419.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="403.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="387.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="371.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="355.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1167.1" y="339.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1167.1" y="323.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1167.1" y="307.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1167.1" y="291.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1167.1" y="275.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1167.1" y="259.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1167.1" y="243.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="254.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.28%)</title><rect x="1167.1" y="227.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="243.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1170.4" y="227.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1170.4" y="211.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1170.4" y="195.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1170.4" y="179.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1170.4" y="163.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="147.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.28%)</title><rect x="1170.4" y="131.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1170.4" y="115.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1170.4" y="99.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.28%)</title><rect x="1170.4" y="83.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.28%)</title><rect x="1170.4" y="67.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.4" y="78.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.28%)</title><rect x="1170.4" y="51.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1170.4" y="35.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1173.7" y="1123.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1173.7" y="1107.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1173.7" y="1091.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1173.7" y="1075.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1173.7" y="1059.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1173.7" y="1043.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1173.7" y="1027.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1173.7" y="1011.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1173.7" y="995.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1173.7" y="979.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1173.7" y="963.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1176.9" y="1139.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1176.9" y="1123.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1134.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.28%)</title><rect x="1176.9" y="1107.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1118.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1176.9" y="1091.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1102.0"></text>
</g>
<g>
<title>DecodeNNode::Identity(PhaseTransform*) (1 samples, 0.28%)</title><rect x="1176.9" y="1075.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.83%)</title><rect x="1180.2" y="1251.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.83%)</title><rect x="1180.2" y="1235.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.83%)</title><rect x="1180.2" y="1219.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.55%)</title><rect x="1180.2" y="1203.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.55%)</title><rect x="1180.2" y="1187.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="1198.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1180.2" y="1171.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1180.2" y="1155.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1180.2" y="1139.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1180.2" y="1123.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1180.2" y="1107.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1180.2" y="1091.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="1102.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1180.2" y="1075.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1180.2" y="1059.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1180.2" y="1043.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="1180.2" y="1027.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1183.2" y="1038.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.28%)</title><rect x="1183.5" y="1171.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="1182.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1155.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.5" y="1166.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1139.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.5" y="1150.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1123.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="1134.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1107.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="1118.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1091.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="1102.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1075.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="1086.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1059.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="1070.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1043.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="1054.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1027.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="1038.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="1011.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="1022.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.28%)</title><rect x="1183.5" y="995.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="1006.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.28%)</title><rect x="1186.7" y="1203.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1214.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1186.7" y="1187.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="1198.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1186.7" y="1171.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="1182.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1186.7" y="1155.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="1166.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.28%)</title><rect x="1186.7" y="1139.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1150.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.28%)</title><rect x="1186.7" y="1123.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.28%)</title><rect x="1186.7" y="1107.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.28%)</title><rect x="1186.7" y="1091.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="1102.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (1 samples, 0.28%)</title><rect x="1186.7" y="1075.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="1086.0"></text>
</g>
</g>
</svg>
